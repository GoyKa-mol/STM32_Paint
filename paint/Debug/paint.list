
paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f71c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002158  0800f8ec  0800f8ec  0001f8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a44  08011a44  00031428  2**0
                  CONTENTS
  4 .ARM          00000008  08011a44  08011a44  00021a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a4c  08011a4c  00031428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a4c  08011a4c  00021a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a50  08011a50  00021a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001428  20000000  08011a54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d2c  20001428  08012e7c  00031428  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a154  08012e7c  0003a154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d206  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055a5  00000000  00000000  0005e65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002660  00000000  00000000  00063c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023c8  00000000  00000000  00066268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e422  00000000  00000000  00068630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f972  00000000  00000000  00096a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001154b3  00000000  00000000  000b63c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cb877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a590  00000000  00000000  001cb8f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001428 	.word	0x20001428
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f8d4 	.word	0x0800f8d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000142c 	.word	0x2000142c
 800020c:	0800f8d4 	.word	0x0800f8d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20001444 	.word	0x20001444
 8000614:	2000149c 	.word	0x2000149c

08000618 <ft5336_Init>:
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f003 fb32 	bl	8003c8c <TS_IO_Delay>
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f003 faed 	bl	8003c50 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fab7 	bl	8003c50 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000169c 	.word	0x2000169c

0800071c <ft5336_TS_GetXY>:
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>
 8000838:	bf00      	nop
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fa04 	bl	8003c50 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f9f6 	bl	8003c50 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f003 f9db 	bl	8003c50 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f9cd 	bl	8003c50 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000169c 	.word	0x2000169c
 80008f8:	200016a0 	.word	0x200016a0

080008fc <ft5336_TS_EnableIT>:
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f980 	bl	8003c1c <TS_IO_Write>
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f003 f96c 	bl	8003c1c <TS_IO_Write>
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	2300      	movs	r3, #0
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f95d 	bl	8003c50 <TS_IO_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>
 8000a9c:	bf00      	nop
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 f8d2 	bl	8003c50 <TS_IO_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f8c2 	bl	8003c50 <TS_IO_Read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 f8b4 	bl	8003c50 <TS_IO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000169c 	.word	0x2000169c

08000b08 <ft5336_Get_I2C_InitializedStatus>:
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000169c 	.word	0x2000169c

08000b20 <ft5336_I2C_InitializeIfRequired>:
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
 8000b2e:	f003 f86b 	bl	8003c08 <TS_IO_Init>
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000169c 	.word	0x2000169c

08000b40 <ft5336_TS_Configure>:
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0b6      	sub	sp, #216	; 0xd8
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50]={};
 8000b62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00e faad 	bl	800f0ca <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f005 fb76 	bl	800627a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f999 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f001 f833 	bl	8001bfc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b96:	f000 fa97 	bl	80010c8 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b9a:	f000 fb43 	bl	8001224 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b9e:	f000 fb81 	bl	80012a4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000ba2:	f000 fbbf 	bl	8001324 <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba6:	f000 fc3f 	bl	8001428 <MX_RTC_Init>
  MX_SPI2_Init();
 8000baa:	f000 fce3 	bl	8001574 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bae:	f000 fd1f 	bl	80015f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bb2:	f000 fd71 	bl	8001698 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb6:	f000 fdbd 	bl	8001734 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bba:	f000 fe49 	bl	8001850 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bbe:	f000 fe95 	bl	80018ec <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bc2:	f000 ff6d 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc6:	f000 ff9b 	bl	8001b00 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bca:	f000 fa2b 	bl	8001024 <MX_ADC1_Init>
  MX_DAC_Init();
 8000bce:	f000 facd 	bl	800116c <MX_DAC_Init>
  MX_UART7_Init();
 8000bd2:	f000 ff35 	bl	8001a40 <MX_UART7_Init>
  MX_FMC_Init();
 8000bd6:	f000 ffc3 	bl	8001b60 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000bda:	f000 faf1 	bl	80011c0 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000bde:	f003 f861 	bl	8003ca4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000be2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be6:	2000      	movs	r0, #0
 8000be8:	f003 f8f4 	bl	8003dd4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bec:	f003 f8ca 	bl	8003d84 <BSP_LCD_GetXSize>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	f003 f8db 	bl	8003dac <BSP_LCD_GetYSize>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	fb03 f304 	mul.w	r3, r3, r4
 8000bfc:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4619      	mov	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f003 f8e5 	bl	8003dd4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c0a:	f003 feb5 	bl	8004978 <BSP_LCD_DisplayOn>
  BSP_LCD_SetFont(&Font12);
 8000c0e:	489a      	ldr	r0, [pc, #616]	; (8000e78 <main+0x31c>)
 8000c10:	f003 f982 	bl	8003f18 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f003 f964 	bl	8003ee4 <BSP_LCD_SetBackColor>
  BSP_LCD_SelectLayer(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f003 f939 	bl	8003e94 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f003 fa4e 	bl	80040c4 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c2c:	f003 f942 	bl	8003eb4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 245, 480, 5);
 8000c30:	2305      	movs	r3, #5
 8000c32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c36:	21f5      	movs	r1, #245	; 0xf5
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f003 fd83 	bl	8004744 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(480-5-taille_menu, 0, 5, 245);
 8000c3e:	23f5      	movs	r3, #245	; 0xf5
 8000c40:	2205      	movs	r2, #5
 8000c42:	2100      	movs	r1, #0
 8000c44:	f240 10a9 	movw	r0, #425	; 0x1a9
 8000c48:	f003 fd7c 	bl	8004744 <BSP_LCD_FillRect>
  BSP_LCD_SelectLayer(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 f921 	bl	8003e94 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	f003 fa35 	bl	80040c4 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c5a:	4888      	ldr	r0, [pc, #544]	; (8000e7c <main+0x320>)
 8000c5c:	f003 f92a 	bl	8003eb4 <BSP_LCD_SetTextColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c60:	f003 f890 	bl	8003d84 <BSP_LCD_GetXSize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29c      	uxth	r4, r3
 8000c68:	f003 f8a0 	bl	8003dac <BSP_LCD_GetYSize>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4620      	mov	r0, r4
 8000c74:	f004 fa4e 	bl	8005114 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	677b      	str	r3, [r7, #116]	; 0x74
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	67bb      	str	r3, [r7, #120]	; 0x78
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
 8000c80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c84:	4618      	mov	r0, r3
 8000c86:	f00b ffd8 	bl	800cc3a <osMutexCreate>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b7c      	ldr	r3, [pc, #496]	; (8000e80 <main+0x324>)
 8000c8e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000c90:	4b7c      	ldr	r3, [pc, #496]	; (8000e84 <main+0x328>)
 8000c92:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ca4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00b ff65 	bl	800cb7a <osThreadCreate>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	4b75      	ldr	r3, [pc, #468]	; (8000e88 <main+0x32c>)
 8000cb4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mode */
  osThreadDef(Mode, StartMode, osPriorityAboveNormal, 0, 4096);
 8000cb6:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <main+0x330>)
 8000cb8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cbc:	461d      	mov	r5, r3
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModeHandle = osThreadCreate(osThread(Mode), NULL);
 8000cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00b ff52 	bl	800cb7a <osThreadCreate>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <main+0x334>)
 8000cda:	601a      	str	r2, [r3, #0]

  /* definition and creation of Peindre */
  osThreadDef(Peindre, StartPeindre, osPriorityLow, 0, 1024);
 8000cdc:	4b6d      	ldr	r3, [pc, #436]	; (8000e94 <main+0x338>)
 8000cde:	f107 0420 	add.w	r4, r7, #32
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeindreHandle = osThreadCreate(osThread(Peindre), NULL);
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00b ff3f 	bl	800cb7a <osThreadCreate>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b66      	ldr	r3, [pc, #408]	; (8000e98 <main+0x33c>)
 8000d00:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskEtat */
  osThreadDef(TaskEtat, StartTaskEtat, osPriorityHigh, 0, 1024);
 8000d02:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <main+0x340>)
 8000d04:	1d3c      	adds	r4, r7, #4
 8000d06:	461d      	mov	r5, r3
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEtatHandle = osThreadCreate(osThread(TaskEtat), NULL);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00b ff2e 	bl	800cb7a <osThreadCreate>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	4b5f      	ldr	r3, [pc, #380]	; (8000ea0 <main+0x344>)
 8000d22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d24:	f00b ff22 	bl	800cb6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2c:	485d      	ldr	r0, [pc, #372]	; (8000ea4 <main+0x348>)
 8000d2e:	f006 ff9b 	bl	8007c68 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3a:	485b      	ldr	r0, [pc, #364]	; (8000ea8 <main+0x34c>)
 8000d3c:	f006 ffac 	bl	8007c98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d44:	4857      	ldr	r0, [pc, #348]	; (8000ea4 <main+0x348>)
 8000d46:	f006 ff8f 	bl	8007c68 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4856      	ldr	r0, [pc, #344]	; (8000eac <main+0x350>)
 8000d52:	f006 ffa1 	bl	8007c98 <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	4852      	ldr	r0, [pc, #328]	; (8000ea4 <main+0x348>)
 8000d5c:	f006 ff84 	bl	8007c68 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d68:	4951      	ldr	r1, [pc, #324]	; (8000eb0 <main+0x354>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00e f9b6 	bl	800f0dc <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d74:	4619      	mov	r1, r3
 8000d76:	2005      	movs	r0, #5
 8000d78:	f003 fad4 	bl	8004324 <BSP_LCD_DisplayStringAtLine>

	  sConfig.Channel = ADC_CHANNEL_6;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d84:	4619      	mov	r1, r3
 8000d86:	484b      	ldr	r0, [pc, #300]	; (8000eb4 <main+0x358>)
 8000d88:	f005 fc5c 	bl	8006644 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d8c:	4849      	ldr	r0, [pc, #292]	; (8000eb4 <main+0x358>)
 8000d8e:	f005 fb07 	bl	80063a0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d92:	bf00      	nop
 8000d94:	2164      	movs	r1, #100	; 0x64
 8000d96:	4847      	ldr	r0, [pc, #284]	; (8000eb4 <main+0x358>)
 8000d98:	f005 fbc2 	bl	8006520 <HAL_ADC_PollForConversion>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f8      	bne.n	8000d94 <main+0x238>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000da2:	4844      	ldr	r0, [pc, #272]	; (8000eb4 <main+0x358>)
 8000da4:	f005 fc40 	bl	8006628 <HAL_ADC_GetValue>
 8000da8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	  sConfig.Channel = ADC_CHANNEL_7;
 8000dac:	2307      	movs	r3, #7
 8000dae:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000db0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000db4:	4619      	mov	r1, r3
 8000db6:	483f      	ldr	r0, [pc, #252]	; (8000eb4 <main+0x358>)
 8000db8:	f005 fc44 	bl	8006644 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dbc:	483d      	ldr	r0, [pc, #244]	; (8000eb4 <main+0x358>)
 8000dbe:	f005 faef 	bl	80063a0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc2:	bf00      	nop
 8000dc4:	2164      	movs	r1, #100	; 0x64
 8000dc6:	483b      	ldr	r0, [pc, #236]	; (8000eb4 <main+0x358>)
 8000dc8:	f005 fbaa 	bl	8006520 <HAL_ADC_PollForConversion>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f8      	bne.n	8000dc4 <main+0x268>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000dd2:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <main+0x358>)
 8000dd4:	f005 fc28 	bl	8006628 <HAL_ADC_GetValue>
 8000dd8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	  sConfig.Channel = ADC_CHANNEL_8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000de0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4833      	ldr	r0, [pc, #204]	; (8000eb4 <main+0x358>)
 8000de8:	f005 fc2c 	bl	8006644 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dec:	4831      	ldr	r0, [pc, #196]	; (8000eb4 <main+0x358>)
 8000dee:	f005 fad7 	bl	80063a0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000df2:	bf00      	nop
 8000df4:	2164      	movs	r1, #100	; 0x64
 8000df6:	482f      	ldr	r0, [pc, #188]	; (8000eb4 <main+0x358>)
 8000df8:	f005 fb92 	bl	8006520 <HAL_ADC_PollForConversion>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f8      	bne.n	8000df4 <main+0x298>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e02:	482c      	ldr	r0, [pc, #176]	; (8000eb4 <main+0x358>)
 8000e04:	f005 fc10 	bl	8006628 <HAL_ADC_GetValue>
 8000e08:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

	  HAL_ADC_Start(&hadc1);
 8000e0c:	482a      	ldr	r0, [pc, #168]	; (8000eb8 <main+0x35c>)
 8000e0e:	f005 fac7 	bl	80063a0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e12:	bf00      	nop
 8000e14:	2164      	movs	r1, #100	; 0x64
 8000e16:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <main+0x35c>)
 8000e18:	f005 fb82 	bl	8006520 <HAL_ADC_PollForConversion>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f8      	bne.n	8000e14 <main+0x2b8>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e22:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <main+0x35c>)
 8000e24:	f005 fc00 	bl	8006628 <HAL_ADC_GetValue>
 8000e28:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e2c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8000e30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e40:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <main+0x360>)
 8000e46:	f00e f949 	bl	800f0dc <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2009      	movs	r0, #9
 8000e52:	f003 fa67 	bl	8004324 <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000e56:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <main+0x364>)
 8000e58:	f004 f99c 	bl	8005194 <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <main+0x364>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f43f af61 	beq.w	8000d28 <main+0x1cc>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <main+0x364>)
 8000e68:	8858      	ldrh	r0, [r3, #2]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <main+0x364>)
 8000e6c:	899b      	ldrh	r3, [r3, #12]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	f003 fce1 	bl	8004838 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e76:	e757      	b.n	8000d28 <main+0x1cc>
 8000e78:	200013a8 	.word	0x200013a8
 8000e7c:	ffff0000 	.word	0xffff0000
 8000e80:	20009c34 	.word	0x20009c34
 8000e84:	0800f934 	.word	0x0800f934
 8000e88:	20009a70 	.word	0x20009a70
 8000e8c:	0800f958 	.word	0x0800f958
 8000e90:	2000a020 	.word	0x2000a020
 8000e94:	0800f97c 	.word	0x0800f97c
 8000e98:	20009ba4 	.word	0x20009ba4
 8000e9c:	0800f9a4 	.word	0x0800f9a4
 8000ea0:	20009f68 	.word	0x20009f68
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	0800f8ec 	.word	0x0800f8ec
 8000eb4:	20009da8 	.word	0x20009da8
 8000eb8:	20009d60 	.word	0x20009d60
 8000ebc:	0800f8f8 	.word	0x0800f8f8
 8000ec0:	200016a4 	.word	0x200016a4

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0b4      	sub	sp, #208	; 0xd0
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ece:	2230      	movs	r2, #48	; 0x30
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00e f8f9 	bl	800f0ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	2284      	movs	r2, #132	; 0x84
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00e f8ea 	bl	800f0ca <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ef6:	f008 f829 	bl	8008f4c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <SystemClock_Config+0x154>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a46      	ldr	r2, [pc, #280]	; (8001018 <SystemClock_Config+0x154>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b44      	ldr	r3, [pc, #272]	; (8001018 <SystemClock_Config+0x154>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <SystemClock_Config+0x158>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a41      	ldr	r2, [pc, #260]	; (800101c <SystemClock_Config+0x158>)
 8000f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <SystemClock_Config+0x158>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f4c:	2319      	movs	r3, #25
 8000f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f52:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f60:	2309      	movs	r3, #9
 8000f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 f84e 	bl	800900c <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f76:	f002 fced 	bl	8003954 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f7a:	f007 fff7 	bl	8008f6c <HAL_PWREx_EnableOverDrive>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f84:	f002 fce6 	bl	8003954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000faa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fae:	2106      	movs	r1, #6
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f008 facf 	bl	8009554 <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000fbc:	f002 fcca 	bl	8003954 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <SystemClock_Config+0x15c>)
 8000fc2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fc8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000fea:	2300      	movs	r3, #0
 8000fec:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 fcac 	bl	800995c <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800100a:	f002 fca3 	bl	8003954 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	37d0      	adds	r7, #208	; 0xd0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000
 8001020:	00015868 	.word	0x00015868

08001024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_ADC1_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <MX_ADC1_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_ADC1_Init+0x98>)
 800103e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001042:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_ADC1_Init+0x98>)
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_ADC1_Init+0xa0>)
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_ADC1_Init+0x98>)
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_ADC1_Init+0x98>)
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_ADC1_Init+0x98>)
 8001086:	f005 f947 	bl	8006318 <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001090:	f002 fc60 	bl	8003954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2301      	movs	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_ADC1_Init+0x98>)
 80010a6:	f005 facd 	bl	8006644 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b0:	f002 fc50 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20009d60 	.word	0x20009d60
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_ADC3_Init+0x98>)
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <MX_ADC3_Init+0x9c>)
 80010de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_ADC3_Init+0x98>)
 80010e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_ADC3_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_ADC3_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_ADC3_Init+0x98>)
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <MX_ADC3_Init+0xa0>)
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_ADC3_Init+0x98>)
 8001116:	2201      	movs	r2, #1
 8001118:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_ADC3_Init+0x98>)
 8001124:	2201      	movs	r2, #1
 8001126:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_ADC3_Init+0x98>)
 800112a:	f005 f8f5 	bl	8006318 <HAL_ADC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001134:	f002 fc0e 	bl	8003954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001138:	2306      	movs	r3, #6
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113c:	2301      	movs	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_ADC3_Init+0x98>)
 800114a:	f005 fa7b 	bl	8006644 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001154:	f002 fbfe 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20009da8 	.word	0x20009da8
 8001164:	40012200 	.word	0x40012200
 8001168:	0f000001 	.word	0x0f000001

0800116c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_DAC_Init+0x4c>)
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <MX_DAC_Init+0x50>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_DAC_Init+0x4c>)
 8001182:	f005 fd85 	bl	8006c90 <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800118c:	f002 fbe2 	bl	8003954 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_DAC_Init+0x4c>)
 80011a0:	f005 fdec 	bl	8006d7c <HAL_DAC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011aa:	f002 fbd3 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20009e70 	.word	0x20009e70
 80011bc:	40007400 	.word	0x40007400

080011c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <MX_DMA2D_Init+0x60>)
 80011c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011f6:	f005 fff7 	bl	80071e8 <HAL_DMA2D_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001200:	f002 fba8 	bl	8003954 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001204:	2101      	movs	r1, #1
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_DMA2D_Init+0x5c>)
 8001208:	f006 f94c 	bl	80074a4 <HAL_DMA2D_ConfigLayer>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001212:	f002 fb9f 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20009f6c 	.word	0x20009f6c
 8001220:	4002b000 	.word	0x4002b000

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f006 fd4c 	bl	8007cfc <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f002 fb73 	bl	8003954 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f007 fa5b 	bl	800872c <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f002 fb6a 	bl	8003954 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f007 fa9d 	bl	80087c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f002 fb61 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20009be8 	.word	0x20009be8
 800129c:	40005400 	.word	0x40005400
 80012a0:	00c0eaff 	.word	0x00c0eaff

080012a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C3_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C3_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C3_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <MX_I2C3_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C3_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_I2C3_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C3_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_I2C3_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C3_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C3_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <MX_I2C3_Init+0x74>)
 80012e0:	f006 fd0c 	bl	8007cfc <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f002 fb33 	bl	8003954 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C3_Init+0x74>)
 80012f2:	f007 fa1b 	bl	800872c <HAL_I2CEx_ConfigAnalogFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f002 fb2a 	bl	8003954 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_I2C3_Init+0x74>)
 8001304:	f007 fa5d 	bl	80087c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800130e:	f002 fb21 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20009a74 	.word	0x20009a74
 800131c:	40005c00 	.word	0x40005c00
 8001320:	00c0eaff 	.word	0x00c0eaff

08001324 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2234      	movs	r2, #52	; 0x34
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f00d feca 	bl	800f0ca <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001338:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <MX_LTDC_Init+0x100>)
 800133a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <MX_LTDC_Init+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <MX_LTDC_Init+0xfc>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001356:	2228      	movs	r2, #40	; 0x28
 8001358:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <MX_LTDC_Init+0xfc>)
 800135c:	2209      	movs	r2, #9
 800135e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001362:	2235      	movs	r2, #53	; 0x35
 8001364:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001368:	220b      	movs	r2, #11
 800136a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_LTDC_Init+0xfc>)
 800136e:	f240 2215 	movw	r2, #533	; 0x215
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001376:	f240 121b 	movw	r2, #283	; 0x11b
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_LTDC_Init+0xfc>)
 800137e:	f240 2235 	movw	r2, #565	; 0x235
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001386:	f240 121d 	movw	r2, #285	; 0x11d
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_LTDC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_LTDC_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <MX_LTDC_Init+0xfc>)
 80013a6:	f007 fa59 	bl	800885c <HAL_LTDC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013b0:	f002 fad0 	bl	8003954 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013bc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013c6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013c8:	2302      	movs	r3, #2
 80013ca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013cc:	23ff      	movs	r3, #255	; 0xff
 80013ce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013de:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_LTDC_Init+0xfc>)
 800140a:	f007 fbb9 	bl	8008b80 <HAL_LTDC_ConfigLayer>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001414:	f002 fa9e 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20009cb8 	.word	0x20009cb8
 8001424:	40016800 	.word	0x40016800

08001428 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b092      	sub	sp, #72	; 0x48
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800142e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	222c      	movs	r2, #44	; 0x2c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f00d fe3d 	bl	800f0ca <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <MX_RTC_Init+0x144>)
 8001452:	4a47      	ldr	r2, [pc, #284]	; (8001570 <MX_RTC_Init+0x148>)
 8001454:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <MX_RTC_Init+0x144>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_RTC_Init+0x144>)
 800145e:	227f      	movs	r2, #127	; 0x7f
 8001460:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <MX_RTC_Init+0x144>)
 8001464:	22ff      	movs	r2, #255	; 0xff
 8001466:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <MX_RTC_Init+0x144>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <MX_RTC_Init+0x144>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <MX_RTC_Init+0x144>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800147a:	483c      	ldr	r0, [pc, #240]	; (800156c <MX_RTC_Init+0x144>)
 800147c:	f008 fe5c 	bl	800a138 <HAL_RTC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001486:	f002 fa65 	bl	8003954 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2201      	movs	r2, #1
 80014aa:	4619      	mov	r1, r3
 80014ac:	482f      	ldr	r0, [pc, #188]	; (800156c <MX_RTC_Init+0x144>)
 80014ae:	f008 febf 	bl	800a230 <HAL_RTC_SetTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014b8:	f002 fa4c 	bl	8003954 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <MX_RTC_Init+0x144>)
 80014de:	f008 ff65 	bl	800a3ac <HAL_RTC_SetDate>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80014e8:	f002 fa34 	bl	8003954 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_RTC_Init+0x144>)
 8001524:	f008 ffea 	bl	800a4fc <HAL_RTC_SetAlarm>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800152e:	f002 fa11 	bl	8003954 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2201      	movs	r2, #1
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <MX_RTC_Init+0x144>)
 8001540:	f008 ffdc 	bl	800a4fc <HAL_RTC_SetAlarm>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800154a:	f002 fa03 	bl	8003954 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800154e:	2202      	movs	r2, #2
 8001550:	2100      	movs	r1, #0
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_RTC_Init+0x144>)
 8001554:	f009 f95c 	bl	800a810 <HAL_RTCEx_SetTimeStamp>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800155e:	f002 f9f9 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3748      	adds	r7, #72	; 0x48
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20009e88 	.word	0x20009e88
 8001570:	40002800 	.word	0x40002800

08001574 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_SPI2_Init+0x74>)
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <MX_SPI2_Init+0x78>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_SPI2_Init+0x74>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_SPI2_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI2_Init+0x74>)
 800158e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001592:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_SPI2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015ce:	2208      	movs	r2, #8
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015d4:	f009 f9f1 	bl	800a9ba <HAL_SPI_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015de:	f002 f9b9 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20009ac0 	.word	0x20009ac0
 80015ec:	40003800 	.word	0x40003800

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <MX_TIM1_Init+0xa4>)
 8001612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM1_Init+0xa0>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM1_Init+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163a:	4815      	ldr	r0, [pc, #84]	; (8001690 <MX_TIM1_Init+0xa0>)
 800163c:	f009 fa4f 	bl	800aade <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001646:	f002 f985 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001658:	f009 fd02 	bl	800b060 <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001662:	f002 f977 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001678:	f00a fa36 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001682:	f002 f967 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20009ea8 	.word	0x20009ea8
 8001694:	40010000 	.word	0x40010000

08001698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM2_Init+0x98>)
 80016b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM2_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM2_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM2_Init+0x98>)
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_TIM2_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM2_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_TIM2_Init+0x98>)
 80016e0:	f009 f9fd 	bl	800aade <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ea:	f002 f933 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM2_Init+0x98>)
 80016fc:	f009 fcb0 	bl	800b060 <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001706:	f002 f925 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM2_Init+0x98>)
 8001718:	f00a f9e6 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001722:	f002 f917 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20009fac 	.word	0x20009fac

08001734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <MX_TIM3_Init+0x114>)
 8001778:	4a34      	ldr	r2, [pc, #208]	; (800184c <MX_TIM3_Init+0x118>)
 800177a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <MX_TIM3_Init+0x114>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <MX_TIM3_Init+0x114>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <MX_TIM3_Init+0x114>)
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <MX_TIM3_Init+0x114>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <MX_TIM3_Init+0x114>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800179c:	482a      	ldr	r0, [pc, #168]	; (8001848 <MX_TIM3_Init+0x114>)
 800179e:	f009 f99e 	bl	800aade <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017a8:	f002 f8d4 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	4619      	mov	r1, r3
 80017b8:	4823      	ldr	r0, [pc, #140]	; (8001848 <MX_TIM3_Init+0x114>)
 80017ba:	f009 fc51 	bl	800b060 <HAL_TIM_ConfigClockSource>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017c4:	f002 f8c6 	bl	8003954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c8:	481f      	ldr	r0, [pc, #124]	; (8001848 <MX_TIM3_Init+0x114>)
 80017ca:	f009 f9dd 	bl	800ab88 <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80017d4:	f002 f8be 	bl	8003954 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80017e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4818      	ldr	r0, [pc, #96]	; (8001848 <MX_TIM3_Init+0x114>)
 80017e8:	f009 fcf4 	bl	800b1d4 <HAL_TIM_SlaveConfigSynchro>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80017f2:	f002 f8af 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <MX_TIM3_Init+0x114>)
 8001806:	f00a f96f 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001810:	f002 f8a0 	bl	8003954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_TIM3_Init+0x114>)
 800182c:	f009 fb00 	bl	800ae30 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001836:	f002 f88d 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM3_Init+0x114>)
 800183c:	f004 fa3e 	bl	8005cbc <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3750      	adds	r7, #80	; 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20009c78 	.word	0x20009c78
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <MX_TIM5_Init+0x98>)
 8001872:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_TIM5_Init+0x94>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_TIM5_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001896:	f009 f922 	bl	800aade <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018a0:	f002 f858 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM5_Init+0x94>)
 80018b2:	f009 fbd5 	bl	800b060 <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80018bc:	f002 f84a 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_TIM5_Init+0x94>)
 80018ce:	f00a f90b 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f002 f83c 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20009c38 	.word	0x20009c38
 80018e8:	40000c00 	.word	0x40000c00

080018ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09a      	sub	sp, #104	; 0x68
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	222c      	movs	r2, #44	; 0x2c
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00d fbcf 	bl	800f0ca <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800192e:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <MX_TIM8_Init+0x150>)
 8001930:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001958:	4837      	ldr	r0, [pc, #220]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800195a:	f009 f8c0 	bl	800aade <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001964:	f001 fff6 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800196e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001972:	4619      	mov	r1, r3
 8001974:	4830      	ldr	r0, [pc, #192]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001976:	f009 fb73 	bl	800b060 <HAL_TIM_ConfigClockSource>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001980:	f001 ffe8 	bl	8003954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001984:	482c      	ldr	r0, [pc, #176]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001986:	f009 f8ff 	bl	800ab88 <HAL_TIM_PWM_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001990:	f001 ffe0 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019a4:	4619      	mov	r1, r3
 80019a6:	4824      	ldr	r0, [pc, #144]	; (8001a38 <MX_TIM8_Init+0x14c>)
 80019a8:	f00a f89e 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019b2:	f001 ffcf 	bl	8003954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b6:	2360      	movs	r3, #96	; 0x60
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	220c      	movs	r2, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM8_Init+0x14c>)
 80019d8:	f009 fa2a 	bl	800ae30 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80019e2:	f001 ffb7 	bl	8003954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001a1c:	f00a f8f2 	bl	800bc04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a26:	f001 ff95 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001a2c:	f004 f946 	bl	8005cbc <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20009ba8 	.word	0x20009ba8
 8001a3c:	40010400 	.word	0x40010400

08001a40 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <MX_UART7_Init+0x5c>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a84:	f00a f95a 	bl	800bd3c <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001a8e:	f001 ff61 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20009b24 	.word	0x20009b24
 8001a9c:	40007800 	.word	0x40007800

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <MX_USART1_UART_Init+0x5c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ae4:	f00a f92a 	bl	800bd3c <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aee:	f001 ff31 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20009df0 	.word	0x20009df0
 8001afc:	40011000 	.word	0x40011000

08001b00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <MX_USART6_UART_Init+0x5c>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b44:	f00a f8fa 	bl	800bd3c <HAL_UART_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f001 ff01 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20009ee8 	.word	0x20009ee8
 8001b5c:	40011400 	.word	0x40011400

08001b60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	615a      	str	r2, [r3, #20]
 8001b76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <MX_FMC_Init+0x98>)
 8001b7c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b92:	2210      	movs	r2, #16
 8001b94:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001bdc:	f008 fe6e 	bl	800a8bc <HAL_SDRAM_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001be6:	f001 feb5 	bl	8003954 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20009fec 	.word	0x20009fec
 8001bf8:	a0000140 	.word	0xa0000140

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b090      	sub	sp, #64	; 0x40
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c12:	4bb0      	ldr	r3, [pc, #704]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4aaf      	ldr	r2, [pc, #700]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4bad      	ldr	r3, [pc, #692]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4baa      	ldr	r3, [pc, #680]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4aa9      	ldr	r2, [pc, #676]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4ba7      	ldr	r3, [pc, #668]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4ba4      	ldr	r3, [pc, #656]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4aa3      	ldr	r2, [pc, #652]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4ba1      	ldr	r3, [pc, #644]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c5a:	4b9e      	ldr	r3, [pc, #632]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a9d      	ldr	r2, [pc, #628]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b9b      	ldr	r3, [pc, #620]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c72:	4b98      	ldr	r3, [pc, #608]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a97      	ldr	r2, [pc, #604]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a91      	ldr	r2, [pc, #580]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ca2:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a8b      	ldr	r2, [pc, #556]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cba:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a85      	ldr	r2, [pc, #532]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a7f      	ldr	r2, [pc, #508]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cea:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a79      	ldr	r2, [pc, #484]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	4b74      	ldr	r3, [pc, #464]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a73      	ldr	r2, [pc, #460]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2160      	movs	r1, #96	; 0x60
 8001d1e:	486e      	ldr	r0, [pc, #440]	; (8001ed8 <MX_GPIO_Init+0x2dc>)
 8001d20:	f005 ffba 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2120      	movs	r1, #32
 8001d28:	486c      	ldr	r0, [pc, #432]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001d2a:	f005 ffb5 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2108      	movs	r1, #8
 8001d32:	486a      	ldr	r0, [pc, #424]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001d34:	f005 ffb0 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4868      	ldr	r0, [pc, #416]	; (8001ee0 <MX_GPIO_Init+0x2e4>)
 8001d3e:	f005 ffab 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2108      	movs	r1, #8
 8001d46:	4867      	ldr	r0, [pc, #412]	; (8001ee4 <MX_GPIO_Init+0x2e8>)
 8001d48:	f005 ffa6 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d52:	4863      	ldr	r0, [pc, #396]	; (8001ee0 <MX_GPIO_Init+0x2e4>)
 8001d54:	f005 ffa0 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001d5e:	4862      	ldr	r0, [pc, #392]	; (8001ee8 <MX_GPIO_Init+0x2ec>)
 8001d60:	f005 ff9a 	bl	8007c98 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2108      	movs	r1, #8
 8001d68:	4860      	ldr	r0, [pc, #384]	; (8001eec <MX_GPIO_Init+0x2f0>)
 8001d6a:	f005 ff95 	bl	8007c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d72:	2300      	movs	r3, #0
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4855      	ldr	r0, [pc, #340]	; (8001ed8 <MX_GPIO_Init+0x2dc>)
 8001d82:	f005 fcbd 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001d86:	f643 0323 	movw	r3, #14371	; 0x3823
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4853      	ldr	r0, [pc, #332]	; (8001ef0 <MX_GPIO_Init+0x2f4>)
 8001da4:	f005 fcac 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001da8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <MX_GPIO_Init+0x2f8>)
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	484e      	ldr	r0, [pc, #312]	; (8001ef8 <MX_GPIO_Init+0x2fc>)
 8001dbe:	f005 fc9f 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001dc2:	2360      	movs	r3, #96	; 0x60
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	483f      	ldr	r0, [pc, #252]	; (8001ed8 <MX_GPIO_Init+0x2dc>)
 8001dda:	f005 fc91 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4842      	ldr	r0, [pc, #264]	; (8001efc <MX_GPIO_Init+0x300>)
 8001df4:	f005 fc84 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001df8:	2340      	movs	r3, #64	; 0x40
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <MX_GPIO_Init+0x304>)
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4834      	ldr	r0, [pc, #208]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001e0c:	f005 fc78 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e10:	2328      	movs	r3, #40	; 0x28
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	482d      	ldr	r0, [pc, #180]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001e28:	f005 fc6a 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001e2c:	f241 0308 	movw	r3, #4104	; 0x1008
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	4619      	mov	r1, r3
 8001e44:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <MX_GPIO_Init+0x2e4>)
 8001e46:	f005 fc5b 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4829      	ldr	r0, [pc, #164]	; (8001f04 <MX_GPIO_Init+0x308>)
 8001e60:	f005 fc4e 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e64:	2308      	movs	r3, #8
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <MX_GPIO_Init+0x2e8>)
 8001e7c:	f005 fc40 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e80:	2310      	movs	r3, #16
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e90:	4619      	mov	r1, r3
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001e94:	f005 fc34 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e98:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <MX_GPIO_Init+0x2ec>)
 8001eae:	f005 fc27 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001eb2:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_GPIO_Init+0x2ec>)
 8001ecc:	f005 fc18 	bl	8007700 <HAL_GPIO_Init>
 8001ed0:	e01a      	b.n	8001f08 <MX_GPIO_Init+0x30c>
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40022800 	.word	0x40022800
 8001ee8:	40021c00 	.word	0x40021c00
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	10110000 	.word	0x10110000
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40022400 	.word	0x40022400
 8001f00:	10120000 	.word	0x10120000
 8001f04:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <MX_GPIO_Init+0x3fc>)
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4837      	ldr	r0, [pc, #220]	; (8001ffc <MX_GPIO_Init+0x400>)
 8001f1e:	f005 fbef 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f22:	2310      	movs	r3, #16
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f32:	230a      	movs	r3, #10
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4830      	ldr	r0, [pc, #192]	; (8002000 <MX_GPIO_Init+0x404>)
 8001f3e:	f005 fbdf 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP_joystick_Pin */
  GPIO_InitStruct.Pin = BP_joystick_Pin;
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <MX_GPIO_Init+0x408>)
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BP_joystick_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	482c      	ldr	r0, [pc, #176]	; (8002008 <MX_GPIO_Init+0x40c>)
 8001f56:	f005 fbd3 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f72:	4619      	mov	r1, r3
 8001f74:	4825      	ldr	r0, [pc, #148]	; (800200c <MX_GPIO_Init+0x410>)
 8001f76:	f005 fbc3 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481d      	ldr	r0, [pc, #116]	; (8002008 <MX_GPIO_Init+0x40c>)
 8001f92:	f005 fbb5 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f96:	2304      	movs	r3, #4
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4817      	ldr	r0, [pc, #92]	; (8002008 <MX_GPIO_Init+0x40c>)
 8001faa:	f005 fba9 	bl	8007700 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001fae:	2328      	movs	r3, #40	; 0x28
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4811      	ldr	r0, [pc, #68]	; (8002010 <MX_GPIO_Init+0x414>)
 8001fca:	f005 fb99 	bl	8007700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	2017      	movs	r0, #23
 8001fd4:	f004 fe32 	bl	8006c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fd8:	2017      	movs	r0, #23
 8001fda:	f004 fe4b 	bl	8006c74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	2028      	movs	r0, #40	; 0x28
 8001fe4:	f004 fe2a 	bl	8006c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fe8:	2028      	movs	r0, #40	; 0x28
 8001fea:	f004 fe43 	bl	8006c74 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3740      	adds	r7, #64	; 0x40
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	10120000 	.word	0x10120000
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021c00 	.word	0x40021c00
 8002004:	10110000 	.word	0x10110000
 8002008:	40021800 	.word	0x40021800
 800200c:	40020800 	.word	0x40020800
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_GPIO_EXTI_Callback>:

/*
 * Fonction d'interuption
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
	// PIN_7 : appuie joystick, on passe au menu sélectionné
	if(GPIO_Pin == GPIO_PIN_7) etat = etat_int;
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d104      	bne.n	800202e <HAL_GPIO_EXTI_Callback+0x1a>
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_GPIO_EXTI_Callback+0x44>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_GPIO_EXTI_Callback+0x48>)
 800202a:	701a      	strb	r2, [r3, #0]
	// PIN_8 : appuie bouton 1, on démarre l'enregistrement sur PC
	else if(GPIO_Pin==GPIO_PIN_8) etat = 8;
	// PIN_15 : appuie sur le bouton 2, on clear l'écran de dessin
	else if(GPIO_Pin==GPIO_PIN_15) etat = 7;
}
 800202c:	e00e      	b.n	800204c <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin==GPIO_PIN_8) etat = 8;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002034:	d103      	bne.n	800203e <HAL_GPIO_EXTI_Callback+0x2a>
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_GPIO_EXTI_Callback+0x48>)
 8002038:	2208      	movs	r2, #8
 800203a:	701a      	strb	r2, [r3, #0]
}
 800203c:	e006      	b.n	800204c <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin==GPIO_PIN_15) etat = 7;
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002044:	d102      	bne.n	800204c <HAL_GPIO_EXTI_Callback+0x38>
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_GPIO_EXTI_Callback+0x48>)
 8002048:	2207      	movs	r2, #7
 800204a:	701a      	strb	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	2000139f 	.word	0x2000139f
 800205c:	2000139e 	.word	0x2000139e

08002060 <TestConditionBord>:
/*
test les condition de bord en un point pour ne pas ecrire
hors de l'écran.
*/
char TestConditionBord(uint16_t x, uint16_t y, uint16_t rad)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
 800206a:	460b      	mov	r3, r1
 800206c:	80bb      	strh	r3, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	807b      	strh	r3, [r7, #2]
	char bool = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
	if(((x-rad)>=0) && ((x+rad)<=480-5-taille_menu) && ((y-rad)>=0) && ((y+rad)<246))
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	db11      	blt.n	80020a4 <TestConditionBord+0x44>
 8002080:	88fa      	ldrh	r2, [r7, #6]
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	4413      	add	r3, r2
 8002086:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 800208a:	da0b      	bge.n	80020a4 <TestConditionBord+0x44>
 800208c:	88ba      	ldrh	r2, [r7, #4]
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	db06      	blt.n	80020a4 <TestConditionBord+0x44>
 8002096:	88ba      	ldrh	r2, [r7, #4]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4413      	add	r3, r2
 800209c:	2bf5      	cmp	r3, #245	; 0xf5
 800209e:	dc01      	bgt.n	80020a4 <TestConditionBord+0x44>
	{
		bool = 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
	}
	return bool;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <LCD_PAINTBRUSH>:
/*
 * dessine la forme du pinceau actuel pour la zone de dessin
 */
void LCD_PAINTBRUSH(uint16_t x, uint16_t y,uint16_t rad)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
 80020be:	460b      	mov	r3, r1
 80020c0:	80bb      	strh	r3, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	807b      	strh	r3, [r7, #2]
	uint32_t px_color;
	switch(brush)
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <LCD_PAINTBRUSH+0x160>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d00b      	beq.n	80020e6 <LCD_PAINTBRUSH+0x32>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d011      	beq.n	80020f6 <LCD_PAINTBRUSH+0x42>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d000      	beq.n	80020d8 <LCD_PAINTBRUSH+0x24>
		if ((BSP_LCD_ReadPixel(x, y - 1) == px_color)
				&& TestConditionBord(x, y-1, 0))
			LCD_PAINTBRUSH(x, y - 1, rad);
		break;
	}
}
 80020d6:	e099      	b.n	800220c <LCD_PAINTBRUSH+0x158>
		BSP_LCD_FillCircle(x, y, rad);
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	88b9      	ldrh	r1, [r7, #4]
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fbaa 	bl	8004838 <BSP_LCD_FillCircle>
		break;
 80020e4:	e092      	b.n	800220c <LCD_PAINTBRUSH+0x158>
		BSP_LCD_FillRect(0, 0, 425, 246);
 80020e6:	23f6      	movs	r3, #246	; 0xf6
 80020e8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80020ec:	2100      	movs	r1, #0
 80020ee:	2000      	movs	r0, #0
 80020f0:	f002 fb28 	bl	8004744 <BSP_LCD_FillRect>
		break;
 80020f4:	e08a      	b.n	800220c <LCD_PAINTBRUSH+0x158>
		px_color = BSP_LCD_ReadPixel(x, y);
 80020f6:	88ba      	ldrh	r2, [r7, #4]
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 ff3b 	bl	8003f78 <BSP_LCD_ReadPixel>
 8002102:	60f8      	str	r0, [r7, #12]
		BSP_LCD_DrawPixel(x, y, couleur);
 8002104:	4b44      	ldr	r3, [pc, #272]	; (8002218 <LCD_PAINTBRUSH+0x164>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	88b9      	ldrh	r1, [r7, #4]
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fad1 	bl	80046b4 <BSP_LCD_DrawPixel>
		if ((BSP_LCD_ReadPixel(x + 1, y) == px_color)
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	3301      	adds	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	88ba      	ldrh	r2, [r7, #4]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f001 ff2b 	bl	8003f78 <BSP_LCD_ReadPixel>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4293      	cmp	r3, r2
 8002128:	d112      	bne.n	8002150 <LCD_PAINTBRUSH+0x9c>
				&& TestConditionBord(x + 1, y, 0))
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	3301      	adds	r3, #1
 800212e:	b29b      	uxth	r3, r3
 8002130:	88b9      	ldrh	r1, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff93 	bl	8002060 <TestConditionBord>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <LCD_PAINTBRUSH+0x9c>
			LCD_PAINTBRUSH(x + 1, y, rad);
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	3301      	adds	r3, #1
 8002144:	b29b      	uxth	r3, r3
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	88b9      	ldrh	r1, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ffb2 	bl	80020b4 <LCD_PAINTBRUSH>
		if ((BSP_LCD_ReadPixel(x - 1, y) == px_color)
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	3b01      	subs	r3, #1
 8002154:	b29b      	uxth	r3, r3
 8002156:	88ba      	ldrh	r2, [r7, #4]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f001 ff0c 	bl	8003f78 <BSP_LCD_ReadPixel>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4293      	cmp	r3, r2
 8002166:	d112      	bne.n	800218e <LCD_PAINTBRUSH+0xda>
				&& TestConditionBord(x - 1, y, 0))
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	3b01      	subs	r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	88b9      	ldrh	r1, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff74 	bl	8002060 <TestConditionBord>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <LCD_PAINTBRUSH+0xda>
			LCD_PAINTBRUSH(x - 1, y, rad);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	3b01      	subs	r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	887a      	ldrh	r2, [r7, #2]
 8002186:	88b9      	ldrh	r1, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff93 	bl	80020b4 <LCD_PAINTBRUSH>
		if ((BSP_LCD_ReadPixel(x, y + 1) == px_color)
 800218e:	88bb      	ldrh	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f001 feed 	bl	8003f78 <BSP_LCD_ReadPixel>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d112      	bne.n	80021cc <LCD_PAINTBRUSH+0x118>
				&& TestConditionBord(x, y+1, 0))
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b299      	uxth	r1, r3
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	2200      	movs	r2, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff55 	bl	8002060 <TestConditionBord>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <LCD_PAINTBRUSH+0x118>
			LCD_PAINTBRUSH(x, y + 1, rad);
 80021bc:	88bb      	ldrh	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	b299      	uxth	r1, r3
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff74 	bl	80020b4 <LCD_PAINTBRUSH>
		if ((BSP_LCD_ReadPixel(x, y - 1) == px_color)
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 fece 	bl	8003f78 <BSP_LCD_ReadPixel>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d112      	bne.n	800220a <LCD_PAINTBRUSH+0x156>
				&& TestConditionBord(x, y-1, 0))
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b299      	uxth	r1, r3
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2200      	movs	r2, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff36 	bl	8002060 <TestConditionBord>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <LCD_PAINTBRUSH+0x156>
			LCD_PAINTBRUSH(x, y - 1, rad);
 80021fa:	88bb      	ldrh	r3, [r7, #4]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b299      	uxth	r1, r3
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff55 	bl	80020b4 <LCD_PAINTBRUSH>
		break;
 800220a:	bf00      	nop
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000139d 	.word	0x2000139d
 8002218:	20009e84 	.word	0x20009e84

0800221c <LCD_PAINTBRUSH_SAMPLE>:
/*
 * Dessine la forme du pinceau actuel pour la zone menu (fonction séparé car
 * pour la fonction de remplissage du fond on veut juste afficher un logo).
 */
void LCD_PAINTBRUSH_SAMPLE(uint16_t x, uint16_t y,uint16_t rad)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
 8002226:	460b      	mov	r3, r1
 8002228:	80bb      	strh	r3, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	807b      	strh	r3, [r7, #2]
	uint32_t color;
	switch(brush)
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <LCD_PAINTBRUSH_SAMPLE+0x134>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00b      	beq.n	800224e <LCD_PAINTBRUSH_SAMPLE+0x32>
 8002236:	2b02      	cmp	r3, #2
 8002238:	d03b      	beq.n	80022b2 <LCD_PAINTBRUSH_SAMPLE+0x96>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d000      	beq.n	8002240 <LCD_PAINTBRUSH_SAMPLE+0x24>
				BSP_LCD_DrawPixel(x-15+j, y-15+i, color);
			}
		}
		break;
	}
}
 800223e:	e082      	b.n	8002346 <LCD_PAINTBRUSH_SAMPLE+0x12a>
		BSP_LCD_FillCircle(x, y, rad);
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	88b9      	ldrh	r1, [r7, #4]
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	4618      	mov	r0, r3
 8002248:	f002 faf6 	bl	8004838 <BSP_LCD_FillCircle>
		break;
 800224c:	e07b      	b.n	8002346 <LCD_PAINTBRUSH_SAMPLE+0x12a>
		for(int i=0; i<30;i++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e02a      	b.n	80022aa <LCD_PAINTBRUSH_SAMPLE+0x8e>
			for(int j=0; j<30;j++)
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e021      	b.n	800229e <LCD_PAINTBRUSH_SAMPLE+0x82>
				if(brush_background[i][j]==0) BSP_LCD_DrawPixel(x-15+j, y-15+i, LCD_COLOR_BLACK);
 800225a:	493e      	ldr	r1, [pc, #248]	; (8002354 <LCD_PAINTBRUSH_SAMPLE+0x138>)
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	18ca      	adds	r2, r1, r3
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d112      	bne.n	8002298 <LCD_PAINTBRUSH_SAMPLE+0x7c>
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	b29a      	uxth	r2, r3
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4413      	add	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b0f      	subs	r3, #15
 800227e:	b298      	uxth	r0, r3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	b29a      	uxth	r2, r3
 8002284:	88bb      	ldrh	r3, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b0f      	subs	r3, #15
 800228c:	b29b      	uxth	r3, r3
 800228e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002292:	4619      	mov	r1, r3
 8002294:	f002 fa0e 	bl	80046b4 <BSP_LCD_DrawPixel>
			for(int j=0; j<30;j++)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	3301      	adds	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b1d      	cmp	r3, #29
 80022a2:	ddda      	ble.n	800225a <LCD_PAINTBRUSH_SAMPLE+0x3e>
		for(int i=0; i<30;i++)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3301      	adds	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b1d      	cmp	r3, #29
 80022ae:	ddd1      	ble.n	8002254 <LCD_PAINTBRUSH_SAMPLE+0x38>
		break;
 80022b0:	e049      	b.n	8002346 <LCD_PAINTBRUSH_SAMPLE+0x12a>
		for(int i=0; i<34;i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e042      	b.n	800233e <LCD_PAINTBRUSH_SAMPLE+0x122>
			for(int j=0; j<30;j++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e039      	b.n	8002332 <LCD_PAINTBRUSH_SAMPLE+0x116>
				color = brush_remplir[i][j] | (brush_remplir[i][j]<<8) | (brush_remplir[i][j]<<16) | 0xFF000000;
 80022be:	4926      	ldr	r1, [pc, #152]	; (8002358 <LCD_PAINTBRUSH_SAMPLE+0x13c>)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80022d2:	4821      	ldr	r0, [pc, #132]	; (8002358 <LCD_PAINTBRUSH_SAMPLE+0x13c>)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4319      	orrs	r1, r3
 80022ea:	481b      	ldr	r0, [pc, #108]	; (8002358 <LCD_PAINTBRUSH_SAMPLE+0x13c>)
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	430b      	orrs	r3, r1
 8002302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002306:	60fb      	str	r3, [r7, #12]
				BSP_LCD_DrawPixel(x-15+j, y-15+i, color);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	b29a      	uxth	r2, r3
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	4413      	add	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b0f      	subs	r3, #15
 8002314:	b298      	uxth	r0, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	b29a      	uxth	r2, r3
 800231a:	88bb      	ldrh	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b0f      	subs	r3, #15
 8002322:	b29b      	uxth	r3, r3
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4619      	mov	r1, r3
 8002328:	f002 f9c4 	bl	80046b4 <BSP_LCD_DrawPixel>
			for(int j=0; j<30;j++)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	3301      	adds	r3, #1
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b1d      	cmp	r3, #29
 8002336:	ddc2      	ble.n	80022be <LCD_PAINTBRUSH_SAMPLE+0xa2>
		for(int i=0; i<34;i++)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b21      	cmp	r3, #33	; 0x21
 8002342:	ddb9      	ble.n	80022b8 <LCD_PAINTBRUSH_SAMPLE+0x9c>
		break;
 8002344:	bf00      	nop
}
 8002346:	bf00      	nop
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000139d 	.word	0x2000139d
 8002354:	20001018 	.word	0x20001018
 8002358:	20000028 	.word	0x20000028

0800235c <AfficheTonalite>:
 * pour afficher toutes les tonalité il faudrait 256*6 = 1536 pixels, on prend donc que
 * 64 niveaux de tonalité pour chaque mélange (R+V, V+R, V+B, B+V, B+R, R+B). Soit un total
 * de 64*6 = 384 pixels nécessaire
 */
void AfficheTonalite()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0
	uint32_t RVB = 0x0;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
	BSP_LCD_SelectLayer(1);
 8002366:	2001      	movs	r0, #1
 8002368:	f001 fd94 	bl	8003e94 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f001 fda0 	bl	8003eb4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002374:	2315      	movs	r3, #21
 8002376:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800237a:	21fb      	movs	r1, #251	; 0xfb
 800237c:	2000      	movs	r0, #0
 800237e:	f002 f9e1 	bl	8004744 <BSP_LCD_FillRect>
	//affichage R+V :
	for(uint32_t i = 0;i<256; i = i+4)
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
 8002386:	e022      	b.n	80023ce <AfficheTonalite+0x72>
   {
		RVB = 0xFFFF0000 | (i<<8); //Red à 255, Vert augmente
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	021a      	lsls	r2, r3, #8
 800238c:	4b76      	ldr	r3, [pc, #472]	; (8002568 <AfficheTonalite+0x20c>)
 800238e:	4313      	orrs	r3, r2
 8002390:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002398:	e012      	b.n	80023c0 <AfficheTonalite+0x64>
		{
			BSP_LCD_DrawPixel(50+i/4, 252+j, RVB);
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3332      	adds	r3, #50	; 0x32
 80023a2:	b298      	uxth	r0, r3
 80023a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	33fc      	adds	r3, #252	; 0xfc
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f002 f97f 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80023b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023ba:	3301      	adds	r3, #1
 80023bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80023c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023c4:	2b11      	cmp	r3, #17
 80023c6:	d9e8      	bls.n	800239a <AfficheTonalite+0x3e>
	for(uint32_t i = 0;i<256; i = i+4)
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	3304      	adds	r3, #4
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
 80023ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d0:	2bff      	cmp	r3, #255	; 0xff
 80023d2:	d9d9      	bls.n	8002388 <AfficheTonalite+0x2c>
		}
   }
	//affichage V+R :
	for(uint32_t i = 252;i<253; i = i-4)
 80023d4:	23fc      	movs	r3, #252	; 0xfc
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	e023      	b.n	8002422 <AfficheTonalite+0xc6>
		// i est un uint donc quand i passe en dessus de 0 il est interprèter comme un grand nombre d'où le i<253
   {
		RVB = 0xFF00FF00 | (i<<16); //Vert à 255, Red diminue
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 80023e2:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ea:	e013      	b.n	8002414 <AfficheTonalite+0xb8>
		{
			BSP_LCD_DrawPixel(114+(63-i/4), 252+j, RVB);
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f1c3 03b1 	rsb	r3, r3, #177	; 0xb1
 80023f6:	b298      	uxth	r0, r3
 80023f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	33fc      	adds	r3, #252	; 0xfc
 8002400:	b29b      	uxth	r3, r3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4619      	mov	r1, r3
 8002406:	f002 f955 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 800240a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800240e:	3301      	adds	r3, #1
 8002410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002418:	2b11      	cmp	r3, #17
 800241a:	d9e7      	bls.n	80023ec <AfficheTonalite+0x90>
	for(uint32_t i = 252;i<253; i = i-4)
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	3b04      	subs	r3, #4
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	2bfc      	cmp	r3, #252	; 0xfc
 8002426:	d9d8      	bls.n	80023da <AfficheTonalite+0x7e>
		}
   }
	//affichage V+B :
	for(uint32_t i = 0;i<256; i = i+4)
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	e021      	b.n	8002472 <AfficheTonalite+0x116>
   {
		RVB = 0xFF00FF00 | i; // Vert à 255, Bleu augmente
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 8002434:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800243c:	e012      	b.n	8002464 <AfficheTonalite+0x108>
		{
			BSP_LCD_DrawPixel(178+i/4, 252+j, RVB);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	b29b      	uxth	r3, r3
 8002444:	33b2      	adds	r3, #178	; 0xb2
 8002446:	b298      	uxth	r0, r3
 8002448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800244c:	b29b      	uxth	r3, r3
 800244e:	33fc      	adds	r3, #252	; 0xfc
 8002450:	b29b      	uxth	r3, r3
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4619      	mov	r1, r3
 8002456:	f002 f92d 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 800245a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800245e:	3301      	adds	r3, #1
 8002460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002468:	2b11      	cmp	r3, #17
 800246a:	d9e8      	bls.n	800243e <AfficheTonalite+0xe2>
	for(uint32_t i = 0;i<256; i = i+4)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3304      	adds	r3, #4
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	d9da      	bls.n	800242e <AfficheTonalite+0xd2>
		}
   }
	//affichage B+V :
	for(uint32_t i = 252;i<253; i = i-4)
 8002478:	23fc      	movs	r3, #252	; 0xfc
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	e01f      	b.n	80024be <AfficheTonalite+0x162>
   {
		RVB = 0xFF0000FF | (i<<8); // Bleu à 255, Vert diminue
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	4b3a      	ldr	r3, [pc, #232]	; (800256c <AfficheTonalite+0x210>)
 8002484:	4313      	orrs	r3, r2
 8002486:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002488:	2300      	movs	r3, #0
 800248a:	76fb      	strb	r3, [r7, #27]
 800248c:	e011      	b.n	80024b2 <AfficheTonalite+0x156>
		{
			BSP_LCD_DrawPixel(242+(63-i/4), 252+j, RVB);
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	b29a      	uxth	r2, r3
 8002494:	f240 1331 	movw	r3, #305	; 0x131
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	b298      	uxth	r0, r3
 800249c:	7efb      	ldrb	r3, [r7, #27]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	33fc      	adds	r3, #252	; 0xfc
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4619      	mov	r1, r3
 80024a8:	f002 f904 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80024ac:	7efb      	ldrb	r3, [r7, #27]
 80024ae:	3301      	adds	r3, #1
 80024b0:	76fb      	strb	r3, [r7, #27]
 80024b2:	7efb      	ldrb	r3, [r7, #27]
 80024b4:	2b11      	cmp	r3, #17
 80024b6:	d9ea      	bls.n	800248e <AfficheTonalite+0x132>
	for(uint32_t i = 252;i<253; i = i-4)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	3b04      	subs	r3, #4
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2bfc      	cmp	r3, #252	; 0xfc
 80024c2:	d9dc      	bls.n	800247e <AfficheTonalite+0x122>
		}
   }
	//affichage B+R :
	for(uint32_t i = 0;i<256; i = i+4)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e01e      	b.n	8002508 <AfficheTonalite+0x1ac>
   {
		RVB = 0xFF0000FF | (i<<16);// Bleu à 255, Red augmente
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	4b27      	ldr	r3, [pc, #156]	; (800256c <AfficheTonalite+0x210>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	74fb      	strb	r3, [r7, #19]
 80024d8:	e010      	b.n	80024fc <AfficheTonalite+0x1a0>
		{
			BSP_LCD_DrawPixel(306+i/4, 252+j, RVB);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80024e4:	b298      	uxth	r0, r3
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	33fc      	adds	r3, #252	; 0xfc
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f002 f8df 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	3301      	adds	r3, #1
 80024fa:	74fb      	strb	r3, [r7, #19]
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b11      	cmp	r3, #17
 8002500:	d9eb      	bls.n	80024da <AfficheTonalite+0x17e>
	for(uint32_t i = 0;i<256; i = i+4)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3304      	adds	r3, #4
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2bff      	cmp	r3, #255	; 0xff
 800250c:	d9dd      	bls.n	80024ca <AfficheTonalite+0x16e>
		}
   }
	//affichage R+B :
	for(uint32_t i = 252;i<253; i = i-4)
 800250e:	23fc      	movs	r3, #252	; 0xfc
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e01e      	b.n	8002552 <AfficheTonalite+0x1f6>
   {
		RVB = 0xFFFF0000 | (i);// Red à 255, Bleu diminue
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <AfficheTonalite+0x20c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 800251c:	2300      	movs	r3, #0
 800251e:	72fb      	strb	r3, [r7, #11]
 8002520:	e011      	b.n	8002546 <AfficheTonalite+0x1ea>
		{
			BSP_LCD_DrawPixel(370+(63-i/4), 252+j, RVB);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	b29a      	uxth	r2, r3
 8002528:	f240 13b1 	movw	r3, #433	; 0x1b1
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	b298      	uxth	r0, r3
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	b29b      	uxth	r3, r3
 8002534:	33fc      	adds	r3, #252	; 0xfc
 8002536:	b29b      	uxth	r3, r3
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4619      	mov	r1, r3
 800253c:	f002 f8ba 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	3301      	adds	r3, #1
 8002544:	72fb      	strb	r3, [r7, #11]
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	2b11      	cmp	r3, #17
 800254a:	d9ea      	bls.n	8002522 <AfficheTonalite+0x1c6>
	for(uint32_t i = 252;i<253; i = i-4)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3b04      	subs	r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2bfc      	cmp	r3, #252	; 0xfc
 8002556:	d9dd      	bls.n	8002514 <AfficheTonalite+0x1b8>
		}
   }
	osDelay(200);
 8002558:	20c8      	movs	r0, #200	; 0xc8
 800255a:	f00a fb5a 	bl	800cc12 <osDelay>
}
 800255e:	bf00      	nop
 8002560:	3738      	adds	r7, #56	; 0x38
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	ffff0000 	.word	0xffff0000
 800256c:	ff0000ff 	.word	0xff0000ff

08002570 <AfficheLuminosite>:

/*
 * Affiche le dégradé de luminosité pour que l'utilisateur puisse faire son choix
 */
void AfficheLuminosite(float ton, float sat)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	ed87 0a01 	vstr	s0, [r7, #4]
 800257a:	edc7 0a00 	vstr	s1, [r7]
	float lum;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f001 fc88 	bl	8003e94 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f001 fc94 	bl	8003eb4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 800258c:	2315      	movs	r3, #21
 800258e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002592:	21fb      	movs	r1, #251	; 0xfb
 8002594:	2000      	movs	r0, #0
 8002596:	f002 f8d5 	bl	8004744 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e02e      	b.n	80025fe <AfficheLuminosite+0x8e>
    {
		lum = (float)i/255;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002614 <AfficheLuminosite+0xa4>
 80025ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b2:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 80025b6:	ed97 1a03 	vldr	s2, [r7, #12]
 80025ba:	edd7 0a00 	vldr	s1, [r7]
 80025be:	ed97 0a01 	vldr	s0, [r7, #4]
 80025c2:	f000 f87d 	bl	80026c0 <FindCouleur>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025cc:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	74fb      	strb	r3, [r7, #19]
 80025d2:	e00e      	b.n	80025f2 <AfficheLuminosite+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3364      	adds	r3, #100	; 0x64
 80025da:	b298      	uxth	r0, r3
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	33fc      	adds	r3, #252	; 0xfc
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4619      	mov	r1, r3
 80025e8:	f002 f864 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	3301      	adds	r3, #1
 80025f0:	74fb      	strb	r3, [r7, #19]
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b11      	cmp	r3, #17
 80025f6:	d9ed      	bls.n	80025d4 <AfficheLuminosite+0x64>
	for(uint32_t i = 0;i<256;i++)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2bff      	cmp	r3, #255	; 0xff
 8002602:	d9cd      	bls.n	80025a0 <AfficheLuminosite+0x30>
		}
    }
	osDelay(200);
 8002604:	20c8      	movs	r0, #200	; 0xc8
 8002606:	f00a fb04 	bl	800cc12 <osDelay>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	437f0000 	.word	0x437f0000

08002618 <AfficheSaturation>:

/*
 * Affiche le dégradé de saturation pour que l'utilisateur puisse faire son choix
 */
void AfficheSaturation(float ton, float lum)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002622:	edc7 0a00 	vstr	s1, [r7]
	float sat;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f001 fc34 	bl	8003e94 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f001 fc40 	bl	8003eb4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002634:	2315      	movs	r3, #21
 8002636:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800263a:	21fb      	movs	r1, #251	; 0xfb
 800263c:	2000      	movs	r0, #0
 800263e:	f002 f881 	bl	8004744 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e02e      	b.n	80026a6 <AfficheSaturation+0x8e>
    {
		sat = (float)i/255;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002652:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80026bc <AfficheSaturation+0xa4>
 8002656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265a:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 800265e:	ed97 1a00 	vldr	s2, [r7]
 8002662:	edd7 0a03 	vldr	s1, [r7, #12]
 8002666:	ed97 0a01 	vldr	s0, [r7, #4]
 800266a:	f000 f829 	bl	80026c0 <FindCouleur>
 800266e:	4603      	mov	r3, r0
 8002670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002674:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 8002676:	2300      	movs	r3, #0
 8002678:	74fb      	strb	r3, [r7, #19]
 800267a:	e00e      	b.n	800269a <AfficheSaturation+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	b29b      	uxth	r3, r3
 8002680:	3364      	adds	r3, #100	; 0x64
 8002682:	b298      	uxth	r0, r3
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	b29b      	uxth	r3, r3
 8002688:	33fc      	adds	r3, #252	; 0xfc
 800268a:	b29b      	uxth	r3, r3
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4619      	mov	r1, r3
 8002690:	f002 f810 	bl	80046b4 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	3301      	adds	r3, #1
 8002698:	74fb      	strb	r3, [r7, #19]
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b11      	cmp	r3, #17
 800269e:	d9ed      	bls.n	800267c <AfficheSaturation+0x64>
	for(uint32_t i = 0;i<256;i++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2bff      	cmp	r3, #255	; 0xff
 80026aa:	d9cd      	bls.n	8002648 <AfficheSaturation+0x30>
		}
    }
	osDelay(200);
 80026ac:	20c8      	movs	r0, #200	; 0xc8
 80026ae:	f00a fab0 	bl	800cc12 <osDelay>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	437f0000 	.word	0x437f0000

080026c0 <FindCouleur>:
/*
 * trouve la couleur RVB à partir de la couleur TSL:
 * renvoi un entier de la forme RGB-888 : 0xRRVVBB
 */
uint32_t FindCouleur(float ton, float sat, float lum)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80026ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80026ce:	ed87 1a01 	vstr	s2, [r7, #4]
	char Red, Green, Blue;
	uint32_t color = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 0;
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 0;
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 0;
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float C;
	float m;
	float T_prime;
	float X;
	C = lum*sat;
 80026e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80026ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	m = lum-C;
 80026f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80026fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc7 7a08 	vstr	s15, [r7, #32]
	T_prime = ton/60;
 8002708:	ed97 7a03 	vldr	s14, [r7, #12]
 800270c:	eddf 6a61 	vldr	s13, [pc, #388]	; 8002894 <FindCouleur+0x1d4>
 8002710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002714:	edc7 7a07 	vstr	s15, [r7, #28]
	X = C*(1-absolu((modulo(T_prime, 2))-1));
 8002718:	2002      	movs	r0, #2
 800271a:	ed97 0a07 	vldr	s0, [r7, #28]
 800271e:	f000 f917 	bl	8002950 <modulo>
 8002722:	eeb0 7a40 	vmov.f32	s14, s0
 8002726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f000 f92f 	bl	8002994 <absolu>
 8002736:	eeb0 7a40 	vmov.f32	s14, s0
 800273a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800273e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002742:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	edc7 7a06 	vstr	s15, [r7, #24]
	if((T_prime>=0) && (T_prime<1))
 800274e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	db0d      	blt.n	8002778 <FindCouleur+0xb8>
 800275c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	d504      	bpl.n	8002778 <FindCouleur+0xb8>
	{
		R = C;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
		V = X;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
 8002776:	e044      	b.n	8002802 <FindCouleur+0x142>
	}
	else if(T_prime<2)
 8002778:	edd7 7a07 	vldr	s15, [r7, #28]
 800277c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	d504      	bpl.n	8002794 <FindCouleur+0xd4>
	{
		R = X;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
		V = C;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	e036      	b.n	8002802 <FindCouleur+0x142>
	}
	else if(T_prime<3)
 8002794:	edd7 7a07 	vldr	s15, [r7, #28]
 8002798:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d504      	bpl.n	80027b0 <FindCouleur+0xf0>
	{
		B = X;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = C;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
 80027ae:	e028      	b.n	8002802 <FindCouleur+0x142>
	}
	else if(T_prime<4)
 80027b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80027b4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80027b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	d504      	bpl.n	80027cc <FindCouleur+0x10c>
	{
		B = C;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = X;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	e01a      	b.n	8002802 <FindCouleur+0x142>
	}
	else if(T_prime<5)
 80027cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80027d0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80027d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	d504      	bpl.n	80027e8 <FindCouleur+0x128>
	{
		B = C;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		R = X;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
 80027e6:	e00c      	b.n	8002802 <FindCouleur+0x142>
	}
	else if(T_prime<6)
 80027e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80027ec:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80027f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d503      	bpl.n	8002802 <FindCouleur+0x142>
	{
		R = C;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
		B = X;
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	R = (R+m)*255;
 8002802:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002806:	edd7 7a08 	vldr	s15, [r7, #32]
 800280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002898 <FindCouleur+0x1d8>
 8002812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002816:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	V = (V+m)*255;
 800281a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800281e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002898 <FindCouleur+0x1d8>
 800282a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	B = (B+m)*255;
 8002832:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002836:	edd7 7a08 	vldr	s15, [r7, #32]
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002898 <FindCouleur+0x1d8>
 8002842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002846:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Red = (int)R;
 800284a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800284e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002852:	edc7 7a00 	vstr	s15, [r7]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	75fb      	strb	r3, [r7, #23]
	Green = (int)V;
 800285a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800285e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002862:	edc7 7a00 	vstr	s15, [r7]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	75bb      	strb	r3, [r7, #22]
	Blue = (int)B;
 800286a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800286e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002872:	edc7 7a00 	vstr	s15, [r7]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	757b      	strb	r3, [r7, #21]
	color = (Red<<16)+(Green<<8)+Blue;
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	7dbb      	ldrb	r3, [r7, #22]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	441a      	add	r2, r3
 8002884:	7d7b      	ldrb	r3, [r7, #21]
 8002886:	4413      	add	r3, r2
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
	return color;
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800288c:	4618      	mov	r0, r3
 800288e:	3738      	adds	r7, #56	; 0x38
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	42700000 	.word	0x42700000
 8002898:	437f0000 	.word	0x437f0000

0800289c <FindTonalite>:
/*
 * Renvoi la tonalité entre 0° et 360° à partir de la position du doigt sur la barre
 */
float FindTonalite(uint16_t pos)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
	float ton;
	ton = (float)pos;
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b0:	edc7 7a03 	vstr	s15, [r7, #12]
	ton = (ton/383)*360;
 80028b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028b8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80028e0 <FindTonalite+0x44>
 80028bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028e4 <FindTonalite+0x48>
 80028c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c8:	edc7 7a03 	vstr	s15, [r7, #12]
	return ton;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	ee07 3a90 	vmov	s15, r3
}
 80028d2:	eeb0 0a67 	vmov.f32	s0, s15
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	43bf8000 	.word	0x43bf8000
 80028e4:	43b40000 	.word	0x43b40000

080028e8 <FindLuminosite>:

/*
 * Renvoi la Luminosité entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindLuminosite(uint16_t pos)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
	return (float) pos/255;
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002918 <FindLuminosite+0x30>
 8002900:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002904:	eef0 7a66 	vmov.f32	s15, s13
}
 8002908:	eeb0 0a67 	vmov.f32	s0, s15
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	437f0000 	.word	0x437f0000

0800291c <FindSaturation>:

/*
 * Renvoi la Saturation entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindSaturation(uint16_t pos)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
	return (float)pos/255;
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800294c <FindSaturation+0x30>
 8002934:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002938:	eef0 7a66 	vmov.f32	s15, s13
}
 800293c:	eeb0 0a67 	vmov.f32	s0, s15
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	437f0000 	.word	0x437f0000

08002950 <modulo>:

float modulo(float val, char mod)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	ed87 0a01 	vstr	s0, [r7, #4]
 800295a:	4603      	mov	r3, r0
 800295c:	70fb      	strb	r3, [r7, #3]
	uint32_t q;
	q = (int) val/mod;
 800295e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002966:	ee17 2a90 	vmov	r2, s15
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002970:	60fb      	str	r3, [r7, #12]
	return(val - 2*q);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002982:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <absolu>:

float absolu(float val)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(val<0) return -val;
 800299e:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d504      	bpl.n	80029b6 <absolu+0x22>
 80029ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b0:	eef1 7a67 	vneg.f32	s15, s15
 80029b4:	e001      	b.n	80029ba <absolu+0x26>
	else return val;
 80029b6:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80029d0:	2001      	movs	r0, #1
 80029d2:	f00a f91e 	bl	800cc12 <osDelay>
 80029d6:	e7fb      	b.n	80029d0 <StartDefaultTask+0x8>

080029d8 <StartMode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMode */
void StartMode(void const * argument)
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b0c8      	sub	sp, #288	; 0x120
 80029dc:	af00      	add	r7, sp, #0
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartMode */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 80029e2:	f00b fa05 	bl	800ddf0 <xTaskGetTickCount>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  static TS_StateTypeDef  TS_State;
  char radius_prec; //rayon précédent pour supprimer le curseur dans la sélection
  char sous_menu = 0; // permet de savoir si on est dans un sous menu
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  char menu_couleur = 0; // permet de savoir si on est dans un des sous_menu couleur (tonalité, saturation, luminosité)
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  //valeur TSL pour la couleur
  float ton = 180.0;
 80029f8:	4ba8      	ldr	r3, [pc, #672]	; (8002c9c <StartMode+0x2c4>)
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  float lum = 0.5;
 80029fe:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002a02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  float sat = 0.5;
 8002a06:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002a0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  char text[] = "   Layer   |   Pinceau   | Transparence |   Couleur   |    Taille   ";
 8002a0e:	4aa4      	ldr	r2, [pc, #656]	; (8002ca0 <StartMode+0x2c8>)
 8002a10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a14:	4611      	mov	r1, r2
 8002a16:	2245      	movs	r2, #69	; 0x45
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00c fb4b 	bl	800f0b4 <memcpy>
  char text_layer[] = "Calque 1        |        Calque 2";
 8002a1e:	4ba1      	ldr	r3, [pc, #644]	; (8002ca4 <StartMode+0x2cc>)
 8002a20:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002a24:	461d      	mov	r5, r3
 8002a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2e:	682b      	ldr	r3, [r5, #0]
 8002a30:	8023      	strh	r3, [r4, #0]
  char text_alpha[] = "Choisir la transparence : ";
 8002a32:	4b9d      	ldr	r3, [pc, #628]	; (8002ca8 <StartMode+0x2d0>)
 8002a34:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002a38:	461d      	mov	r5, r3
 8002a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a42:	c403      	stmia	r4!, {r0, r1}
 8002a44:	8022      	strh	r2, [r4, #0]
 8002a46:	3402      	adds	r4, #2
 8002a48:	0c13      	lsrs	r3, r2, #16
 8002a4a:	7023      	strb	r3, [r4, #0]
  char text_couleur[] = "Tonalite  |    Saturation    | Luminosite";
 8002a4c:	4b97      	ldr	r3, [pc, #604]	; (8002cac <StartMode+0x2d4>)
 8002a4e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002a52:	461d      	mov	r5, r3
 8002a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a60:	c403      	stmia	r4!, {r0, r1}
 8002a62:	8022      	strh	r2, [r4, #0]
  couleur = FindCouleur(180,0.5,0.5)|0xFF000000;
 8002a64:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002a68:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002a6c:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8002cb0 <StartMode+0x2d8>
 8002a70:	f7ff fe26 	bl	80026c0 <FindCouleur>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7a:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <StartMode+0x2dc>)
 8002a7c:	6013      	str	r3, [r2, #0]
  char text_taille[] = "Taille du pinceau :   px";
 8002a7e:	4b8e      	ldr	r3, [pc, #568]	; (8002cb8 <StartMode+0x2e0>)
 8002a80:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002a84:	461d      	mov	r5, r3
 8002a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a8e:	c403      	stmia	r4!, {r0, r1}
 8002a90:	7022      	strb	r2, [r4, #0]
  char text_brush[] = " <<<<            Valider            >>>>";
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	4a89      	ldr	r2, [pc, #548]	; (8002cbc <StartMode+0x2e4>)
 8002a98:	461c      	mov	r4, r3
 8002a9a:	4615      	mov	r5, r2
 8002a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aa8:	c403      	stmia	r4!, {r0, r1}
 8002aaa:	7022      	strb	r2, [r4, #0]
  for(;;)
  {
	  switch(etat)
 8002aac:	4b84      	ldr	r3, [pc, #528]	; (8002cc0 <StartMode+0x2e8>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	f200 85d9 	bhi.w	8003668 <StartMode+0xc90>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <StartMode+0xe4>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08003669 	.word	0x08003669
 8002ac0:	08002ae1 	.word	0x08002ae1
 8002ac4:	08002bd3 	.word	0x08002bd3
 8002ac8:	08002cdd 	.word	0x08002cdd
 8002acc:	08002ec1 	.word	0x08002ec1
 8002ad0:	08003043 	.word	0x08003043
 8002ad4:	08003425 	.word	0x08003425
 8002ad8:	080035e9 	.word	0x080035e9
 8002adc:	0800364f 	.word	0x0800364f
		  break;
	  /*
	   * etat d'affichage du menu
	   */
	  case 1 :
		  if(myMutexLCDHandle != NULL)
 8002ae0:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <StartMode+0x2ec>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d06f      	beq.n	8002bc8 <StartMode+0x1f0>
		  {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002ae8:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <StartMode+0x2ec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a fc06 	bl	800d300 <xQueueSemaphoreTake>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d166      	bne.n	8002bc8 <StartMode+0x1f0>
			   {
				   BSP_LCD_SelectLayer(1);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f001 f9ca 	bl	8003e94 <BSP_LCD_SelectLayer>
				   BSP_LCD_SetFont(&Font12);
 8002b00:	4871      	ldr	r0, [pc, #452]	; (8002cc8 <StartMode+0x2f0>)
 8002b02:	f001 fa09 	bl	8003f18 <BSP_LCD_SetFont>
				   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b06:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0a:	f001 f9d3 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(0, 251, 480, 21);
 8002b0e:	2315      	movs	r3, #21
 8002b10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b14:	21fb      	movs	r1, #251	; 0xfb
 8002b16:	2000      	movs	r0, #0
 8002b18:	f001 fe14 	bl	8004744 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002b1c:	486b      	ldr	r0, [pc, #428]	; (8002ccc <StartMode+0x2f4>)
 8002b1e:	f001 f9c9 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text, CENTER_MODE);
 8002b22:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002b26:	2301      	movs	r3, #1
 8002b28:	21fc      	movs	r1, #252	; 0xfc
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f001 fb36 	bl	800419c <BSP_LCD_DisplayStringAt>
				   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002b30:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002b34:	f001 f9be 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002b38:	2214      	movs	r2, #20
 8002b3a:	214b      	movs	r1, #75	; 0x4b
 8002b3c:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002b40:	f7ff fb6c 	bl	800221c <LCD_PAINTBRUSH_SAMPLE>
				   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 8002b44:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8002b48:	f001 f9b4 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8002b4c:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <StartMode+0x2f8>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	00d2      	lsls	r2, r2, #3
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	00d2      	lsls	r2, r2, #3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3baa      	subs	r3, #170	; 0xaa
 8002b64:	b298      	uxth	r0, r3
 8002b66:	2305      	movs	r3, #5
 8002b68:	2223      	movs	r2, #35	; 0x23
 8002b6a:	f240 1109 	movw	r1, #265	; 0x109
 8002b6e:	f001 fde9 	bl	8004744 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8002b72:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <StartMode+0x2dc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 f99a 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8002b80:	2214      	movs	r2, #20
 8002b82:	2119      	movs	r1, #25
 8002b84:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002b88:	f001 fe56 	bl	8004838 <BSP_LCD_FillCircle>
				   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <StartMode+0x2dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f98d 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 8002b9a:	2214      	movs	r2, #20
 8002b9c:	217d      	movs	r1, #125	; 0x7d
 8002b9e:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002ba2:	f001 fe49 	bl	8004838 <BSP_LCD_FillCircle>
				   BSP_LCD_SelectLayer(layer);
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <StartMode+0x2fc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 f972 	bl	8003e94 <BSP_LCD_SelectLayer>
				   BSP_LCD_SetTextColor(couleur);
 8002bb0:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <StartMode+0x2dc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f97d 	bl	8003eb4 <BSP_LCD_SetTextColor>
				   xSemaphoreGive(myMutexLCDHandle);
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <StartMode+0x2ec>)
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f00a fa9a 	bl	800d0fc <xQueueGenericSend>
			   }
		   }
		  etat = 0;
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <StartMode+0x2e8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
		  break;
 8002bce:	f000 bd4b 	b.w	8003668 <StartMode+0xc90>
	  /*
	   * etat de sélection du calque
	   */
	  case 2 :
		  if(sous_menu == 0)
 8002bd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12e      	bne.n	8002c38 <StartMode+0x260>
		  {
			  if(myMutexLCDHandle != NULL)
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <StartMode+0x2ec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02a      	beq.n	8002c38 <StartMode+0x260>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <StartMode+0x2ec>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00a fb89 	bl	800d300 <xQueueSemaphoreTake>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d121      	bne.n	8002c38 <StartMode+0x260>
				   {
					   BSP_LCD_SelectLayer(1);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f001 f94d 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 8002bfa:	4833      	ldr	r0, [pc, #204]	; (8002cc8 <StartMode+0x2f0>)
 8002bfc:	f001 f98c 	bl	8003f18 <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f001 f956 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002c08:	2315      	movs	r3, #21
 8002c0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c0e:	21fb      	movs	r1, #251	; 0xfb
 8002c10:	2000      	movs	r0, #0
 8002c12:	f001 fd97 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002c16:	482d      	ldr	r0, [pc, #180]	; (8002ccc <StartMode+0x2f4>)
 8002c18:	f001 f94c 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_layer, CENTER_MODE);
 8002c1c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002c20:	2301      	movs	r3, #1
 8002c22:	21fc      	movs	r1, #252	; 0xfc
 8002c24:	2000      	movs	r0, #0
 8002c26:	f001 fab9 	bl	800419c <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <StartMode+0x2ec>)
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	f00a fa62 	bl	800d0fc <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  BSP_TS_GetState(&TS_State);
 8002c3e:	4826      	ldr	r0, [pc, #152]	; (8002cd8 <StartMode+0x300>)
 8002c40:	f002 faa8 	bl	8005194 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <StartMode+0x300>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01c      	beq.n	8002c86 <StartMode+0x2ae>
		  {
			  if((TS_State.touchX[0]<240) && TS_State.touchY[0] > 272-haut_menu)
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <StartMode+0x300>)
 8002c4e:	885b      	ldrh	r3, [r3, #2]
 8002c50:	2bef      	cmp	r3, #239	; 0xef
 8002c52:	d80a      	bhi.n	8002c6a <StartMode+0x292>
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <StartMode+0x300>)
 8002c56:	899b      	ldrh	r3, [r3, #12]
 8002c58:	2bf0      	cmp	r3, #240	; 0xf0
 8002c5a:	d906      	bls.n	8002c6a <StartMode+0x292>
			  {
				  layer = 0;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <StartMode+0x2fc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
				  sous_menu = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002c68:	e00d      	b.n	8002c86 <StartMode+0x2ae>
			  }
			  else if((TS_State.touchX[0]>240) && TS_State.touchY[0] > 272-haut_menu)
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <StartMode+0x300>)
 8002c6c:	885b      	ldrh	r3, [r3, #2]
 8002c6e:	2bf0      	cmp	r3, #240	; 0xf0
 8002c70:	d909      	bls.n	8002c86 <StartMode+0x2ae>
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <StartMode+0x300>)
 8002c74:	899b      	ldrh	r3, [r3, #12]
 8002c76:	2bf0      	cmp	r3, #240	; 0xf0
 8002c78:	d905      	bls.n	8002c86 <StartMode+0x2ae>
			  {
				  layer = 1;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <StartMode+0x2fc>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
				  sous_menu = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002c86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 84e3 	bne.w	8003656 <StartMode+0xc7e>
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <StartMode+0x2e8>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
		  break;
 8002c96:	f000 bcde 	b.w	8003656 <StartMode+0xc7e>
 8002c9a:	bf00      	nop
 8002c9c:	43340000 	.word	0x43340000
 8002ca0:	0800f9c0 	.word	0x0800f9c0
 8002ca4:	0800fa08 	.word	0x0800fa08
 8002ca8:	0800fa2c 	.word	0x0800fa2c
 8002cac:	0800fa48 	.word	0x0800fa48
 8002cb0:	43340000 	.word	0x43340000
 8002cb4:	20009e84 	.word	0x20009e84
 8002cb8:	0800fa74 	.word	0x0800fa74
 8002cbc:	0800fa90 	.word	0x0800fa90
 8002cc0:	2000139e 	.word	0x2000139e
 8002cc4:	20009c34 	.word	0x20009c34
 8002cc8:	200013a8 	.word	0x200013a8
 8002ccc:	ffff0000 	.word	0xffff0000
 8002cd0:	2000139f 	.word	0x2000139f
 8002cd4:	200016a2 	.word	0x200016a2
 8002cd8:	200016d0 	.word	0x200016d0
	  /*
	   * etat de sélection du pinceau
	   */
	  case 3 :
		  if(sous_menu == 0)
 8002cdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d12e      	bne.n	8002d42 <StartMode+0x36a>
		  {
			  if(myMutexLCDHandle != NULL)
 8002ce4:	4ba7      	ldr	r3, [pc, #668]	; (8002f84 <StartMode+0x5ac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02a      	beq.n	8002d42 <StartMode+0x36a>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002cec:	4ba5      	ldr	r3, [pc, #660]	; (8002f84 <StartMode+0x5ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f00a fb04 	bl	800d300 <xQueueSemaphoreTake>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d121      	bne.n	8002d42 <StartMode+0x36a>
				   {
					   BSP_LCD_SelectLayer(1);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f001 f8c8 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 8002d04:	48a0      	ldr	r0, [pc, #640]	; (8002f88 <StartMode+0x5b0>)
 8002d06:	f001 f907 	bl	8003f18 <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0e:	f001 f8d1 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002d12:	2315      	movs	r3, #21
 8002d14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d18:	21fb      	movs	r1, #251	; 0xfb
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f001 fd12 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002d20:	489a      	ldr	r0, [pc, #616]	; (8002f8c <StartMode+0x5b4>)
 8002d22:	f001 f8c7 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_brush, CENTER_MODE);
 8002d26:	f107 0208 	add.w	r2, r7, #8
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	21fc      	movs	r1, #252	; 0xfc
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f001 fa34 	bl	800419c <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002d34:	4b93      	ldr	r3, [pc, #588]	; (8002f84 <StartMode+0x5ac>)
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f00a f9dd 	bl	800d0fc <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  BSP_TS_GetState(&TS_State);
 8002d48:	4891      	ldr	r0, [pc, #580]	; (8002f90 <StartMode+0x5b8>)
 8002d4a:	f002 fa23 	bl	8005194 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002d4e:	4b90      	ldr	r3, [pc, #576]	; (8002f90 <StartMode+0x5b8>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80ab 	beq.w	8002eae <StartMode+0x4d6>
		  {
			  if((TS_State.touchX[0]<190) && TS_State.touchY[0] > 272-haut_menu)
 8002d58:	4b8d      	ldr	r3, [pc, #564]	; (8002f90 <StartMode+0x5b8>)
 8002d5a:	885b      	ldrh	r3, [r3, #2]
 8002d5c:	2bbd      	cmp	r3, #189	; 0xbd
 8002d5e:	d848      	bhi.n	8002df2 <StartMode+0x41a>
 8002d60:	4b8b      	ldr	r3, [pc, #556]	; (8002f90 <StartMode+0x5b8>)
 8002d62:	899b      	ldrh	r3, [r3, #12]
 8002d64:	2bf0      	cmp	r3, #240	; 0xf0
 8002d66:	d944      	bls.n	8002df2 <StartMode+0x41a>
			  {
				  if(brush==0) brush = max_brush;
 8002d68:	4b8a      	ldr	r3, [pc, #552]	; (8002f94 <StartMode+0x5bc>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <StartMode+0x3a0>
 8002d70:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <StartMode+0x5bc>)
 8002d72:	2202      	movs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e005      	b.n	8002d84 <StartMode+0x3ac>
				  else brush -= 1;
 8002d78:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <StartMode+0x5bc>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <StartMode+0x5bc>)
 8002d82:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 8002d84:	4b7f      	ldr	r3, [pc, #508]	; (8002f84 <StartMode+0x5ac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02d      	beq.n	8002de8 <StartMode+0x410>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002d8c:	4b7d      	ldr	r3, [pc, #500]	; (8002f84 <StartMode+0x5ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f00a fab4 	bl	800d300 <xQueueSemaphoreTake>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d124      	bne.n	8002de8 <StartMode+0x410>
					   {
						  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002da2:	f001 f887 	bl	8003eb4 <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(480-taille_menu , taille_menu, taille_menu-1, taille_menu);
 8002da6:	2332      	movs	r3, #50	; 0x32
 8002da8:	2231      	movs	r2, #49	; 0x31
 8002daa:	2132      	movs	r1, #50	; 0x32
 8002dac:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002db0:	f001 fcc8 	bl	8004744 <BSP_LCD_FillRect>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002db4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002db8:	f001 f87c 	bl	8003eb4 <BSP_LCD_SetTextColor>
						  LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002dbc:	2214      	movs	r2, #20
 8002dbe:	214b      	movs	r1, #75	; 0x4b
 8002dc0:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002dc4:	f7ff fa2a 	bl	800221c <LCD_PAINTBRUSH_SAMPLE>
						  BSP_LCD_SetTextColor(couleur);
 8002dc8:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <StartMode+0x5c0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f871 	bl	8003eb4 <BSP_LCD_SetTextColor>
						  xSemaphoreGive(myMutexLCDHandle);
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <StartMode+0x5ac>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f00a f98e 	bl	800d0fc <xQueueGenericSend>
					   }
				  }
				  while(TS_State.touchDetected) BSP_TS_GetState(&TS_State);;
 8002de0:	e002      	b.n	8002de8 <StartMode+0x410>
 8002de2:	486b      	ldr	r0, [pc, #428]	; (8002f90 <StartMode+0x5b8>)
 8002de4:	f002 f9d6 	bl	8005194 <BSP_TS_GetState>
 8002de8:	4b69      	ldr	r3, [pc, #420]	; (8002f90 <StartMode+0x5b8>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f8      	bne.n	8002de2 <StartMode+0x40a>
			  if((TS_State.touchX[0]<190) && TS_State.touchY[0] > 272-haut_menu)
 8002df0:	e05d      	b.n	8002eae <StartMode+0x4d6>
			  }
			  else if((TS_State.touchX[0]>290) && TS_State.touchY[0] > 272-haut_menu)
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <StartMode+0x5b8>)
 8002df4:	885b      	ldrh	r3, [r3, #2]
 8002df6:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002dfa:	d948      	bls.n	8002e8e <StartMode+0x4b6>
 8002dfc:	4b64      	ldr	r3, [pc, #400]	; (8002f90 <StartMode+0x5b8>)
 8002dfe:	899b      	ldrh	r3, [r3, #12]
 8002e00:	2bf0      	cmp	r3, #240	; 0xf0
 8002e02:	d944      	bls.n	8002e8e <StartMode+0x4b6>
			  {
				  if(brush==max_brush) brush = 0;
 8002e04:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <StartMode+0x5bc>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d103      	bne.n	8002e14 <StartMode+0x43c>
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <StartMode+0x5bc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e005      	b.n	8002e20 <StartMode+0x448>
				  else brush += 1;
 8002e14:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <StartMode+0x5bc>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <StartMode+0x5bc>)
 8002e1e:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 8002e20:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <StartMode+0x5ac>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02d      	beq.n	8002e84 <StartMode+0x4ac>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002e28:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <StartMode+0x5ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f00a fa66 	bl	800d300 <xQueueSemaphoreTake>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d124      	bne.n	8002e84 <StartMode+0x4ac>
					   {
						  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3e:	f001 f839 	bl	8003eb4 <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(480-taille_menu , taille_menu, taille_menu-1, taille_menu);
 8002e42:	2332      	movs	r3, #50	; 0x32
 8002e44:	2231      	movs	r2, #49	; 0x31
 8002e46:	2132      	movs	r1, #50	; 0x32
 8002e48:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002e4c:	f001 fc7a 	bl	8004744 <BSP_LCD_FillRect>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002e50:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002e54:	f001 f82e 	bl	8003eb4 <BSP_LCD_SetTextColor>
						  LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002e58:	2214      	movs	r2, #20
 8002e5a:	214b      	movs	r1, #75	; 0x4b
 8002e5c:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002e60:	f7ff f9dc 	bl	800221c <LCD_PAINTBRUSH_SAMPLE>
						  BSP_LCD_SetTextColor(couleur);
 8002e64:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <StartMode+0x5c0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 f823 	bl	8003eb4 <BSP_LCD_SetTextColor>
						  xSemaphoreGive(myMutexLCDHandle);
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <StartMode+0x5ac>)
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	f00a f940 	bl	800d0fc <xQueueGenericSend>
					   }
				  }
				  while(TS_State.touchDetected) BSP_TS_GetState(&TS_State);;
 8002e7c:	e002      	b.n	8002e84 <StartMode+0x4ac>
 8002e7e:	4844      	ldr	r0, [pc, #272]	; (8002f90 <StartMode+0x5b8>)
 8002e80:	f002 f988 	bl	8005194 <BSP_TS_GetState>
 8002e84:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <StartMode+0x5b8>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f8      	bne.n	8002e7e <StartMode+0x4a6>
			  else if((TS_State.touchX[0]>290) && TS_State.touchY[0] > 272-haut_menu)
 8002e8c:	e00f      	b.n	8002eae <StartMode+0x4d6>
			  }
			  else if((TS_State.touchX[0]>190) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]<290))
 8002e8e:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <StartMode+0x5b8>)
 8002e90:	885b      	ldrh	r3, [r3, #2]
 8002e92:	2bbe      	cmp	r3, #190	; 0xbe
 8002e94:	d90b      	bls.n	8002eae <StartMode+0x4d6>
 8002e96:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <StartMode+0x5b8>)
 8002e98:	899b      	ldrh	r3, [r3, #12]
 8002e9a:	2bf0      	cmp	r3, #240	; 0xf0
 8002e9c:	d907      	bls.n	8002eae <StartMode+0x4d6>
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <StartMode+0x5b8>)
 8002ea0:	885b      	ldrh	r3, [r3, #2]
 8002ea2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002ea6:	d202      	bcs.n	8002eae <StartMode+0x4d6>
			  {
				  sous_menu = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002eae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 83d1 	bne.w	800365a <StartMode+0xc82>
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <StartMode+0x5c4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
		  break;
 8002ebe:	e3cc      	b.n	800365a <StartMode+0xc82>
	  /*
	   * etat de sélection de la transparence
	   */
	  case 4 :
		  if(sous_menu == 0)
 8002ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d156      	bne.n	8002f76 <StartMode+0x59e>
		  {
			  if(myMutexLCDHandle != NULL)
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <StartMode+0x5ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d052      	beq.n	8002f76 <StartMode+0x59e>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <StartMode+0x5ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f00a fa11 	bl	800d300 <xQueueSemaphoreTake>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d148      	bne.n	8002f76 <StartMode+0x59e>
				   {
					   BSP_LCD_SelectLayer(1);
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f000 ffd5 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002eea:	f04f 30ff 	mov.w	r0, #4294967295
 8002eee:	f000 ffe1 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002ef2:	2315      	movs	r3, #21
 8002ef4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ef8:	21fb      	movs	r1, #251	; 0xfb
 8002efa:	2000      	movs	r0, #0
 8002efc:	f001 fc22 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002f00:	4822      	ldr	r0, [pc, #136]	; (8002f8c <StartMode+0x5b4>)
 8002f02:	f000 ffd7 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_alpha, LEFT_MODE);
 8002f06:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	21fc      	movs	r1, #252	; 0xfc
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f001 f944 	bl	800419c <BSP_LCD_DisplayStringAt>
					   for(uint32_t i = 0;i<256; i++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002f1a:	e021      	b.n	8002f60 <StartMode+0x588>
					   {
						   for(char j = 0; j<18; j++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8002f22:	e014      	b.n	8002f4e <StartMode+0x576>
						   {
							   BSP_LCD_DrawPixel(200+i, 252+j, i << 24);
 8002f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	33c8      	adds	r3, #200	; 0xc8
 8002f2c:	b298      	uxth	r0, r3
 8002f2e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	33fc      	adds	r3, #252	; 0xfc
 8002f36:	b299      	uxth	r1, r3
 8002f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f001 fbb8 	bl	80046b4 <BSP_LCD_DrawPixel>
						   for(char j = 0; j<18; j++)
 8002f44:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8002f4e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f52:	2b11      	cmp	r3, #17
 8002f54:	d9e6      	bls.n	8002f24 <StartMode+0x54c>
					   for(uint32_t i = 0;i<256; i++)
 8002f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f64:	2bff      	cmp	r3, #255	; 0xff
 8002f66:	d9d9      	bls.n	8002f1c <StartMode+0x544>
						   }
					   }
					   xSemaphoreGive(myMutexLCDHandle);
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <StartMode+0x5ac>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	f00a f8c3 	bl	800d0fc <xQueueGenericSend>
				   }
			   }
		  }
		  sous_menu = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  BSP_TS_GetState(&TS_State);
 8002f7c:	4804      	ldr	r0, [pc, #16]	; (8002f90 <StartMode+0x5b8>)
 8002f7e:	f002 f909 	bl	8005194 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002f82:	e051      	b.n	8003028 <StartMode+0x650>
 8002f84:	20009c34 	.word	0x20009c34
 8002f88:	200013a8 	.word	0x200013a8
 8002f8c:	ffff0000 	.word	0xffff0000
 8002f90:	200016d0 	.word	0x200016d0
 8002f94:	2000139d 	.word	0x2000139d
 8002f98:	20009e84 	.word	0x20009e84
 8002f9c:	2000139e 	.word	0x2000139e
		  {
			  if((TS_State.touchX[0]>200) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]<455))
 8002fa0:	4bbd      	ldr	r3, [pc, #756]	; (8003298 <StartMode+0x8c0>)
 8002fa2:	885b      	ldrh	r3, [r3, #2]
 8002fa4:	2bc8      	cmp	r3, #200	; 0xc8
 8002fa6:	d939      	bls.n	800301c <StartMode+0x644>
 8002fa8:	4bbb      	ldr	r3, [pc, #748]	; (8003298 <StartMode+0x8c0>)
 8002faa:	899b      	ldrh	r3, [r3, #12]
 8002fac:	2bf0      	cmp	r3, #240	; 0xf0
 8002fae:	d935      	bls.n	800301c <StartMode+0x644>
 8002fb0:	4bb9      	ldr	r3, [pc, #740]	; (8003298 <StartMode+0x8c0>)
 8002fb2:	885b      	ldrh	r3, [r3, #2]
 8002fb4:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8002fb8:	d830      	bhi.n	800301c <StartMode+0x644>
			  {
				  couleur &= 0x00FFFFFF; //on enlève l'ancienne transparence
 8002fba:	4bb8      	ldr	r3, [pc, #736]	; (800329c <StartMode+0x8c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fc2:	4ab6      	ldr	r2, [pc, #728]	; (800329c <StartMode+0x8c4>)
 8002fc4:	6013      	str	r3, [r2, #0]
				  couleur |= ((TS_State.touchX[0]-200)<<24);
 8002fc6:	4bb4      	ldr	r3, [pc, #720]	; (8003298 <StartMode+0x8c0>)
 8002fc8:	885b      	ldrh	r3, [r3, #2]
 8002fca:	3bc8      	subs	r3, #200	; 0xc8
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4bb2      	ldr	r3, [pc, #712]	; (800329c <StartMode+0x8c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	4ab1      	ldr	r2, [pc, #708]	; (800329c <StartMode+0x8c4>)
 8002fd8:	6013      	str	r3, [r2, #0]
				  if(myMutexLCDHandle != NULL)
 8002fda:	4bb1      	ldr	r3, [pc, #708]	; (80032a0 <StartMode+0x8c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01c      	beq.n	800301c <StartMode+0x644>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002fe2:	4baf      	ldr	r3, [pc, #700]	; (80032a0 <StartMode+0x8c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2164      	movs	r1, #100	; 0x64
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f00a f989 	bl	800d300 <xQueueSemaphoreTake>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d113      	bne.n	800301c <StartMode+0x644>
					   {
						   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002ff4:	4ba9      	ldr	r3, [pc, #676]	; (800329c <StartMode+0x8c4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 ff59 	bl	8003eb4 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 8003002:	2214      	movs	r2, #20
 8003004:	217d      	movs	r1, #125	; 0x7d
 8003006:	f240 10c7 	movw	r0, #455	; 0x1c7
 800300a:	f001 fc15 	bl	8004838 <BSP_LCD_FillCircle>
						   xSemaphoreGive(myMutexLCDHandle);
 800300e:	4ba4      	ldr	r3, [pc, #656]	; (80032a0 <StartMode+0x8c8>)
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	2300      	movs	r3, #0
 8003014:	2200      	movs	r2, #0
 8003016:	2100      	movs	r1, #0
 8003018:	f00a f870 	bl	800d0fc <xQueueGenericSend>
					   }
				   }
			  }
			  sous_menu = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			  BSP_TS_GetState(&TS_State);
 8003022:	489d      	ldr	r0, [pc, #628]	; (8003298 <StartMode+0x8c0>)
 8003024:	f002 f8b6 	bl	8005194 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8003028:	4b9b      	ldr	r3, [pc, #620]	; (8003298 <StartMode+0x8c0>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1b7      	bne.n	8002fa0 <StartMode+0x5c8>
		  }
		  if(sous_menu == 0) etat = 1;
 8003030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003034:	2b00      	cmp	r3, #0
 8003036:	f040 8312 	bne.w	800365e <StartMode+0xc86>
 800303a:	4b9a      	ldr	r3, [pc, #616]	; (80032a4 <StartMode+0x8cc>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
		  break;
 8003040:	e30d      	b.n	800365e <StartMode+0xc86>
	  /*
	   * etat de sélection de la couleur
	   */
	  case 5 :
		  if(sous_menu == 0)
 8003042:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12c      	bne.n	80030a4 <StartMode+0x6cc>
		  {
			  if(myMutexLCDHandle != NULL)
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <StartMode+0x8c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d028      	beq.n	80030a4 <StartMode+0x6cc>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8003052:	4b93      	ldr	r3, [pc, #588]	; (80032a0 <StartMode+0x8c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800305a:	4618      	mov	r0, r3
 800305c:	f00a f950 	bl	800d300 <xQueueSemaphoreTake>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d11e      	bne.n	80030a4 <StartMode+0x6cc>
				   {
					   BSP_LCD_SelectLayer(1);
 8003066:	2001      	movs	r0, #1
 8003068:	f000 ff14 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f000 ff20 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8003074:	2315      	movs	r3, #21
 8003076:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800307a:	21fb      	movs	r1, #251	; 0xfb
 800307c:	2000      	movs	r0, #0
 800307e:	f001 fb61 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003082:	4889      	ldr	r0, [pc, #548]	; (80032a8 <StartMode+0x8d0>)
 8003084:	f000 ff16 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_couleur, CENTER_MODE);
 8003088:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800308c:	2301      	movs	r3, #1
 800308e:	21fc      	movs	r1, #252	; 0xfc
 8003090:	2000      	movs	r0, #0
 8003092:	f001 f883 	bl	800419c <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8003096:	4b82      	ldr	r3, [pc, #520]	; (80032a0 <StartMode+0x8c8>)
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	f00a f82c 	bl	800d0fc <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  switch(menu_couleur)
 80030aa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	f200 81af 	bhi.w	8003412 <StartMode+0xa3a>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <StartMode+0x6e4>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080031e7 	.word	0x080031e7
 80030c4:	080032ad 	.word	0x080032ad
 80030c8:	0800335f 	.word	0x0800335f
		  {
		  /*
		   * premier sous_menu : choix entre tonalité, saturation et luminosité
		   */
		  case 0 :
			  BSP_TS_GetState(&TS_State);
 80030cc:	4872      	ldr	r0, [pc, #456]	; (8003298 <StartMode+0x8c0>)
 80030ce:	f002 f861 	bl	8005194 <BSP_TS_GetState>
			  if(TS_State.touchDetected && menu_couleur == 0)
 80030d2:	4b71      	ldr	r3, [pc, #452]	; (8003298 <StartMode+0x8c0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 819a 	beq.w	8003410 <StartMode+0xa38>
 80030dc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 8195 	bne.w	8003410 <StartMode+0xa38>
			  {
				  if((TS_State.touchX[0]<170) && TS_State.touchY[0] > 272-haut_menu)
 80030e6:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <StartMode+0x8c0>)
 80030e8:	885b      	ldrh	r3, [r3, #2]
 80030ea:	2ba9      	cmp	r3, #169	; 0xa9
 80030ec:	d81e      	bhi.n	800312c <StartMode+0x754>
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <StartMode+0x8c0>)
 80030f0:	899b      	ldrh	r3, [r3, #12]
 80030f2:	2bf0      	cmp	r3, #240	; 0xf0
 80030f4:	d91a      	bls.n	800312c <StartMode+0x754>
					  // clique sur tonalité
				  {
					  menu_couleur = 1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
					  if(myMutexLCDHandle != NULL)
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <StartMode+0x8c8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d06c      	beq.n	80031de <StartMode+0x806>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <StartMode+0x8c8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800310c:	4618      	mov	r0, r3
 800310e:	f00a f8f7 	bl	800d300 <xQueueSemaphoreTake>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d162      	bne.n	80031de <StartMode+0x806>
						   {
							   AfficheTonalite();
 8003118:	f7ff f920 	bl	800235c <AfficheTonalite>
							   xSemaphoreGive(myMutexLCDHandle);
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <StartMode+0x8c8>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	2300      	movs	r3, #0
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	f009 ffe9 	bl	800d0fc <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 800312a:	e058      	b.n	80031de <StartMode+0x806>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]>310) && TS_State.touchY[0] > 272-haut_menu)
 800312c:	4b5a      	ldr	r3, [pc, #360]	; (8003298 <StartMode+0x8c0>)
 800312e:	885b      	ldrh	r3, [r3, #2]
 8003130:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003134:	d922      	bls.n	800317c <StartMode+0x7a4>
 8003136:	4b58      	ldr	r3, [pc, #352]	; (8003298 <StartMode+0x8c0>)
 8003138:	899b      	ldrh	r3, [r3, #12]
 800313a:	2bf0      	cmp	r3, #240	; 0xf0
 800313c:	d91e      	bls.n	800317c <StartMode+0x7a4>
					  //clique sur luminosité
				  {
					  menu_couleur = 2;
 800313e:	2302      	movs	r3, #2
 8003140:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
					  if(myMutexLCDHandle != NULL)
 8003144:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <StartMode+0x8c8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d04a      	beq.n	80031e2 <StartMode+0x80a>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 800314c:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <StartMode+0x8c8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003154:	4618      	mov	r0, r3
 8003156:	f00a f8d3 	bl	800d300 <xQueueSemaphoreTake>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d140      	bne.n	80031e2 <StartMode+0x80a>
						   {
							   AfficheLuminosite(ton, sat);
 8003160:	edd7 0a44 	vldr	s1, [r7, #272]	; 0x110
 8003164:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 8003168:	f7ff fa02 	bl	8002570 <AfficheLuminosite>
							   xSemaphoreGive(myMutexLCDHandle);
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <StartMode+0x8c8>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	2300      	movs	r3, #0
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	f009 ffc1 	bl	800d0fc <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 800317a:	e032      	b.n	80031e2 <StartMode+0x80a>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]<310) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]>170))
 800317c:	4b46      	ldr	r3, [pc, #280]	; (8003298 <StartMode+0x8c0>)
 800317e:	885b      	ldrh	r3, [r3, #2]
 8003180:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003184:	f080 8144 	bcs.w	8003410 <StartMode+0xa38>
 8003188:	4b43      	ldr	r3, [pc, #268]	; (8003298 <StartMode+0x8c0>)
 800318a:	899b      	ldrh	r3, [r3, #12]
 800318c:	2bf0      	cmp	r3, #240	; 0xf0
 800318e:	f240 813f 	bls.w	8003410 <StartMode+0xa38>
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <StartMode+0x8c0>)
 8003194:	885b      	ldrh	r3, [r3, #2]
 8003196:	2baa      	cmp	r3, #170	; 0xaa
 8003198:	f240 813a 	bls.w	8003410 <StartMode+0xa38>
					  //clique sur saturation
				  {
					  menu_couleur = 3;
 800319c:	2303      	movs	r3, #3
 800319e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
					  if(myMutexLCDHandle != NULL)
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <StartMode+0x8c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8132 	beq.w	8003410 <StartMode+0xa38>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 80031ac:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <StartMode+0x8c8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00a f8a3 	bl	800d300 <xQueueSemaphoreTake>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 8127 	bne.w	8003410 <StartMode+0xa38>
						   {
							   AfficheSaturation(ton, lum);
 80031c2:	edd7 0a45 	vldr	s1, [r7, #276]	; 0x114
 80031c6:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 80031ca:	f7ff fa25 	bl	8002618 <AfficheSaturation>
							   xSemaphoreGive(myMutexLCDHandle);
 80031ce:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <StartMode+0x8c8>)
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	2300      	movs	r3, #0
 80031d4:	2200      	movs	r2, #0
 80031d6:	2100      	movs	r1, #0
 80031d8:	f009 ff90 	bl	800d0fc <xQueueGenericSend>
						   }
					  }
				  }
			  }
			  break;
 80031dc:	e118      	b.n	8003410 <StartMode+0xa38>
					  if(myMutexLCDHandle != NULL)
 80031de:	bf00      	nop
 80031e0:	e116      	b.n	8003410 <StartMode+0xa38>
					  if(myMutexLCDHandle != NULL)
 80031e2:	bf00      	nop
			  break;
 80031e4:	e114      	b.n	8003410 <StartMode+0xa38>
		  /*
		   * on a affiché l'arc en ciel des tonalités, l'utilisateur choisit maintenant celle-ci.
		   */
		  case 1:
			  BSP_TS_GetState(&TS_State);
 80031e6:	482c      	ldr	r0, [pc, #176]	; (8003298 <StartMode+0x8c0>)
 80031e8:	f001 ffd4 	bl	8005194 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 80031ec:	e04f      	b.n	800328e <StartMode+0x8b6>
			  {
				  if((TS_State.touchX[0]>=50) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]<433))
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <StartMode+0x8c0>)
 80031f0:	885b      	ldrh	r3, [r3, #2]
 80031f2:	2b31      	cmp	r3, #49	; 0x31
 80031f4:	d942      	bls.n	800327c <StartMode+0x8a4>
 80031f6:	4b28      	ldr	r3, [pc, #160]	; (8003298 <StartMode+0x8c0>)
 80031f8:	899b      	ldrh	r3, [r3, #12]
 80031fa:	2bf0      	cmp	r3, #240	; 0xf0
 80031fc:	d93e      	bls.n	800327c <StartMode+0x8a4>
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <StartMode+0x8c0>)
 8003200:	885b      	ldrh	r3, [r3, #2]
 8003202:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003206:	d839      	bhi.n	800327c <StartMode+0x8a4>
				  {
					  ton = FindTonalite(TS_State.touchX[0]-50);
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <StartMode+0x8c0>)
 800320a:	885b      	ldrh	r3, [r3, #2]
 800320c:	3b32      	subs	r3, #50	; 0x32
 800320e:	b29b      	uxth	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fb43 	bl	800289c <FindTonalite>
 8003216:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 800321a:	ed97 1a45 	vldr	s2, [r7, #276]	; 0x114
 800321e:	edd7 0a44 	vldr	s1, [r7, #272]	; 0x110
 8003222:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 8003226:	f7ff fa4b 	bl	80026c0 <FindCouleur>
 800322a:	4602      	mov	r2, r0
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <StartMode+0x8c4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003234:	4313      	orrs	r3, r2
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <StartMode+0x8c4>)
 8003238:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <StartMode+0x8c8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01c      	beq.n	800327c <StartMode+0x8a4>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <StartMode+0x8c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	4618      	mov	r0, r3
 800324a:	f00a f859 	bl	800d300 <xQueueSemaphoreTake>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d113      	bne.n	800327c <StartMode+0x8a4>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <StartMode+0x8c4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fe29 	bl	8003eb4 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8003262:	2214      	movs	r2, #20
 8003264:	2119      	movs	r1, #25
 8003266:	f240 10c7 	movw	r0, #455	; 0x1c7
 800326a:	f001 fae5 	bl	8004838 <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <StartMode+0x8c8>)
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	f009 ff40 	bl	800d0fc <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
				  sous_menu = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				  BSP_TS_GetState(&TS_State);
 8003288:	4803      	ldr	r0, [pc, #12]	; (8003298 <StartMode+0x8c0>)
 800328a:	f001 ff83 	bl	8005194 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 800328e:	4b02      	ldr	r3, [pc, #8]	; (8003298 <StartMode+0x8c0>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ab      	bne.n	80031ee <StartMode+0x816>
			  }
			  break;
 8003296:	e0bc      	b.n	8003412 <StartMode+0xa3a>
 8003298:	200016d0 	.word	0x200016d0
 800329c:	20009e84 	.word	0x20009e84
 80032a0:	20009c34 	.word	0x20009c34
 80032a4:	2000139e 	.word	0x2000139e
 80032a8:	ffff0000 	.word	0xffff0000
		  /*
		   * On a Affiché le dégradé de luminosité, l'utilisateur chosit maintenant celle-ci
		   */
		  case 2:
			  BSP_TS_GetState(&TS_State);
 80032ac:	488f      	ldr	r0, [pc, #572]	; (80034ec <StartMode+0xb14>)
 80032ae:	f001 ff71 	bl	8005194 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 80032b2:	e04f      	b.n	8003354 <StartMode+0x97c>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]<=356))
 80032b4:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <StartMode+0xb14>)
 80032b6:	885b      	ldrh	r3, [r3, #2]
 80032b8:	2b63      	cmp	r3, #99	; 0x63
 80032ba:	d942      	bls.n	8003342 <StartMode+0x96a>
 80032bc:	4b8b      	ldr	r3, [pc, #556]	; (80034ec <StartMode+0xb14>)
 80032be:	899b      	ldrh	r3, [r3, #12]
 80032c0:	2bf0      	cmp	r3, #240	; 0xf0
 80032c2:	d93e      	bls.n	8003342 <StartMode+0x96a>
 80032c4:	4b89      	ldr	r3, [pc, #548]	; (80034ec <StartMode+0xb14>)
 80032c6:	885b      	ldrh	r3, [r3, #2]
 80032c8:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 80032cc:	d839      	bhi.n	8003342 <StartMode+0x96a>
				  {
					  lum = FindLuminosite(TS_State.touchX[0]-100);
 80032ce:	4b87      	ldr	r3, [pc, #540]	; (80034ec <StartMode+0xb14>)
 80032d0:	885b      	ldrh	r3, [r3, #2]
 80032d2:	3b64      	subs	r3, #100	; 0x64
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fb06 	bl	80028e8 <FindLuminosite>
 80032dc:	ed87 0a45 	vstr	s0, [r7, #276]	; 0x114
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 80032e0:	ed97 1a45 	vldr	s2, [r7, #276]	; 0x114
 80032e4:	edd7 0a44 	vldr	s1, [r7, #272]	; 0x110
 80032e8:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 80032ec:	f7ff f9e8 	bl	80026c0 <FindCouleur>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <StartMode+0xb18>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80032fa:	4313      	orrs	r3, r2
 80032fc:	4a7c      	ldr	r2, [pc, #496]	; (80034f0 <StartMode+0xb18>)
 80032fe:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8003300:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <StartMode+0xb1c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <StartMode+0x96a>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8003308:	4b7a      	ldr	r3, [pc, #488]	; (80034f4 <StartMode+0xb1c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2164      	movs	r1, #100	; 0x64
 800330e:	4618      	mov	r0, r3
 8003310:	f009 fff6 	bl	800d300 <xQueueSemaphoreTake>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d113      	bne.n	8003342 <StartMode+0x96a>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 800331a:	4b75      	ldr	r3, [pc, #468]	; (80034f0 <StartMode+0xb18>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fdc6 	bl	8003eb4 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8003328:	2214      	movs	r2, #20
 800332a:	2119      	movs	r1, #25
 800332c:	f240 10c7 	movw	r0, #455	; 0x1c7
 8003330:	f001 fa82 	bl	8004838 <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 8003334:	4b6f      	ldr	r3, [pc, #444]	; (80034f4 <StartMode+0xb1c>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	2300      	movs	r3, #0
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	f009 fedd 	bl	800d0fc <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
				  sous_menu = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				  BSP_TS_GetState(&TS_State);
 800334e:	4867      	ldr	r0, [pc, #412]	; (80034ec <StartMode+0xb14>)
 8003350:	f001 ff20 	bl	8005194 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003354:	4b65      	ldr	r3, [pc, #404]	; (80034ec <StartMode+0xb14>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ab      	bne.n	80032b4 <StartMode+0x8dc>
			  }
			  break;
 800335c:	e059      	b.n	8003412 <StartMode+0xa3a>
		  /*
		   * On a Affiché le dégradé de saturation, l'utilisateur chosit maintenant celle-ci
		   */
		  case 3:
			  BSP_TS_GetState(&TS_State);
 800335e:	4863      	ldr	r0, [pc, #396]	; (80034ec <StartMode+0xb14>)
 8003360:	f001 ff18 	bl	8005194 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003364:	e04f      	b.n	8003406 <StartMode+0xa2e>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]<=356))
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <StartMode+0xb14>)
 8003368:	885b      	ldrh	r3, [r3, #2]
 800336a:	2b63      	cmp	r3, #99	; 0x63
 800336c:	d942      	bls.n	80033f4 <StartMode+0xa1c>
 800336e:	4b5f      	ldr	r3, [pc, #380]	; (80034ec <StartMode+0xb14>)
 8003370:	899b      	ldrh	r3, [r3, #12]
 8003372:	2bf0      	cmp	r3, #240	; 0xf0
 8003374:	d93e      	bls.n	80033f4 <StartMode+0xa1c>
 8003376:	4b5d      	ldr	r3, [pc, #372]	; (80034ec <StartMode+0xb14>)
 8003378:	885b      	ldrh	r3, [r3, #2]
 800337a:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800337e:	d839      	bhi.n	80033f4 <StartMode+0xa1c>
				  {
					  sat = FindSaturation(TS_State.touchX[0]-100);
 8003380:	4b5a      	ldr	r3, [pc, #360]	; (80034ec <StartMode+0xb14>)
 8003382:	885b      	ldrh	r3, [r3, #2]
 8003384:	3b64      	subs	r3, #100	; 0x64
 8003386:	b29b      	uxth	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fac7 	bl	800291c <FindSaturation>
 800338e:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8003392:	ed97 1a45 	vldr	s2, [r7, #276]	; 0x114
 8003396:	edd7 0a44 	vldr	s1, [r7, #272]	; 0x110
 800339a:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 800339e:	f7ff f98f 	bl	80026c0 <FindCouleur>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <StartMode+0xb18>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80033ac:	4313      	orrs	r3, r2
 80033ae:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <StartMode+0xb18>)
 80033b0:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <StartMode+0xb1c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01c      	beq.n	80033f4 <StartMode+0xa1c>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <StartMode+0xb1c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2164      	movs	r1, #100	; 0x64
 80033c0:	4618      	mov	r0, r3
 80033c2:	f009 ff9d 	bl	800d300 <xQueueSemaphoreTake>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d113      	bne.n	80033f4 <StartMode+0xa1c>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 80033cc:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <StartMode+0xb18>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fd6d 	bl	8003eb4 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 80033da:	2214      	movs	r2, #20
 80033dc:	2119      	movs	r1, #25
 80033de:	f240 10c7 	movw	r0, #455	; 0x1c7
 80033e2:	f001 fa29 	bl	8004838 <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 80033e6:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <StartMode+0xb1c>)
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	f009 fe84 	bl	800d0fc <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
				  sous_menu = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				  BSP_TS_GetState(&TS_State);
 8003400:	483a      	ldr	r0, [pc, #232]	; (80034ec <StartMode+0xb14>)
 8003402:	f001 fec7 	bl	8005194 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <StartMode+0xb14>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ab      	bne.n	8003366 <StartMode+0x98e>
			  }
			  break;
 800340e:	e000      	b.n	8003412 <StartMode+0xa3a>
			  break;
 8003410:	bf00      	nop
		  }
		  if(sous_menu==0) etat = 1;
 8003412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 8123 	bne.w	8003662 <StartMode+0xc8a>
 800341c:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <StartMode+0xb20>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
		  break;
 8003422:	e11e      	b.n	8003662 <StartMode+0xc8a>
	  /*
	   * etat de sélection de la taille
	   */
	  case 6 :
		  if(sous_menu == 0)
 8003424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003428:	2b00      	cmp	r3, #0
 800342a:	d158      	bne.n	80034de <StartMode+0xb06>
		  {
			  if(myMutexLCDHandle != NULL)
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <StartMode+0xb1c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d054      	beq.n	80034de <StartMode+0xb06>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8003434:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <StartMode+0xb1c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800343c:	4618      	mov	r0, r3
 800343e:	f009 ff5f 	bl	800d300 <xQueueSemaphoreTake>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d14a      	bne.n	80034de <StartMode+0xb06>
				   {
					   BSP_LCD_SelectLayer(1);
 8003448:	2001      	movs	r0, #1
 800344a:	f000 fd23 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800344e:	f04f 30ff 	mov.w	r0, #4294967295
 8003452:	f000 fd2f 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8003456:	2315      	movs	r3, #21
 8003458:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800345c:	21fb      	movs	r1, #251	; 0xfb
 800345e:	2000      	movs	r0, #0
 8003460:	f001 f970 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003464:	4825      	ldr	r0, [pc, #148]	; (80034fc <StartMode+0xb24>)
 8003466:	f000 fd25 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_taille, LEFT_MODE);
 800346a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800346e:	2303      	movs	r3, #3
 8003470:	21fc      	movs	r1, #252	; 0xfc
 8003472:	2000      	movs	r0, #0
 8003474:	f000 fe92 	bl	800419c <BSP_LCD_DisplayStringAt>
					   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003478:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800347c:	f000 fd1a 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_DrawHLine(220, 261, 240);
 8003480:	22f0      	movs	r2, #240	; 0xf0
 8003482:	f240 1105 	movw	r1, #261	; 0x105
 8003486:	20dc      	movs	r0, #220	; 0xdc
 8003488:	f000 ff64 	bl	8004354 <BSP_LCD_DrawHLine>
					   BSP_LCD_DrawVLine(220, 252, 18);
 800348c:	2212      	movs	r2, #18
 800348e:	21fc      	movs	r1, #252	; 0xfc
 8003490:	20dc      	movs	r0, #220	; 0xdc
 8003492:	f000 ffbd 	bl	8004410 <BSP_LCD_DrawVLine>
					   BSP_LCD_DrawVLine(460, 252, 18);
 8003496:	2212      	movs	r2, #18
 8003498:	21fc      	movs	r1, #252	; 0xfc
 800349a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800349e:	f000 ffb7 	bl	8004410 <BSP_LCD_DrawVLine>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80034a2:	4816      	ldr	r0, [pc, #88]	; (80034fc <StartMode+0xb24>)
 80034a4:	f000 fd06 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(220+12*radius, 252, 5, 18);
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <StartMode+0xb28>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	0052      	lsls	r2, r2, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	33dc      	adds	r3, #220	; 0xdc
 80034ba:	b298      	uxth	r0, r3
 80034bc:	2312      	movs	r3, #18
 80034be:	2205      	movs	r2, #5
 80034c0:	21fc      	movs	r1, #252	; 0xfc
 80034c2:	f001 f93f 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(couleur);
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <StartMode+0xb18>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fcf2 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   xSemaphoreGive(myMutexLCDHandle);
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <StartMode+0xb1c>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	f009 fe0f 	bl	800d0fc <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  BSP_TS_GetState(&TS_State);
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <StartMode+0xb14>)
 80034e6:	f001 fe55 	bl	8005194 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 80034ea:	e071      	b.n	80035d0 <StartMode+0xbf8>
 80034ec:	200016d0 	.word	0x200016d0
 80034f0:	20009e84 	.word	0x20009e84
 80034f4:	20009c34 	.word	0x20009c34
 80034f8:	2000139e 	.word	0x2000139e
 80034fc:	ffff0000 	.word	0xffff0000
 8003500:	2000139c 	.word	0x2000139c
		  {
			  if((TS_State.touchX[0]>220) && (TS_State.touchY[0] > 272-haut_menu) && (TS_State.touchX[0]<460))
 8003504:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <StartMode+0xca0>)
 8003506:	885b      	ldrh	r3, [r3, #2]
 8003508:	2bdc      	cmp	r3, #220	; 0xdc
 800350a:	d95b      	bls.n	80035c4 <StartMode+0xbec>
 800350c:	4b5a      	ldr	r3, [pc, #360]	; (8003678 <StartMode+0xca0>)
 800350e:	899b      	ldrh	r3, [r3, #12]
 8003510:	2bf0      	cmp	r3, #240	; 0xf0
 8003512:	d957      	bls.n	80035c4 <StartMode+0xbec>
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <StartMode+0xca0>)
 8003516:	885b      	ldrh	r3, [r3, #2]
 8003518:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800351c:	d252      	bcs.n	80035c4 <StartMode+0xbec>
			  {
				  radius_prec = radius;
 800351e:	4b57      	ldr	r3, [pc, #348]	; (800367c <StartMode+0xca4>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
				  radius = (TS_State.touchX[0]-208)/12;
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <StartMode+0xca0>)
 8003528:	885b      	ldrh	r3, [r3, #2]
 800352a:	3bd0      	subs	r3, #208	; 0xd0
 800352c:	4a54      	ldr	r2, [pc, #336]	; (8003680 <StartMode+0xca8>)
 800352e:	fb82 1203 	smull	r1, r2, r2, r3
 8003532:	1052      	asrs	r2, r2, #1
 8003534:	17db      	asrs	r3, r3, #31
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b50      	ldr	r3, [pc, #320]	; (800367c <StartMode+0xca4>)
 800353c:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <StartMode+0xcac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03e      	beq.n	80035c4 <StartMode+0xbec>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <StartMode+0xcac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2164      	movs	r1, #100	; 0x64
 800354c:	4618      	mov	r0, r3
 800354e:	f009 fed7 	bl	800d300 <xQueueSemaphoreTake>
 8003552:	4603      	mov	r3, r0
 8003554:	2b01      	cmp	r3, #1
 8003556:	d135      	bne.n	80035c4 <StartMode+0xbec>
					   {
						   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f000 fcaa 	bl	8003eb4 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillRect(220+12*radius_prec, 252, 5, 18);
 8003560:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	0052      	lsls	r2, r2, #1
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	b29b      	uxth	r3, r3
 8003570:	33dc      	adds	r3, #220	; 0xdc
 8003572:	b298      	uxth	r0, r3
 8003574:	2312      	movs	r3, #18
 8003576:	2205      	movs	r2, #5
 8003578:	21fc      	movs	r1, #252	; 0xfc
 800357a:	f001 f8e3 	bl	8004744 <BSP_LCD_FillRect>
						   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800357e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003582:	f000 fc97 	bl	8003eb4 <BSP_LCD_SetTextColor>
						   BSP_LCD_DrawHLine(220, 261, 240);
 8003586:	22f0      	movs	r2, #240	; 0xf0
 8003588:	f240 1105 	movw	r1, #261	; 0x105
 800358c:	20dc      	movs	r0, #220	; 0xdc
 800358e:	f000 fee1 	bl	8004354 <BSP_LCD_DrawHLine>
						   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003592:	483d      	ldr	r0, [pc, #244]	; (8003688 <StartMode+0xcb0>)
 8003594:	f000 fc8e 	bl	8003eb4 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillRect(220+12*radius, 252, 5, 18);
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <StartMode+0xca4>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	0052      	lsls	r2, r2, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	33dc      	adds	r3, #220	; 0xdc
 80035aa:	b298      	uxth	r0, r3
 80035ac:	2312      	movs	r3, #18
 80035ae:	2205      	movs	r2, #5
 80035b0:	21fc      	movs	r1, #252	; 0xfc
 80035b2:	f001 f8c7 	bl	8004744 <BSP_LCD_FillRect>
						   xSemaphoreGive(myMutexLCDHandle);
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <StartMode+0xcac>)
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	2200      	movs	r2, #0
 80035be:	2100      	movs	r1, #0
 80035c0:	f009 fd9c 	bl	800d0fc <xQueueGenericSend>
					   }
				   }
			  }
			  sous_menu = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			  BSP_TS_GetState(&TS_State);
 80035ca:	482b      	ldr	r0, [pc, #172]	; (8003678 <StartMode+0xca0>)
 80035cc:	f001 fde2 	bl	8005194 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 80035d0:	4b29      	ldr	r3, [pc, #164]	; (8003678 <StartMode+0xca0>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d195      	bne.n	8003504 <StartMode+0xb2c>
		  }
		  if(sous_menu==0) etat = 1;
 80035d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d142      	bne.n	8003666 <StartMode+0xc8e>
 80035e0:	4b2a      	ldr	r3, [pc, #168]	; (800368c <StartMode+0xcb4>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
		  break;
 80035e6:	e03e      	b.n	8003666 <StartMode+0xc8e>
	  /*
	   * etat de clear de la page de dessin.
	   */
	  case 7 :
		  if(myMutexLCDHandle != NULL)
 80035e8:	4b26      	ldr	r3, [pc, #152]	; (8003684 <StartMode+0xcac>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02a      	beq.n	8003646 <StartMode+0xc6e>
		  {
			   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <StartMode+0xcac>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2164      	movs	r1, #100	; 0x64
 80035f6:	4618      	mov	r0, r3
 80035f8:	f009 fe82 	bl	800d300 <xQueueSemaphoreTake>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d121      	bne.n	8003646 <StartMode+0xc6e>
			   {
				  BSP_LCD_SelectLayer(0);
 8003602:	2000      	movs	r0, #0
 8003604:	f000 fc46 	bl	8003e94 <BSP_LCD_SelectLayer>
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	f000 fc52 	bl	8003eb4 <BSP_LCD_SetTextColor>
				  BSP_LCD_FillRect(0, 0, 480-taille_menu-5, 246);
 8003610:	23f6      	movs	r3, #246	; 0xf6
 8003612:	f240 12a9 	movw	r2, #425	; 0x1a9
 8003616:	2100      	movs	r1, #0
 8003618:	2000      	movs	r0, #0
 800361a:	f001 f893 	bl	8004744 <BSP_LCD_FillRect>
				  BSP_LCD_SelectLayer(1);
 800361e:	2001      	movs	r0, #1
 8003620:	f000 fc38 	bl	8003e94 <BSP_LCD_SelectLayer>
				  BSP_LCD_SetTextColor(LCD_COLOR_TRANSPARENT);
 8003624:	2000      	movs	r0, #0
 8003626:	f000 fc45 	bl	8003eb4 <BSP_LCD_SetTextColor>
				  BSP_LCD_FillRect(0, 0, 480-taille_menu-5, 246);
 800362a:	23f6      	movs	r3, #246	; 0xf6
 800362c:	f240 12a9 	movw	r2, #425	; 0x1a9
 8003630:	2100      	movs	r1, #0
 8003632:	2000      	movs	r0, #0
 8003634:	f001 f886 	bl	8004744 <BSP_LCD_FillRect>
				  xSemaphoreGive(myMutexLCDHandle);
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <StartMode+0xcac>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	f009 fd5b 	bl	800d0fc <xQueueGenericSend>
			   }
		   }
		  etat = 1;
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <StartMode+0xcb4>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
		  break;
 800364c:	e00c      	b.n	8003668 <StartMode+0xc90>
	  /*
	   * etat d'enregistrement du dessin
	   */
	  case 8 :
		  etat = 1;
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <StartMode+0xcb4>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
		  break;
 8003654:	e008      	b.n	8003668 <StartMode+0xc90>
		  break;
 8003656:	bf00      	nop
 8003658:	e006      	b.n	8003668 <StartMode+0xc90>
		  break;
 800365a:	bf00      	nop
 800365c:	e004      	b.n	8003668 <StartMode+0xc90>
		  break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <StartMode+0xc90>
		  break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <StartMode+0xc90>
		  break;
 8003666:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 8003668:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800366c:	2164      	movs	r1, #100	; 0x64
 800366e:	4618      	mov	r0, r3
 8003670:	f00a f9fa 	bl	800da68 <vTaskDelayUntil>
	  switch(etat)
 8003674:	f7ff ba1a 	b.w	8002aac <StartMode+0xd4>
 8003678:	200016d0 	.word	0x200016d0
 800367c:	2000139c 	.word	0x2000139c
 8003680:	2aaaaaab 	.word	0x2aaaaaab
 8003684:	20009c34 	.word	0x20009c34
 8003688:	ffff0000 	.word	0xffff0000
 800368c:	2000139e 	.word	0x2000139e

08003690 <StartPeindre>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPeindre */
void StartPeindre(void const * argument)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPeindre */
	static TS_StateTypeDef  TS_State;
	/* Infinite loop */
	for(;;)
	{
	  BSP_TS_GetState(&TS_State);
 8003698:	4819      	ldr	r0, [pc, #100]	; (8003700 <StartPeindre+0x70>)
 800369a:	f001 fd7b 	bl	8005194 <BSP_TS_GetState>
	  if(TS_State.touchDetected && (TestConditionBord(TS_State.touchX[0], TS_State.touchY[0], radius)))
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <StartPeindre+0x70>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f8      	beq.n	8003698 <StartPeindre+0x8>
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <StartPeindre+0x70>)
 80036a8:	8858      	ldrh	r0, [r3, #2]
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <StartPeindre+0x70>)
 80036ac:	8999      	ldrh	r1, [r3, #12]
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <StartPeindre+0x74>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	f7fe fcd3 	bl	8002060 <TestConditionBord>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0eb      	beq.n	8003698 <StartPeindre+0x8>
	  {
		  if(myMutexLCDHandle != NULL)
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <StartPeindre+0x78>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0e7      	beq.n	8003698 <StartPeindre+0x8>
		   {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <StartPeindre+0x78>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f009 fe16 	bl	800d300 <xQueueSemaphoreTake>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d1de      	bne.n	8003698 <StartPeindre+0x8>
			   {
				   LCD_PAINTBRUSH(TS_State.touchX[0],TS_State.touchY[0],radius);
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <StartPeindre+0x70>)
 80036dc:	8858      	ldrh	r0, [r3, #2]
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <StartPeindre+0x70>)
 80036e0:	8999      	ldrh	r1, [r3, #12]
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <StartPeindre+0x74>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	f7fe fce3 	bl	80020b4 <LCD_PAINTBRUSH>
				   xSemaphoreGive(myMutexLCDHandle);
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <StartPeindre+0x78>)
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	2200      	movs	r2, #0
 80036f6:	2100      	movs	r1, #0
 80036f8:	f009 fd00 	bl	800d0fc <xQueueGenericSend>
	  BSP_TS_GetState(&TS_State);
 80036fc:	e7cc      	b.n	8003698 <StartPeindre+0x8>
 80036fe:	bf00      	nop
 8003700:	200016fc 	.word	0x200016fc
 8003704:	2000139c 	.word	0x2000139c
 8003708:	20009c34 	.word	0x20009c34

0800370c <StartTaskEtat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEtat */
void StartTaskEtat(void const * argument)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskEtat */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8003714:	f00a fb6c 	bl	800ddf0 <xTaskGetTickCount>
 8003718:	4603      	mov	r3, r0
 800371a:	61bb      	str	r3, [r7, #24]
	ADC_ChannelConfTypeDef sConfig = {0};
 800371c:	f107 0308 	add.w	r3, r7, #8
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800372a:	2301      	movs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
	sConfig.Channel = ADC_CHANNEL_8;
 8003732:	2308      	movs	r3, #8
 8003734:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4619      	mov	r1, r3
 800373c:	4875      	ldr	r0, [pc, #468]	; (8003914 <StartTaskEtat+0x208>)
 800373e:	f002 ff81 	bl	8006644 <HAL_ADC_ConfigChannel>
	char etat_prec = 2;
 8003742:	2302      	movs	r3, #2
 8003744:	77fb      	strb	r3, [r7, #31]
	uint16_t joystick_h;
	/* Infinite loop */
	for(;;)
	{
	  if(etat == 0)
 8003746:	4b74      	ldr	r3, [pc, #464]	; (8003918 <StartTaskEtat+0x20c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80d9 	bne.w	8003902 <StartTaskEtat+0x1f6>
	  {
		  HAL_ADC_Start(&hadc1);
 8003750:	4872      	ldr	r0, [pc, #456]	; (800391c <StartTaskEtat+0x210>)
 8003752:	f002 fe25 	bl	80063a0 <HAL_ADC_Start>
		  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8003756:	bf00      	nop
 8003758:	2164      	movs	r1, #100	; 0x64
 800375a:	4870      	ldr	r0, [pc, #448]	; (800391c <StartTaskEtat+0x210>)
 800375c:	f002 fee0 	bl	8006520 <HAL_ADC_PollForConversion>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f8      	bne.n	8003758 <StartTaskEtat+0x4c>
		  joystick_h = HAL_ADC_GetValue(&hadc1);
 8003766:	486d      	ldr	r0, [pc, #436]	; (800391c <StartTaskEtat+0x210>)
 8003768:	f002 ff5e 	bl	8006628 <HAL_ADC_GetValue>
 800376c:	4603      	mov	r3, r0
 800376e:	83bb      	strh	r3, [r7, #28]
		  if(joystick_h > 2500)
 8003770:	8bbb      	ldrh	r3, [r7, #28]
 8003772:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003776:	4293      	cmp	r3, r2
 8003778:	d960      	bls.n	800383c <StartTaskEtat+0x130>
		  {
			  etat_prec = etat_int;
 800377a:	4b69      	ldr	r3, [pc, #420]	; (8003920 <StartTaskEtat+0x214>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	77fb      	strb	r3, [r7, #31]
			  etat_int -= 1;
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <StartTaskEtat+0x214>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b65      	ldr	r3, [pc, #404]	; (8003920 <StartTaskEtat+0x214>)
 800378a:	701a      	strb	r2, [r3, #0]
			  if(etat_int < 2) etat_int = etat_max;
 800378c:	4b64      	ldr	r3, [pc, #400]	; (8003920 <StartTaskEtat+0x214>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d802      	bhi.n	800379a <StartTaskEtat+0x8e>
 8003794:	4b62      	ldr	r3, [pc, #392]	; (8003920 <StartTaskEtat+0x214>)
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 800379a:	4b62      	ldr	r3, [pc, #392]	; (8003924 <StartTaskEtat+0x218>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80af 	beq.w	8003902 <StartTaskEtat+0x1f6>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <StartTaskEtat+0x218>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f009 fda8 	bl	800d300 <xQueueSemaphoreTake>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 80a5 	bne.w	8003902 <StartTaskEtat+0x1f6>
				   {
					   BSP_LCD_SelectLayer(1);
 80037b8:	2001      	movs	r0, #1
 80037ba:	f000 fb6b 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	f000 fb77 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	00d2      	lsls	r2, r2, #3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	00d2      	lsls	r2, r2, #3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3baa      	subs	r3, #170	; 0xaa
 80037dc:	b298      	uxth	r0, r3
 80037de:	2305      	movs	r3, #5
 80037e0:	2223      	movs	r2, #35	; 0x23
 80037e2:	f240 1109 	movw	r1, #265	; 0x109
 80037e6:	f000 ffad 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF);
 80037ea:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80037ee:	f000 fb61 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <StartTaskEtat+0x214>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	00d2      	lsls	r2, r2, #3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	00d2      	lsls	r2, r2, #3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	3baa      	subs	r3, #170	; 0xaa
 800380a:	b298      	uxth	r0, r3
 800380c:	2305      	movs	r3, #5
 800380e:	2223      	movs	r2, #35	; 0x23
 8003810:	f240 1109 	movw	r1, #265	; 0x109
 8003814:	f000 ff96 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SelectLayer(layer);
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <StartTaskEtat+0x21c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fb39 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(couleur);
 8003822:	4b42      	ldr	r3, [pc, #264]	; (800392c <StartTaskEtat+0x220>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fb44 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   xSemaphoreGive(myMutexLCDHandle);
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <StartTaskEtat+0x218>)
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	2300      	movs	r3, #0
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	f009 fc61 	bl	800d0fc <xQueueGenericSend>
 800383a:	e062      	b.n	8003902 <StartTaskEtat+0x1f6>
				   }
			   }
		  }
		  else if(joystick_h < 1500)
 800383c:	8bbb      	ldrh	r3, [r7, #28]
 800383e:	f240 52db 	movw	r2, #1499	; 0x5db
 8003842:	4293      	cmp	r3, r2
 8003844:	d85d      	bhi.n	8003902 <StartTaskEtat+0x1f6>
		  {
			  etat_prec = etat_int;
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <StartTaskEtat+0x214>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	77fb      	strb	r3, [r7, #31]
			  etat_int += 1;
 800384c:	4b34      	ldr	r3, [pc, #208]	; (8003920 <StartTaskEtat+0x214>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <StartTaskEtat+0x214>)
 8003856:	701a      	strb	r2, [r3, #0]
			  if (etat_int > etat_max) etat_int = 2;
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <StartTaskEtat+0x214>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b06      	cmp	r3, #6
 800385e:	d902      	bls.n	8003866 <StartTaskEtat+0x15a>
 8003860:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <StartTaskEtat+0x214>)
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <StartTaskEtat+0x218>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d049      	beq.n	8003902 <StartTaskEtat+0x1f6>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <StartTaskEtat+0x218>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f009 fd43 	bl	800d300 <xQueueSemaphoreTake>
 800387a:	4603      	mov	r3, r0
 800387c:	2b01      	cmp	r3, #1
 800387e:	d140      	bne.n	8003902 <StartTaskEtat+0x1f6>
				   {
					   BSP_LCD_SelectLayer(1);
 8003880:	2001      	movs	r0, #1
 8003882:	f000 fb07 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003886:	f04f 30ff 	mov.w	r0, #4294967295
 800388a:	f000 fb13 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 800388e:	7ffb      	ldrb	r3, [r7, #31]
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	00d2      	lsls	r2, r2, #3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	461a      	mov	r2, r3
 800389a:	00d2      	lsls	r2, r2, #3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3baa      	subs	r3, #170	; 0xaa
 80038a4:	b298      	uxth	r0, r3
 80038a6:	2305      	movs	r3, #5
 80038a8:	2223      	movs	r2, #35	; 0x23
 80038aa:	f240 1109 	movw	r1, #265	; 0x109
 80038ae:	f000 ff49 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 80038b2:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80038b6:	f000 fafd 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <StartTaskEtat+0x214>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	00d2      	lsls	r2, r2, #3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	00d2      	lsls	r2, r2, #3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3baa      	subs	r3, #170	; 0xaa
 80038d2:	b298      	uxth	r0, r3
 80038d4:	2305      	movs	r3, #5
 80038d6:	2223      	movs	r2, #35	; 0x23
 80038d8:	f240 1109 	movw	r1, #265	; 0x109
 80038dc:	f000 ff32 	bl	8004744 <BSP_LCD_FillRect>
					   BSP_LCD_SelectLayer(layer);
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <StartTaskEtat+0x21c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fad5 	bl	8003e94 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(couleur);
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <StartTaskEtat+0x220>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fae0 	bl	8003eb4 <BSP_LCD_SetTextColor>
					   xSemaphoreGive(myMutexLCDHandle);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <StartTaskEtat+0x218>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	f009 fbfd 	bl	800d0fc <xQueueGenericSend>
				   }
			   }
		  }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 300);
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800390a:	4618      	mov	r0, r3
 800390c:	f00a f8ac 	bl	800da68 <vTaskDelayUntil>
	  if(etat == 0)
 8003910:	e719      	b.n	8003746 <StartTaskEtat+0x3a>
 8003912:	bf00      	nop
 8003914:	20009da8 	.word	0x20009da8
 8003918:	2000139e 	.word	0x2000139e
 800391c:	20009d60 	.word	0x20009d60
 8003920:	2000139f 	.word	0x2000139f
 8003924:	20009c34 	.word	0x20009c34
 8003928:	200016a2 	.word	0x200016a2
 800392c:	20009e84 	.word	0x20009e84

08003930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003942:	f002 fca7 	bl	8006294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40001000 	.word	0x40001000

08003954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003958:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800395a:	e7fe      	b.n	800395a <Error_Handler+0x6>

0800395c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a51      	ldr	r2, [pc, #324]	; (8003aac <I2Cx_MspInit+0x150>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d14d      	bne.n	8003a08 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <I2Cx_MspInit+0x154>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	4a4f      	ldr	r2, [pc, #316]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	6313      	str	r3, [r2, #48]	; 0x30
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <I2Cx_MspInit+0x154>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003988:	2312      	movs	r3, #18
 800398a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003990:	2302      	movs	r3, #2
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003994:	2304      	movs	r3, #4
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	4619      	mov	r1, r3
 800399e:	4845      	ldr	r0, [pc, #276]	; (8003ab4 <I2Cx_MspInit+0x158>)
 80039a0:	f003 feae 	bl	8007700 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80039a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	4619      	mov	r1, r3
 80039b0:	4840      	ldr	r0, [pc, #256]	; (8003ab4 <I2Cx_MspInit+0x158>)
 80039b2:	f003 fea5 	bl	8007700 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80039b6:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a3d      	ldr	r2, [pc, #244]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a37      	ldr	r2, [pc, #220]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039d8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80039da:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <I2Cx_MspInit+0x154>)
 80039e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039e4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80039e6:	2200      	movs	r2, #0
 80039e8:	210f      	movs	r1, #15
 80039ea:	2048      	movs	r0, #72	; 0x48
 80039ec:	f003 f926 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80039f0:	2048      	movs	r0, #72	; 0x48
 80039f2:	f003 f93f 	bl	8006c74 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	210f      	movs	r1, #15
 80039fa:	2049      	movs	r0, #73	; 0x49
 80039fc:	f003 f91e 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003a00:	2049      	movs	r0, #73	; 0x49
 8003a02:	f003 f937 	bl	8006c74 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003a06:	e04d      	b.n	8003aa4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4a28      	ldr	r2, [pc, #160]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	6313      	str	r3, [r2, #48]	; 0x30
 8003a14:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a24:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a26:	2312      	movs	r3, #18
 8003a28:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003a32:	2304      	movs	r3, #4
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	481e      	ldr	r0, [pc, #120]	; (8003ab8 <I2Cx_MspInit+0x15c>)
 8003a3e:	f003 fe5f 	bl	8007700 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a48:	f107 031c 	add.w	r3, r7, #28
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	481a      	ldr	r0, [pc, #104]	; (8003ab8 <I2Cx_MspInit+0x15c>)
 8003a50:	f003 fe56 	bl	8007700 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a76:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <I2Cx_MspInit+0x154>)
 8003a7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a82:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003a84:	2200      	movs	r2, #0
 8003a86:	210f      	movs	r1, #15
 8003a88:	201f      	movs	r0, #31
 8003a8a:	f003 f8d7 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003a8e:	201f      	movs	r0, #31
 8003a90:	f003 f8f0 	bl	8006c74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	210f      	movs	r1, #15
 8003a98:	2020      	movs	r0, #32
 8003a9a:	f003 f8cf 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003a9e:	2020      	movs	r0, #32
 8003aa0:	f003 f8e8 	bl	8006c74 <HAL_NVIC_EnableIRQ>
}
 8003aa4:	bf00      	nop
 8003aa6:	3730      	adds	r7, #48	; 0x30
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20001728 	.word	0x20001728
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40021c00 	.word	0x40021c00
 8003ab8:	40020400 	.word	0x40020400

08003abc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f004 fc07 	bl	80082d8 <HAL_I2C_GetState>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d125      	bne.n	8003b1c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <I2Cx_Init+0x68>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <I2Cx_Init+0x6c>)
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e002      	b.n	8003ae6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <I2Cx_Init+0x70>)
 8003ae4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <I2Cx_Init+0x74>)
 8003aea:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff23 	bl	800395c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f004 f8f0 	bl	8007cfc <HAL_I2C_Init>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20001728 	.word	0x20001728
 8003b28:	40005c00 	.word	0x40005c00
 8003b2c:	40005400 	.word	0x40005400
 8003b30:	40912732 	.word	0x40912732

08003b34 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af04      	add	r7, sp, #16
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	72fb      	strb	r3, [r7, #11]
 8003b46:	460b      	mov	r3, r1
 8003b48:	813b      	strh	r3, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	b299      	uxth	r1, r3
 8003b56:	88f8      	ldrh	r0, [r7, #6]
 8003b58:	893a      	ldrh	r2, [r7, #8]
 8003b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	4603      	mov	r3, r0
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f004 fa9a 	bl	80080a4 <HAL_I2C_Mem_Read>
 8003b70:	4603      	mov	r3, r0
 8003b72:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b7a:	7afb      	ldrb	r3, [r7, #11]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f832 	bl	8003be8 <I2Cx_Error>
  }
  return status;    
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b08a      	sub	sp, #40	; 0x28
 8003b92:	af04      	add	r7, sp, #16
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	4608      	mov	r0, r1
 8003b98:	4611      	mov	r1, r2
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	72fb      	strb	r3, [r7, #11]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	813b      	strh	r3, [r7, #8]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	b299      	uxth	r1, r3
 8003bb0:	88f8      	ldrh	r0, [r7, #6]
 8003bb2:	893a      	ldrh	r2, [r7, #8]
 8003bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f004 f959 	bl	8007e7c <HAL_I2C_Mem_Write>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f805 	bl	8003be8 <I2Cx_Error>
  }
  return status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f004 f911 	bl	8007e1c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ff5e 	bl	8003abc <I2Cx_Init>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <TS_IO_Init+0x10>)
 8003c0e:	f7ff ff55 	bl	8003abc <I2Cx_Init>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20001728 	.word	0x20001728

08003c1c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
 8003c26:	460b      	mov	r3, r1
 8003c28:	71bb      	strb	r3, [r7, #6]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003c2e:	79bb      	ldrb	r3, [r7, #6]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	79f9      	ldrb	r1, [r7, #7]
 8003c34:	2301      	movs	r3, #1
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	1d7b      	adds	r3, r7, #5
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4803      	ldr	r0, [pc, #12]	; (8003c4c <TS_IO_Write+0x30>)
 8003c40:	f7ff ffa5 	bl	8003b8e <I2Cx_WriteMultiple>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20001728 	.word	0x20001728

08003c50 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	4603      	mov	r3, r0
 8003c58:	460a      	mov	r2, r1
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	79f9      	ldrb	r1, [r7, #7]
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	f107 030f 	add.w	r3, r7, #15
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2301      	movs	r3, #1
 8003c76:	4804      	ldr	r0, [pc, #16]	; (8003c88 <TS_IO_Read+0x38>)
 8003c78:	f7ff ff5c 	bl	8003b34 <I2Cx_ReadMultiple>

  return read_value;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001728 	.word	0x20001728

08003c8c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f002 fb1d 	bl	80062d4 <HAL_Delay>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003ca8:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003caa:	2228      	movs	r2, #40	; 0x28
 8003cac:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003cae:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cb0:	2209      	movs	r2, #9
 8003cb2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cb6:	2235      	movs	r2, #53	; 0x35
 8003cb8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cbc:	220b      	movs	r2, #11
 8003cbe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003cc0:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cc2:	f240 121b 	movw	r2, #283	; 0x11b
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cca:	f240 2215 	movw	r2, #533	; 0x215
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cd2:	f240 121d 	movw	r2, #285	; 0x11d
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003cd8:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cda:	f240 2235 	movw	r2, #565	; 0x235
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4823      	ldr	r0, [pc, #140]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003ce4:	f000 ff40 	bl	8004b68 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cf2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003cf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <BSP_LCD_Init+0xd0>)
 8003d2c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003d2e:	4810      	ldr	r0, [pc, #64]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d30:	f004 ff64 	bl	8008bfc <HAL_LTDC_GetState>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	480c      	ldr	r0, [pc, #48]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d3e:	f000 fe39 	bl	80049b4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <BSP_LCD_Init+0xcc>)
 8003d44:	f004 fd8a 	bl	800885c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d4e:	480a      	ldr	r0, [pc, #40]	; (8003d78 <BSP_LCD_Init+0xd4>)
 8003d50:	f003 ffa2 	bl	8007c98 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d54:	2201      	movs	r2, #1
 8003d56:	2108      	movs	r1, #8
 8003d58:	4808      	ldr	r0, [pc, #32]	; (8003d7c <BSP_LCD_Init+0xd8>)
 8003d5a:	f003 ff9d 	bl	8007c98 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003d5e:	f001 f823 	bl	8004da8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003d62:	4807      	ldr	r0, [pc, #28]	; (8003d80 <BSP_LCD_Init+0xdc>)
 8003d64:	f000 f8d8 	bl	8003f18 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000a030 	.word	0x2000a030
 8003d74:	40016800 	.word	0x40016800
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022800 	.word	0x40022800
 8003d80:	200013a0 	.word	0x200013a0

08003d84 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <BSP_LCD_GetXSize+0x20>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <BSP_LCD_GetXSize+0x24>)
 8003d8e:	2134      	movs	r1, #52	; 0x34
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3360      	adds	r3, #96	; 0x60
 8003d98:	681b      	ldr	r3, [r3, #0]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	200017b4 	.word	0x200017b4
 8003da8:	2000a030 	.word	0x2000a030

08003dac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <BSP_LCD_GetYSize+0x20>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <BSP_LCD_GetYSize+0x24>)
 8003db6:	2134      	movs	r1, #52	; 0x34
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3364      	adds	r3, #100	; 0x64
 8003dc0:	681b      	ldr	r3, [r3, #0]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	200017b4 	.word	0x200017b4
 8003dd0:	2000a030 	.word	0x2000a030

08003dd4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b090      	sub	sp, #64	; 0x40
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003de4:	f7ff ffce 	bl	8003d84 <BSP_LCD_GetXSize>
 8003de8:	4603      	mov	r3, r0
 8003dea:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003df0:	f7ff ffdc 	bl	8003dac <BSP_LCD_GetYSize>
 8003df4:	4603      	mov	r3, r0
 8003df6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003e00:	23ff      	movs	r3, #255	; 0xff
 8003e02:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003e1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003e20:	2307      	movs	r3, #7
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003e24:	f7ff ffae 	bl	8003d84 <BSP_LCD_GetXSize>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003e2c:	f7ff ffbe 	bl	8003dac <BSP_LCD_GetYSize>
 8003e30:	4603      	mov	r3, r0
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4812      	ldr	r0, [pc, #72]	; (8003e88 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e3e:	f004 fe9f 	bl	8008b80 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3304      	adds	r3, #4
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295
 8003e56:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e58:	88fa      	ldrh	r2, [r7, #6]
 8003e5a:	490c      	ldr	r1, [pc, #48]	; (8003e8c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3308      	adds	r3, #8
 8003e68:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003e6a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	4907      	ldr	r1, [pc, #28]	; (8003e8c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	3740      	adds	r7, #64	; 0x40
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000a030 	.word	0x2000a030
 8003e8c:	200017b8 	.word	0x200017b8
 8003e90:	200013a0 	.word	0x200013a0

08003e94 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <BSP_LCD_SelectLayer+0x1c>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
} 
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200017b4 	.word	0x200017b4

08003eb4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <BSP_LCD_SetTextColor+0x28>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <BSP_LCD_SetTextColor+0x2c>)
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	200017b4 	.word	0x200017b4
 8003ee0:	200017b8 	.word	0x200017b8

08003ee4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <BSP_LCD_SetBackColor+0x2c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4908      	ldr	r1, [pc, #32]	; (8003f14 <BSP_LCD_SetBackColor+0x30>)
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3304      	adds	r3, #4
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	200017b4 	.word	0x200017b4
 8003f14:	200017b8 	.word	0x200017b8

08003f18 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <BSP_LCD_SetFont+0x2c>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4908      	ldr	r1, [pc, #32]	; (8003f48 <BSP_LCD_SetFont+0x30>)
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3308      	adds	r3, #8
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	200017b4 	.word	0x200017b4
 8003f48:	200017b8 	.word	0x200017b8

08003f4c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <BSP_LCD_GetFont+0x24>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <BSP_LCD_GetFont+0x28>)
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3308      	adds	r3, #8
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	200017b4 	.word	0x200017b4
 8003f74:	200017b8 	.word	0x200017b8

08003f78 <BSP_LCD_ReadPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003f78:	b5b0      	push	{r4, r5, r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	460a      	mov	r2, r1
 8003f82:	80fb      	strh	r3, [r7, #6]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f8c:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 8003f92:	2134      	movs	r1, #52	; 0x34
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3348      	adds	r3, #72	; 0x48
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d115      	bne.n	8003fce <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 8003fa2:	4b46      	ldr	r3, [pc, #280]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 8003fa8:	2134      	movs	r1, #52	; 0x34
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	335c      	adds	r3, #92	; 0x5c
 8003fb2:	681c      	ldr	r4, [r3, #0]
 8003fb4:	88bd      	ldrh	r5, [r7, #4]
 8003fb6:	f7ff fee5 	bl	8003d84 <BSP_LCD_GetXSize>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	fb03 f205 	mul.w	r2, r3, r5
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4423      	add	r3, r4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e070      	b.n	80040b0 <BSP_LCD_ReadPixel+0x138>
  }
  else if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a3b      	ldr	r2, [pc, #236]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 8003fd4:	2134      	movs	r1, #52	; 0x34
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	3348      	adds	r3, #72	; 0x48
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d117      	bne.n	8004014 <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 8003fea:	2134      	movs	r1, #52	; 0x34
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	335c      	adds	r3, #92	; 0x5c
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	88bd      	ldrh	r5, [r7, #4]
 8003ff8:	f7ff fec4 	bl	8003d84 <BSP_LCD_GetXSize>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	fb03 f205 	mul.w	r2, r3, r5
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4423      	add	r3, r4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e04d      	b.n	80040b0 <BSP_LCD_ReadPixel+0x138>
  }
  else if((hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8004014:	4b29      	ldr	r3, [pc, #164]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 800401a:	2134      	movs	r1, #52	; 0x34
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3348      	adds	r3, #72	; 0x48
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d015      	beq.n	8004056 <BSP_LCD_ReadPixel+0xde>
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 8004030:	2134      	movs	r1, #52	; 0x34
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3348      	adds	r3, #72	; 0x48
 800403a:	681b      	ldr	r3, [r3, #0]
  else if((hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 800403c:	2b04      	cmp	r3, #4
 800403e:	d00a      	beq.n	8004056 <BSP_LCD_ReadPixel+0xde>
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 8004046:	2134      	movs	r1, #52	; 0x34
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3348      	adds	r3, #72	; 0x48
 8004050:	681b      	ldr	r3, [r3, #0]
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004052:	2b07      	cmp	r3, #7
 8004054:	d116      	bne.n	8004084 <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 800405c:	2134      	movs	r1, #52	; 0x34
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	335c      	adds	r3, #92	; 0x5c
 8004066:	681c      	ldr	r4, [r3, #0]
 8004068:	88bd      	ldrh	r5, [r7, #4]
 800406a:	f7ff fe8b 	bl	8003d84 <BSP_LCD_GetXSize>
 800406e:	4603      	mov	r3, r0
 8004070:	fb03 f205 	mul.w	r2, r3, r5
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	4413      	add	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4423      	add	r3, r4
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e015      	b.n	80040b0 <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <BSP_LCD_ReadPixel+0x144>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0d      	ldr	r2, [pc, #52]	; (80040c0 <BSP_LCD_ReadPixel+0x148>)
 800408a:	2134      	movs	r1, #52	; 0x34
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	335c      	adds	r3, #92	; 0x5c
 8004094:	681c      	ldr	r4, [r3, #0]
 8004096:	88bd      	ldrh	r5, [r7, #4]
 8004098:	f7ff fe74 	bl	8003d84 <BSP_LCD_GetXSize>
 800409c:	4603      	mov	r3, r0
 800409e:	fb03 f205 	mul.w	r2, r3, r5
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	4413      	add	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4423      	add	r3, r4
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200017b4 	.word	0x200017b4
 80040c0:	2000a030 	.word	0x2000a030

080040c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <BSP_LCD_Clear+0x48>)
 80040ce:	681c      	ldr	r4, [r3, #0]
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <BSP_LCD_Clear+0x48>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0e      	ldr	r2, [pc, #56]	; (8004110 <BSP_LCD_Clear+0x4c>)
 80040d6:	2134      	movs	r1, #52	; 0x34
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	335c      	adds	r3, #92	; 0x5c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461d      	mov	r5, r3
 80040e4:	f7ff fe4e 	bl	8003d84 <BSP_LCD_GetXSize>
 80040e8:	4606      	mov	r6, r0
 80040ea:	f7ff fe5f 	bl	8003dac <BSP_LCD_GetYSize>
 80040ee:	4602      	mov	r2, r0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	4632      	mov	r2, r6
 80040fc:	4629      	mov	r1, r5
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 fe06 	bl	8004d10 <LL_FillBuffer>
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410c:	200017b4 	.word	0x200017b4
 8004110:	2000a030 	.word	0x2000a030

08004114 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
 800411e:	460b      	mov	r3, r1
 8004120:	80bb      	strh	r3, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <BSP_LCD_DisplayChar+0x80>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	491b      	ldr	r1, [pc, #108]	; (8004198 <BSP_LCD_DisplayChar+0x84>)
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3308      	adds	r3, #8
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <BSP_LCD_DisplayChar+0x80>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4c14      	ldr	r4, [pc, #80]	; (8004198 <BSP_LCD_DisplayChar+0x84>)
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4423      	add	r3, r4
 8004152:	3308      	adds	r3, #8
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004158:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <BSP_LCD_DisplayChar+0x80>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4c0d      	ldr	r4, [pc, #52]	; (8004198 <BSP_LCD_DisplayChar+0x84>)
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4423      	add	r3, r4
 800416c:	3308      	adds	r3, #8
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	889b      	ldrh	r3, [r3, #4]
 8004172:	3307      	adds	r3, #7
 8004174:	2b00      	cmp	r3, #0
 8004176:	da00      	bge.n	800417a <BSP_LCD_DisplayChar+0x66>
 8004178:	3307      	adds	r3, #7
 800417a:	10db      	asrs	r3, r3, #3
 800417c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004180:	18ca      	adds	r2, r1, r3
 8004182:	88b9      	ldrh	r1, [r7, #4]
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fd0a 	bl	8004ba0 <DrawChar>
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}
 8004194:	200017b4 	.word	0x200017b4
 8004198:	200017b8 	.word	0x200017b8

0800419c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60ba      	str	r2, [r7, #8]
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	81fb      	strh	r3, [r7, #14]
 80041aa:	460b      	mov	r3, r1
 80041ac:	81bb      	strh	r3, [r7, #12]
 80041ae:	4613      	mov	r3, r2
 80041b0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80041b2:	2301      	movs	r3, #1
 80041b4:	83fb      	strh	r3, [r7, #30]
 80041b6:	2300      	movs	r3, #0
 80041b8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80041ba:	2300      	movs	r3, #0
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80041c6:	e002      	b.n	80041ce <BSP_LCD_DisplayStringAt+0x32>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	617a      	str	r2, [r7, #20]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f6      	bne.n	80041c8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80041da:	f7ff fdd3 	bl	8003d84 <BSP_LCD_GetXSize>
 80041de:	4b4f      	ldr	r3, [pc, #316]	; (800431c <BSP_LCD_DisplayStringAt+0x180>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	494f      	ldr	r1, [pc, #316]	; (8004320 <BSP_LCD_DisplayStringAt+0x184>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	3308      	adds	r3, #8
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	889b      	ldrh	r3, [r3, #4]
 80041f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f8:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d01c      	beq.n	800423a <BSP_LCD_DisplayStringAt+0x9e>
 8004200:	2b03      	cmp	r3, #3
 8004202:	d017      	beq.n	8004234 <BSP_LCD_DisplayStringAt+0x98>
 8004204:	2b01      	cmp	r3, #1
 8004206:	d12e      	bne.n	8004266 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	1ad1      	subs	r1, r2, r3
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <BSP_LCD_DisplayStringAt+0x180>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4843      	ldr	r0, [pc, #268]	; (8004320 <BSP_LCD_DisplayStringAt+0x184>)
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4403      	add	r3, r0
 800421e:	3308      	adds	r3, #8
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	889b      	ldrh	r3, [r3, #4]
 8004224:	fb03 f301 	mul.w	r3, r3, r1
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	4413      	add	r3, r2
 8004230:	83fb      	strh	r3, [r7, #30]
      break;
 8004232:	e01b      	b.n	800426c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004234:	89fb      	ldrh	r3, [r7, #14]
 8004236:	83fb      	strh	r3, [r7, #30]
      break;
 8004238:	e018      	b.n	800426c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	b299      	uxth	r1, r3
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <BSP_LCD_DisplayStringAt+0x180>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4836      	ldr	r0, [pc, #216]	; (8004320 <BSP_LCD_DisplayStringAt+0x184>)
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4403      	add	r3, r0
 8004252:	3308      	adds	r3, #8
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	889b      	ldrh	r3, [r3, #4]
 8004258:	fb11 f303 	smulbb	r3, r1, r3
 800425c:	b29a      	uxth	r2, r3
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	83fb      	strh	r3, [r7, #30]
      break;
 8004264:	e002      	b.n	800426c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8004266:	89fb      	ldrh	r3, [r7, #14]
 8004268:	83fb      	strh	r3, [r7, #30]
      break;
 800426a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800426c:	8bfb      	ldrh	r3, [r7, #30]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <BSP_LCD_DisplayStringAt+0xde>
 8004272:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da1d      	bge.n	80042b6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800427e:	e01a      	b.n	80042b6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	89b9      	ldrh	r1, [r7, #12]
 8004286:	8bfb      	ldrh	r3, [r7, #30]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff43 	bl	8004114 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800428e:	4b23      	ldr	r3, [pc, #140]	; (800431c <BSP_LCD_DisplayStringAt+0x180>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4923      	ldr	r1, [pc, #140]	; (8004320 <BSP_LCD_DisplayStringAt+0x184>)
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3308      	adds	r3, #8
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	889a      	ldrh	r2, [r3, #4]
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	4413      	add	r3, r2
 80042a8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
    i++;
 80042b0:	8bbb      	ldrh	r3, [r7, #28]
 80042b2:	3301      	adds	r3, #1
 80042b4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2dc      	uxtb	r4, r3
 80042c4:	f7ff fd5e 	bl	8003d84 <BSP_LCD_GetXSize>
 80042c8:	4605      	mov	r5, r0
 80042ca:	8bb9      	ldrh	r1, [r7, #28]
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <BSP_LCD_DisplayStringAt+0x180>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4813      	ldr	r0, [pc, #76]	; (8004320 <BSP_LCD_DisplayStringAt+0x184>)
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4403      	add	r3, r0
 80042dc:	3308      	adds	r3, #8
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	889b      	ldrh	r3, [r3, #4]
 80042e2:	fb03 f301 	mul.w	r3, r3, r1
 80042e6:	1aeb      	subs	r3, r5, r3
 80042e8:	b299      	uxth	r1, r3
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <BSP_LCD_DisplayStringAt+0x180>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	480c      	ldr	r0, [pc, #48]	; (8004320 <BSP_LCD_DisplayStringAt+0x184>)
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4403      	add	r3, r0
 80042fa:	3308      	adds	r3, #8
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	889b      	ldrh	r3, [r3, #4]
 8004300:	4299      	cmp	r1, r3
 8004302:	bf2c      	ite	cs
 8004304:	2301      	movcs	r3, #1
 8004306:	2300      	movcc	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	4023      	ands	r3, r4
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1b6      	bne.n	8004280 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8004312:	bf00      	nop
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bdb0      	pop	{r4, r5, r7, pc}
 800431a:	bf00      	nop
 800431c:	200017b4 	.word	0x200017b4
 8004320:	200017b8 	.word	0x200017b8

08004324 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004330:	f7ff fe0c 	bl	8003f4c <BSP_LCD_GetFont>
 8004334:	4603      	mov	r3, r0
 8004336:	88db      	ldrh	r3, [r3, #6]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	fb12 f303 	smulbb	r3, r2, r3
 800433e:	b299      	uxth	r1, r3
 8004340:	2303      	movs	r3, #3
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	2000      	movs	r0, #0
 8004346:	f7ff ff29 	bl	800419c <BSP_LCD_DisplayStringAt>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af02      	add	r7, sp, #8
 800435a:	4603      	mov	r3, r0
 800435c:	80fb      	strh	r3, [r7, #6]
 800435e:	460b      	mov	r3, r1
 8004360:	80bb      	strh	r3, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <BSP_LCD_DrawHLine+0xb0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a26      	ldr	r2, [pc, #152]	; (8004408 <BSP_LCD_DrawHLine+0xb4>)
 8004370:	2134      	movs	r1, #52	; 0x34
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	3348      	adds	r3, #72	; 0x48
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d114      	bne.n	80043aa <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004380:	4b20      	ldr	r3, [pc, #128]	; (8004404 <BSP_LCD_DrawHLine+0xb0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <BSP_LCD_DrawHLine+0xb4>)
 8004386:	2134      	movs	r1, #52	; 0x34
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	335c      	adds	r3, #92	; 0x5c
 8004390:	681c      	ldr	r4, [r3, #0]
 8004392:	f7ff fcf7 	bl	8003d84 <BSP_LCD_GetXSize>
 8004396:	4602      	mov	r2, r0
 8004398:	88bb      	ldrh	r3, [r7, #4]
 800439a:	fb03 f202 	mul.w	r2, r3, r2
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	4413      	add	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4423      	add	r3, r4
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e013      	b.n	80043d2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <BSP_LCD_DrawHLine+0xb0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <BSP_LCD_DrawHLine+0xb4>)
 80043b0:	2134      	movs	r1, #52	; 0x34
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	335c      	adds	r3, #92	; 0x5c
 80043ba:	681c      	ldr	r4, [r3, #0]
 80043bc:	f7ff fce2 	bl	8003d84 <BSP_LCD_GetXSize>
 80043c0:	4602      	mov	r2, r0
 80043c2:	88bb      	ldrh	r3, [r7, #4]
 80043c4:	fb03 f202 	mul.w	r2, r3, r2
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4423      	add	r3, r4
 80043d0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <BSP_LCD_DrawHLine+0xb0>)
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	68fc      	ldr	r4, [r7, #12]
 80043d8:	887d      	ldrh	r5, [r7, #2]
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <BSP_LCD_DrawHLine+0xb0>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	490b      	ldr	r1, [pc, #44]	; (800440c <BSP_LCD_DrawHLine+0xb8>)
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2301      	movs	r3, #1
 80043f4:	462a      	mov	r2, r5
 80043f6:	4621      	mov	r1, r4
 80043f8:	f000 fc8a 	bl	8004d10 <LL_FillBuffer>
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bdb0      	pop	{r4, r5, r7, pc}
 8004404:	200017b4 	.word	0x200017b4
 8004408:	2000a030 	.word	0x2000a030
 800440c:	200017b8 	.word	0x200017b8

08004410 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	b087      	sub	sp, #28
 8004414:	af02      	add	r7, sp, #8
 8004416:	4603      	mov	r3, r0
 8004418:	80fb      	strh	r3, [r7, #6]
 800441a:	460b      	mov	r3, r1
 800441c:	80bb      	strh	r3, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <BSP_LCD_DrawVLine+0xb8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a28      	ldr	r2, [pc, #160]	; (80044cc <BSP_LCD_DrawVLine+0xbc>)
 800442c:	2134      	movs	r1, #52	; 0x34
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3348      	adds	r3, #72	; 0x48
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d114      	bne.n	8004466 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <BSP_LCD_DrawVLine+0xb8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <BSP_LCD_DrawVLine+0xbc>)
 8004442:	2134      	movs	r1, #52	; 0x34
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	335c      	adds	r3, #92	; 0x5c
 800444c:	681c      	ldr	r4, [r3, #0]
 800444e:	f7ff fc99 	bl	8003d84 <BSP_LCD_GetXSize>
 8004452:	4602      	mov	r2, r0
 8004454:	88bb      	ldrh	r3, [r7, #4]
 8004456:	fb03 f202 	mul.w	r2, r3, r2
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	4413      	add	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4423      	add	r3, r4
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e013      	b.n	800448e <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <BSP_LCD_DrawVLine+0xb8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <BSP_LCD_DrawVLine+0xbc>)
 800446c:	2134      	movs	r1, #52	; 0x34
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	335c      	adds	r3, #92	; 0x5c
 8004476:	681c      	ldr	r4, [r3, #0]
 8004478:	f7ff fc84 	bl	8003d84 <BSP_LCD_GetXSize>
 800447c:	4602      	mov	r2, r0
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	fb03 f202 	mul.w	r2, r3, r2
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4423      	add	r3, r4
 800448c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <BSP_LCD_DrawVLine+0xb8>)
 8004490:	681c      	ldr	r4, [r3, #0]
 8004492:	68fd      	ldr	r5, [r7, #12]
 8004494:	887e      	ldrh	r6, [r7, #2]
 8004496:	f7ff fc75 	bl	8003d84 <BSP_LCD_GetXSize>
 800449a:	4603      	mov	r3, r0
 800449c:	1e59      	subs	r1, r3, #1
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <BSP_LCD_DrawVLine+0xb8>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	480b      	ldr	r0, [pc, #44]	; (80044d0 <BSP_LCD_DrawVLine+0xc0>)
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4403      	add	r3, r0
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	9100      	str	r1, [sp, #0]
 80044b4:	4633      	mov	r3, r6
 80044b6:	2201      	movs	r2, #1
 80044b8:	4629      	mov	r1, r5
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 fc28 	bl	8004d10 <LL_FillBuffer>
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c8:	200017b4 	.word	0x200017b4
 80044cc:	2000a030 	.word	0x2000a030
 80044d0:	200017b8 	.word	0x200017b8

080044d4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
 80044de:	460b      	mov	r3, r1
 80044e0:	80bb      	strh	r3, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80044e6:	887b      	ldrh	r3, [r7, #2]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	f1c3 0303 	rsb	r3, r3, #3
 80044ee:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80044f8:	e0cf      	b.n	800469a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	4413      	add	r3, r2
 8004502:	b298      	uxth	r0, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	b29b      	uxth	r3, r3
 8004508:	88ba      	ldrh	r2, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	b29c      	uxth	r4, r3
 800450e:	4b67      	ldr	r3, [pc, #412]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4967      	ldr	r1, [pc, #412]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4621      	mov	r1, r4
 8004524:	f000 f8c6 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	b29b      	uxth	r3, r3
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	b298      	uxth	r0, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	b29b      	uxth	r3, r3
 8004536:	88ba      	ldrh	r2, [r7, #4]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	b29c      	uxth	r4, r3
 800453c:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	495b      	ldr	r1, [pc, #364]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	4621      	mov	r1, r4
 8004552:	f000 f8af 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	b29a      	uxth	r2, r3
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	4413      	add	r3, r2
 800455e:	b298      	uxth	r0, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	b29b      	uxth	r3, r3
 8004564:	88ba      	ldrh	r2, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	b29c      	uxth	r4, r3
 800456a:	4b50      	ldr	r3, [pc, #320]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4950      	ldr	r1, [pc, #320]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	4621      	mov	r1, r4
 8004580:	f000 f898 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	b29b      	uxth	r3, r3
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	b298      	uxth	r0, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	b29b      	uxth	r3, r3
 8004592:	88ba      	ldrh	r2, [r7, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	b29c      	uxth	r4, r3
 8004598:	4b44      	ldr	r3, [pc, #272]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4944      	ldr	r1, [pc, #272]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	4621      	mov	r1, r4
 80045ae:	f000 f881 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4413      	add	r3, r2
 80045ba:	b298      	uxth	r0, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	88bb      	ldrh	r3, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	b29c      	uxth	r4, r3
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4939      	ldr	r1, [pc, #228]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	4621      	mov	r1, r4
 80045dc:	f000 f86a 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	b298      	uxth	r0, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	88bb      	ldrh	r3, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	b29c      	uxth	r4, r3
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	492d      	ldr	r1, [pc, #180]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	4621      	mov	r1, r4
 800460a:	f000 f853 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	b29a      	uxth	r2, r3
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	4413      	add	r3, r2
 8004616:	b298      	uxth	r0, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	b29a      	uxth	r2, r3
 800461c:	88bb      	ldrh	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	b29c      	uxth	r4, r3
 8004622:	4b22      	ldr	r3, [pc, #136]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4922      	ldr	r1, [pc, #136]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	4621      	mov	r1, r4
 8004638:	f000 f83c 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	b29b      	uxth	r3, r3
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b298      	uxth	r0, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	b29a      	uxth	r2, r3
 800464a:	88bb      	ldrh	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	b29c      	uxth	r4, r3
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <BSP_LCD_DrawCircle+0x1d8>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4916      	ldr	r1, [pc, #88]	; (80046b0 <BSP_LCD_DrawCircle+0x1dc>)
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4621      	mov	r1, r4
 8004666:	f000 f825 	bl	80046b4 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da06      	bge.n	800467e <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	3306      	adds	r3, #6
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e00a      	b.n	8004694 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	009a      	lsls	r2, r3, #2
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4413      	add	r3, r2
 800468a:	330a      	adds	r3, #10
 800468c:	617b      	str	r3, [r7, #20]
      current_y--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b01      	subs	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3301      	adds	r3, #1
 8004698:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	429a      	cmp	r2, r3
 80046a0:	f67f af2b 	bls.w	80044fa <BSP_LCD_DrawCircle+0x26>
  } 
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}
 80046ac:	200017b4 	.word	0x200017b4
 80046b0:	200017b8 	.word	0x200017b8

080046b4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80046b4:	b5b0      	push	{r4, r5, r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	603a      	str	r2, [r7, #0]
 80046be:	80fb      	strh	r3, [r7, #6]
 80046c0:	460b      	mov	r3, r1
 80046c2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <BSP_LCD_DrawPixel+0x88>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <BSP_LCD_DrawPixel+0x8c>)
 80046ca:	2134      	movs	r1, #52	; 0x34
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3348      	adds	r3, #72	; 0x48
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d116      	bne.n	8004708 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <BSP_LCD_DrawPixel+0x88>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a18      	ldr	r2, [pc, #96]	; (8004740 <BSP_LCD_DrawPixel+0x8c>)
 80046e0:	2134      	movs	r1, #52	; 0x34
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	335c      	adds	r3, #92	; 0x5c
 80046ea:	681c      	ldr	r4, [r3, #0]
 80046ec:	88bd      	ldrh	r5, [r7, #4]
 80046ee:	f7ff fb49 	bl	8003d84 <BSP_LCD_GetXSize>
 80046f2:	4603      	mov	r3, r0
 80046f4:	fb03 f205 	mul.w	r2, r3, r5
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	4413      	add	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4423      	add	r3, r4
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	b292      	uxth	r2, r2
 8004704:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004706:	e015      	b.n	8004734 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <BSP_LCD_DrawPixel+0x88>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <BSP_LCD_DrawPixel+0x8c>)
 800470e:	2134      	movs	r1, #52	; 0x34
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	335c      	adds	r3, #92	; 0x5c
 8004718:	681c      	ldr	r4, [r3, #0]
 800471a:	88bd      	ldrh	r5, [r7, #4]
 800471c:	f7ff fb32 	bl	8003d84 <BSP_LCD_GetXSize>
 8004720:	4603      	mov	r3, r0
 8004722:	fb03 f205 	mul.w	r2, r3, r5
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4423      	add	r3, r4
 800472e:	461a      	mov	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bdb0      	pop	{r4, r5, r7, pc}
 800473c:	200017b4 	.word	0x200017b4
 8004740:	2000a030 	.word	0x2000a030

08004744 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af02      	add	r7, sp, #8
 800474c:	4604      	mov	r4, r0
 800474e:	4608      	mov	r0, r1
 8004750:	4611      	mov	r1, r2
 8004752:	461a      	mov	r2, r3
 8004754:	4623      	mov	r3, r4
 8004756:	80fb      	strh	r3, [r7, #6]
 8004758:	4603      	mov	r3, r0
 800475a:	80bb      	strh	r3, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
 8004760:	4613      	mov	r3, r2
 8004762:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <BSP_LCD_FillRect+0xe8>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4930      	ldr	r1, [pc, #192]	; (8004830 <BSP_LCD_FillRect+0xec>)
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fb9a 	bl	8003eb4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <BSP_LCD_FillRect+0xe8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <BSP_LCD_FillRect+0xf0>)
 8004786:	2134      	movs	r1, #52	; 0x34
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3348      	adds	r3, #72	; 0x48
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d114      	bne.n	80047c0 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004796:	4b25      	ldr	r3, [pc, #148]	; (800482c <BSP_LCD_FillRect+0xe8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <BSP_LCD_FillRect+0xf0>)
 800479c:	2134      	movs	r1, #52	; 0x34
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	335c      	adds	r3, #92	; 0x5c
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	f7ff faec 	bl	8003d84 <BSP_LCD_GetXSize>
 80047ac:	4602      	mov	r2, r0
 80047ae:	88bb      	ldrh	r3, [r7, #4]
 80047b0:	fb03 f202 	mul.w	r2, r3, r2
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	4413      	add	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4423      	add	r3, r4
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e013      	b.n	80047e8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <BSP_LCD_FillRect+0xe8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <BSP_LCD_FillRect+0xf0>)
 80047c6:	2134      	movs	r1, #52	; 0x34
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	335c      	adds	r3, #92	; 0x5c
 80047d0:	681c      	ldr	r4, [r3, #0]
 80047d2:	f7ff fad7 	bl	8003d84 <BSP_LCD_GetXSize>
 80047d6:	4602      	mov	r2, r0
 80047d8:	88bb      	ldrh	r3, [r7, #4]
 80047da:	fb03 f202 	mul.w	r2, r3, r2
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4423      	add	r3, r4
 80047e6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <BSP_LCD_FillRect+0xe8>)
 80047ea:	681c      	ldr	r4, [r3, #0]
 80047ec:	68fd      	ldr	r5, [r7, #12]
 80047ee:	887e      	ldrh	r6, [r7, #2]
 80047f0:	f8b7 8000 	ldrh.w	r8, [r7]
 80047f4:	f7ff fac6 	bl	8003d84 <BSP_LCD_GetXSize>
 80047f8:	4602      	mov	r2, r0
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	1ad1      	subs	r1, r2, r3
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <BSP_LCD_FillRect+0xe8>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	480b      	ldr	r0, [pc, #44]	; (8004830 <BSP_LCD_FillRect+0xec>)
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4403      	add	r3, r0
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	9100      	str	r1, [sp, #0]
 8004814:	4643      	mov	r3, r8
 8004816:	4632      	mov	r2, r6
 8004818:	4629      	mov	r1, r5
 800481a:	4620      	mov	r0, r4
 800481c:	f000 fa78 	bl	8004d10 <LL_FillBuffer>
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800482a:	bf00      	nop
 800482c:	200017b4 	.word	0x200017b4
 8004830:	200017b8 	.word	0x200017b8
 8004834:	2000a030 	.word	0x2000a030

08004838 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	80fb      	strh	r3, [r7, #6]
 8004842:	460b      	mov	r3, r1
 8004844:	80bb      	strh	r3, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	f1c3 0303 	rsb	r3, r3, #3
 8004852:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800485c:	4b44      	ldr	r3, [pc, #272]	; (8004970 <BSP_LCD_FillCircle+0x138>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4944      	ldr	r1, [pc, #272]	; (8004974 <BSP_LCD_FillCircle+0x13c>)
 8004862:	4613      	mov	r3, r2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fb20 	bl	8003eb4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004874:	e061      	b.n	800493a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d021      	beq.n	80048c0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	b29b      	uxth	r3, r3
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	b298      	uxth	r0, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	b29a      	uxth	r2, r3
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	b299      	uxth	r1, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	b29b      	uxth	r3, r3
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	f7ff fd5b 	bl	8004354 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	b298      	uxth	r0, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	88ba      	ldrh	r2, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	b299      	uxth	r1, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	f7ff fd4a 	bl	8004354 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d021      	beq.n	800490a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	b298      	uxth	r0, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	88ba      	ldrh	r2, [r7, #4]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b299      	uxth	r1, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7ff fd36 	bl	8004354 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	b298      	uxth	r0, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	88bb      	ldrh	r3, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	b299      	uxth	r1, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	f7ff fd25 	bl	8004354 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	da06      	bge.n	800491e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	009a      	lsls	r2, r3, #2
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	3306      	adds	r3, #6
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e00a      	b.n	8004934 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	009a      	lsls	r2, r3, #2
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	4413      	add	r3, r2
 800492a:	330a      	adds	r3, #10
 800492c:	617b      	str	r3, [r7, #20]
      current_y--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b01      	subs	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	3301      	adds	r3, #1
 8004938:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	429a      	cmp	r2, r3
 8004940:	d999      	bls.n	8004876 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <BSP_LCD_FillCircle+0x138>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	490b      	ldr	r1, [pc, #44]	; (8004974 <BSP_LCD_FillCircle+0x13c>)
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff faad 	bl	8003eb4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	88b9      	ldrh	r1, [r7, #4]
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fdb7 	bl	80044d4 <BSP_LCD_DrawCircle>
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200017b4 	.word	0x200017b4
 8004974:	200017b8 	.word	0x200017b8

08004978 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <BSP_LCD_DisplayOn+0x30>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <BSP_LCD_DisplayOn+0x30>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800498c:	2201      	movs	r2, #1
 800498e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004992:	4806      	ldr	r0, [pc, #24]	; (80049ac <BSP_LCD_DisplayOn+0x34>)
 8004994:	f003 f980 	bl	8007c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004998:	2201      	movs	r2, #1
 800499a:	2108      	movs	r1, #8
 800499c:	4804      	ldr	r0, [pc, #16]	; (80049b0 <BSP_LCD_DisplayOn+0x38>)
 800499e:	f003 f97b 	bl	8007c98 <HAL_GPIO_WritePin>
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000a030 	.word	0x2000a030
 80049ac:	40022000 	.word	0x40022000
 80049b0:	40022800 	.word	0x40022800

080049b4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b090      	sub	sp, #64	; 0x40
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80049be:	4b64      	ldr	r3, [pc, #400]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a63      	ldr	r2, [pc, #396]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80049d6:	4b5e      	ldr	r3, [pc, #376]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	4a5d      	ldr	r2, [pc, #372]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049e0:	6313      	str	r3, [r2, #48]	; 0x30
 80049e2:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049ee:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4a57      	ldr	r2, [pc, #348]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049f4:	f043 0310 	orr.w	r3, r3, #16
 80049f8:	6313      	str	r3, [r2, #48]	; 0x30
 80049fa:	4b55      	ldr	r3, [pc, #340]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a06:	4b52      	ldr	r3, [pc, #328]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	4a51      	ldr	r2, [pc, #324]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a10:	6313      	str	r3, [r2, #48]	; 0x30
 8004a12:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a1e:	4b4c      	ldr	r3, [pc, #304]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a4b      	ldr	r2, [pc, #300]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	4b49      	ldr	r3, [pc, #292]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004a36:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	4a45      	ldr	r2, [pc, #276]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a40:	6313      	str	r3, [r2, #48]	; 0x30
 8004a42:	4b43      	ldr	r3, [pc, #268]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004a4e:	4b40      	ldr	r3, [pc, #256]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4a3f      	ldr	r2, [pc, #252]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a58:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004a66:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004a7e:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a33      	ldr	r2, [pc, #204]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <BSP_LCD_MspInit+0x19c>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004a96:	2310      	movs	r3, #16
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004aa6:	230e      	movs	r3, #14
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4828      	ldr	r0, [pc, #160]	; (8004b54 <BSP_LCD_MspInit+0x1a0>)
 8004ab2:	f002 fe25 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004ac0:	2309      	movs	r3, #9
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4823      	ldr	r0, [pc, #140]	; (8004b58 <BSP_LCD_MspInit+0x1a4>)
 8004acc:	f002 fe18 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004ad0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004ada:	230e      	movs	r3, #14
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	481d      	ldr	r0, [pc, #116]	; (8004b5c <BSP_LCD_MspInit+0x1a8>)
 8004ae6:	f002 fe0b 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004aea:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004af4:	230e      	movs	r3, #14
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004afc:	4619      	mov	r1, r3
 8004afe:	4818      	ldr	r0, [pc, #96]	; (8004b60 <BSP_LCD_MspInit+0x1ac>)
 8004b00:	f002 fdfe 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004b04:	23f7      	movs	r3, #247	; 0xf7
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004b0c:	230e      	movs	r3, #14
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b14:	4619      	mov	r1, r3
 8004b16:	4813      	ldr	r0, [pc, #76]	; (8004b64 <BSP_LCD_MspInit+0x1b0>)
 8004b18:	f002 fdf2 	bl	8007700 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b22:	2301      	movs	r3, #1
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	480b      	ldr	r0, [pc, #44]	; (8004b5c <BSP_LCD_MspInit+0x1a8>)
 8004b2e:	f002 fde7 	bl	8007700 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004b32:	2308      	movs	r3, #8
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b36:	2301      	movs	r3, #1
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4808      	ldr	r0, [pc, #32]	; (8004b64 <BSP_LCD_MspInit+0x1b0>)
 8004b42:	f002 fddd 	bl	8007700 <HAL_GPIO_Init>
}
 8004b46:	bf00      	nop
 8004b48:	3740      	adds	r7, #64	; 0x40
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40021800 	.word	0x40021800
 8004b5c:	40022000 	.word	0x40022000
 8004b60:	40022400 	.word	0x40022400
 8004b64:	40022800 	.word	0x40022800

08004b68 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <BSP_LCD_ClockConfig+0x34>)
 8004b74:	2208      	movs	r2, #8
 8004b76:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <BSP_LCD_ClockConfig+0x34>)
 8004b7a:	22c0      	movs	r2, #192	; 0xc0
 8004b7c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <BSP_LCD_ClockConfig+0x34>)
 8004b80:	2205      	movs	r2, #5
 8004b82:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <BSP_LCD_ClockConfig+0x34>)
 8004b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004b8c:	4803      	ldr	r0, [pc, #12]	; (8004b9c <BSP_LCD_ClockConfig+0x34>)
 8004b8e:	f004 fee5 	bl	800995c <HAL_RCCEx_PeriphCLKConfig>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200017d0 	.word	0x200017d0

08004ba0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	603a      	str	r2, [r7, #0]
 8004baa:	80fb      	strh	r3, [r7, #6]
 8004bac:	460b      	mov	r3, r1
 8004bae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <DrawChar+0x168>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4953      	ldr	r1, [pc, #332]	; (8004d0c <DrawChar+0x16c>)
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3308      	adds	r3, #8
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	88db      	ldrh	r3, [r3, #6]
 8004bce:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004bd0:	4b4d      	ldr	r3, [pc, #308]	; (8004d08 <DrawChar+0x168>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	494d      	ldr	r1, [pc, #308]	; (8004d0c <DrawChar+0x16c>)
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3308      	adds	r3, #8
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	889b      	ldrh	r3, [r3, #4]
 8004be6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004be8:	8a3b      	ldrh	r3, [r7, #16]
 8004bea:	3307      	adds	r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	da00      	bge.n	8004bf2 <DrawChar+0x52>
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	10db      	asrs	r3, r3, #3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	8a3b      	ldrh	r3, [r7, #16]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	e076      	b.n	8004cf6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004c08:	8a3b      	ldrh	r3, [r7, #16]
 8004c0a:	3307      	adds	r3, #7
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	da00      	bge.n	8004c12 <DrawChar+0x72>
 8004c10:	3307      	adds	r3, #7
 8004c12:	10db      	asrs	r3, r3, #3
 8004c14:	461a      	mov	r2, r3
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	fb03 f302 	mul.w	r3, r3, r2
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	4413      	add	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004c22:	8a3b      	ldrh	r3, [r7, #16]
 8004c24:	3307      	adds	r3, #7
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da00      	bge.n	8004c2c <DrawChar+0x8c>
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	10db      	asrs	r3, r3, #3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d002      	beq.n	8004c38 <DrawChar+0x98>
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d004      	beq.n	8004c40 <DrawChar+0xa0>
 8004c36:	e00c      	b.n	8004c52 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	617b      	str	r3, [r7, #20]
      break;
 8004c3e:	e016      	b.n	8004c6e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	3201      	adds	r2, #1
 8004c4a:	7812      	ldrb	r2, [r2, #0]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
      break;
 8004c50:	e00d      	b.n	8004c6e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	041a      	lsls	r2, r3, #16
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	4313      	orrs	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	3202      	adds	r2, #2
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
      break;
 8004c6c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e036      	b.n	8004ce2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004c74:	8a3a      	ldrh	r2, [r7, #16]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	1ad2      	subs	r2, r2, r3
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	2201      	movs	r2, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d012      	beq.n	8004cb6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	4413      	add	r3, r2
 8004c98:	b298      	uxth	r0, r3
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <DrawChar+0x168>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	491b      	ldr	r1, [pc, #108]	; (8004d0c <DrawChar+0x16c>)
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	88bb      	ldrh	r3, [r7, #4]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f7ff fd00 	bl	80046b4 <BSP_LCD_DrawPixel>
 8004cb4:	e012      	b.n	8004cdc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	b298      	uxth	r0, r3
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <DrawChar+0x168>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4911      	ldr	r1, [pc, #68]	; (8004d0c <DrawChar+0x16c>)
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	88bb      	ldrh	r3, [r7, #4]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f7ff fcec 	bl	80046b4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	8a3b      	ldrh	r3, [r7, #16]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3c4      	bcc.n	8004c74 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004cea:	88bb      	ldrh	r3, [r7, #4]
 8004cec:	3301      	adds	r3, #1
 8004cee:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	8a7b      	ldrh	r3, [r7, #18]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d384      	bcc.n	8004c08 <DrawChar+0x68>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200017b4 	.word	0x200017b4
 8004d0c:	200017b8 	.word	0x200017b8

08004d10 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004d24:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <LL_FillBuffer+0x8c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <LL_FillBuffer+0x90>)
 8004d2c:	2134      	movs	r1, #52	; 0x34
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	3348      	adds	r3, #72	; 0x48
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d103      	bne.n	8004d44 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004d3c:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d3e:	2202      	movs	r2, #2
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	e002      	b.n	8004d4a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004d44:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d52:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <LL_FillBuffer+0x94>)
 8004d54:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004d56:	4810      	ldr	r0, [pc, #64]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d58:	f002 fa46 	bl	80071e8 <HAL_DMA2D_Init>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d115      	bne.n	8004d8e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	480c      	ldr	r0, [pc, #48]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d66:	f002 fb9d 	bl	80074a4 <HAL_DMA2D_ConfigLayer>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10e      	bne.n	8004d8e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69f9      	ldr	r1, [r7, #28]
 8004d7a:	4807      	ldr	r0, [pc, #28]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d7c:	f002 fa7e 	bl	800727c <HAL_DMA2D_Start>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004d86:	210a      	movs	r1, #10
 8004d88:	4803      	ldr	r0, [pc, #12]	; (8004d98 <LL_FillBuffer+0x88>)
 8004d8a:	f002 faa2 	bl	80072d2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20001774 	.word	0x20001774
 8004d9c:	200017b4 	.word	0x200017b4
 8004da0:	2000a030 	.word	0x2000a030
 8004da4:	4002b000 	.word	0x4002b000

08004da8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004dac:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004dae:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <BSP_SDRAM_Init+0xb0>)
 8004db0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004db2:	4b2a      	ldr	r3, [pc, #168]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004db4:	2202      	movs	r2, #2
 8004db6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004dba:	2207      	movs	r2, #7
 8004dbc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004dcc:	2202      	movs	r2, #2
 8004dce:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004dd0:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004dd6:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004dd8:	2202      	movs	r2, #2
 8004dda:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004de8:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004dea:	2204      	movs	r2, #4
 8004dec:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004dee:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004df0:	2210      	movs	r2, #16
 8004df2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e00:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004e08:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e0e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004e10:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004e12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004e1e:	2100      	movs	r1, #0
 8004e20:	480c      	ldr	r0, [pc, #48]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004e22:	f000 f87f 	bl	8004f24 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004e26:	490d      	ldr	r1, [pc, #52]	; (8004e5c <BSP_SDRAM_Init+0xb4>)
 8004e28:	480a      	ldr	r0, [pc, #40]	; (8004e54 <BSP_SDRAM_Init+0xac>)
 8004e2a:	f005 fd47 	bl	800a8bc <HAL_SDRAM_Init>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <BSP_SDRAM_Init+0xb8>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <BSP_SDRAM_Init+0xb8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004e42:	f240 6003 	movw	r0, #1539	; 0x603
 8004e46:	f000 f80d 	bl	8004e64 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <BSP_SDRAM_Init+0xb8>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2000a0d8 	.word	0x2000a0d8
 8004e58:	a0000140 	.word	0xa0000140
 8004e5c:	20001854 	.word	0x20001854
 8004e60:	200013b0 	.word	0x200013b0

08004e64 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004e70:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e76:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e78:	2210      	movs	r2, #16
 8004e7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e8c:	4923      	ldr	r1, [pc, #140]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e8e:	4824      	ldr	r0, [pc, #144]	; (8004f20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e90:	f005 fd48 	bl	800a924 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004e94:	2001      	movs	r0, #1
 8004e96:	f001 fa1d 	bl	80062d4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ea2:	2210      	movs	r2, #16
 8004ea4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eb6:	4919      	ldr	r1, [pc, #100]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004eb8:	4819      	ldr	r0, [pc, #100]	; (8004f20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004eba:	f005 fd33 	bl	800a924 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ecc:	2208      	movs	r2, #8
 8004ece:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eda:	4910      	ldr	r1, [pc, #64]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004edc:	4810      	ldr	r0, [pc, #64]	; (8004f20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ede:	f005 fd21 	bl	800a924 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004ee2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004ee6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004eea:	2204      	movs	r2, #4
 8004eec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004efe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f04:	4905      	ldr	r1, [pc, #20]	; (8004f1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f06:	4806      	ldr	r0, [pc, #24]	; (8004f20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f08:	f005 fd0c 	bl	800a924 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4804      	ldr	r0, [pc, #16]	; (8004f20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f10:	f005 fd33 	bl	800a97a <HAL_SDRAM_ProgramRefreshRate>
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20001870 	.word	0x20001870
 8004f20:	2000a0d8 	.word	0x2000a0d8

08004f24 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b090      	sub	sp, #64	; 0x40
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004f2e:	4b70      	ldr	r3, [pc, #448]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	4a6f      	ldr	r2, [pc, #444]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6393      	str	r3, [r2, #56]	; 0x38
 8004f3a:	4b6d      	ldr	r3, [pc, #436]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004f46:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b67      	ldr	r3, [pc, #412]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5e:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6a:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f76:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f7c:	f043 0308 	orr.w	r3, r3, #8
 8004f80:	6313      	str	r3, [r2, #48]	; 0x30
 8004f82:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f8e:	4b58      	ldr	r3, [pc, #352]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f94:	f043 0310 	orr.w	r3, r3, #16
 8004f98:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9a:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fa6:	4b52      	ldr	r3, [pc, #328]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	4a51      	ldr	r2, [pc, #324]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fac:	f043 0320 	orr.w	r3, r3, #32
 8004fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb2:	4b4f      	ldr	r3, [pc, #316]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004fbe:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	4a4b      	ldr	r2, [pc, #300]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fca:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fd6:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4a45      	ldr	r2, [pc, #276]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe2:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004ffe:	2308      	movs	r3, #8
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005006:	4619      	mov	r1, r3
 8005008:	483a      	ldr	r0, [pc, #232]	; (80050f4 <BSP_SDRAM_MspInit+0x1d0>)
 800500a:	f002 fb79 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800500e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005018:	4619      	mov	r1, r3
 800501a:	4837      	ldr	r0, [pc, #220]	; (80050f8 <BSP_SDRAM_MspInit+0x1d4>)
 800501c:	f002 fb70 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005020:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800502a:	4619      	mov	r1, r3
 800502c:	4833      	ldr	r0, [pc, #204]	; (80050fc <BSP_SDRAM_MspInit+0x1d8>)
 800502e:	f002 fb67 	bl	8007700 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005032:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800503c:	4619      	mov	r1, r3
 800503e:	4830      	ldr	r0, [pc, #192]	; (8005100 <BSP_SDRAM_MspInit+0x1dc>)
 8005040:	f002 fb5e 	bl	8007700 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005044:	f248 1333 	movw	r3, #33075	; 0x8133
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800504a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800504e:	4619      	mov	r1, r3
 8005050:	482c      	ldr	r0, [pc, #176]	; (8005104 <BSP_SDRAM_MspInit+0x1e0>)
 8005052:	f002 fb55 	bl	8007700 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005056:	2328      	movs	r3, #40	; 0x28
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800505a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800505e:	4619      	mov	r1, r3
 8005060:	4829      	ldr	r0, [pc, #164]	; (8005108 <BSP_SDRAM_MspInit+0x1e4>)
 8005062:	f002 fb4d 	bl	8007700 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 8005068:	2200      	movs	r2, #0
 800506a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800506c:	4b27      	ldr	r3, [pc, #156]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 800506e:	2280      	movs	r2, #128	; 0x80
 8005070:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 8005074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005078:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800507a:	4b24      	ldr	r3, [pc, #144]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 800507c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005080:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005082:	4b22      	ldr	r3, [pc, #136]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 8005084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005088:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 800508c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005090:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 8005094:	2200      	movs	r2, #0
 8005096:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 800509a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800509e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80050a0:	4b1a      	ldr	r3, [pc, #104]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80050a6:	4b19      	ldr	r3, [pc, #100]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050a8:	2203      	movs	r2, #3
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80050ac:	4b17      	ldr	r3, [pc, #92]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <BSP_SDRAM_MspInit+0x1ec>)
 80050bc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a12      	ldr	r2, [pc, #72]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
 80050c4:	4a11      	ldr	r2, [pc, #68]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80050ca:	4810      	ldr	r0, [pc, #64]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050cc:	f001 ff5c 	bl	8006f88 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80050d0:	480e      	ldr	r0, [pc, #56]	; (800510c <BSP_SDRAM_MspInit+0x1e8>)
 80050d2:	f001 feab 	bl	8006e2c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	210f      	movs	r1, #15
 80050da:	2038      	movs	r0, #56	; 0x38
 80050dc:	f001 fdae 	bl	8006c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80050e0:	2038      	movs	r0, #56	; 0x38
 80050e2:	f001 fdc7 	bl	8006c74 <HAL_NVIC_EnableIRQ>
}
 80050e6:	bf00      	nop
 80050e8:	3740      	adds	r7, #64	; 0x40
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020c00 	.word	0x40020c00
 80050fc:	40021000 	.word	0x40021000
 8005100:	40021400 	.word	0x40021400
 8005104:	40021800 	.word	0x40021800
 8005108:	40021c00 	.word	0x40021c00
 800510c:	20001880 	.word	0x20001880
 8005110:	40026410 	.word	0x40026410

08005114 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	460a      	mov	r2, r1
 800511e:	80fb      	strh	r3, [r7, #6]
 8005120:	4613      	mov	r3, r2
 8005122:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005128:	4a14      	ldr	r2, [pc, #80]	; (800517c <BSP_TS_Init+0x68>)
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800512e:	4a14      	ldr	r2, [pc, #80]	; (8005180 <BSP_TS_Init+0x6c>)
 8005130:	88bb      	ldrh	r3, [r7, #4]
 8005132:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005134:	4b13      	ldr	r3, [pc, #76]	; (8005184 <BSP_TS_Init+0x70>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2070      	movs	r0, #112	; 0x70
 800513a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <BSP_TS_Init+0x70>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2070      	movs	r0, #112	; 0x70
 8005142:	4798      	blx	r3
 8005144:	4603      	mov	r3, r0
 8005146:	2b51      	cmp	r3, #81	; 0x51
 8005148:	d111      	bne.n	800516e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <BSP_TS_Init+0x74>)
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <BSP_TS_Init+0x70>)
 800514e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <BSP_TS_Init+0x78>)
 8005152:	2270      	movs	r2, #112	; 0x70
 8005154:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <BSP_TS_Init+0x7c>)
 8005158:	2208      	movs	r2, #8
 800515a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <BSP_TS_Init+0x74>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <BSP_TS_Init+0x78>)
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	b292      	uxth	r2, r2
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	e001      	b.n	8005172 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800516e:	2303      	movs	r3, #3
 8005170:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	200018e4 	.word	0x200018e4
 8005180:	200018e6 	.word	0x200018e6
 8005184:	20000000 	.word	0x20000000
 8005188:	200018e0 	.word	0x200018e0
 800518c:	200018e9 	.word	0x200018e9
 8005190:	200018e8 	.word	0x200018e8

08005194 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b097      	sub	sp, #92	; 0x5c
 8005198:	af02      	add	r7, sp, #8
 800519a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80051ae:	4b97      	ldr	r3, [pc, #604]	; (800540c <BSP_TS_GetState+0x278>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	4a96      	ldr	r2, [pc, #600]	; (8005410 <BSP_TS_GetState+0x27c>)
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	b292      	uxth	r2, r2
 80051ba:	4610      	mov	r0, r2
 80051bc:	4798      	blx	r3
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 81a8 	beq.w	8005520 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d4:	e197      	b.n	8005506 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80051d6:	4b8d      	ldr	r3, [pc, #564]	; (800540c <BSP_TS_GetState+0x278>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	4a8c      	ldr	r2, [pc, #560]	; (8005410 <BSP_TS_GetState+0x27c>)
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	b290      	uxth	r0, r2
 80051e2:	f107 0120 	add.w	r1, r7, #32
 80051e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e8:	0052      	lsls	r2, r2, #1
 80051ea:	188c      	adds	r4, r1, r2
 80051ec:	f107 0114 	add.w	r1, r7, #20
 80051f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f2:	0052      	lsls	r2, r2, #1
 80051f4:	440a      	add	r2, r1
 80051f6:	4621      	mov	r1, r4
 80051f8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80051fa:	4b86      	ldr	r3, [pc, #536]	; (8005414 <BSP_TS_GetState+0x280>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d11b      	bne.n	800523a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8005202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800520a:	4413      	add	r3, r2
 800520c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005218:	440b      	add	r3, r1
 800521a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800521e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005226:	4413      	add	r3, r2
 8005228:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800522c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005234:	440b      	add	r3, r1
 8005236:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800523a:	4b76      	ldr	r3, [pc, #472]	; (8005414 <BSP_TS_GetState+0x280>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8005246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800524e:	4413      	add	r3, r2
 8005250:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005254:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005258:	b29a      	uxth	r2, r3
 800525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005262:	440b      	add	r3, r1
 8005264:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005268:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <BSP_TS_GetState+0x280>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d010      	beq.n	8005296 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8005274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800527c:	4413      	add	r3, r2
 800527e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005282:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005286:	b29a      	uxth	r2, r3
 8005288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005290:	440b      	add	r3, r1
 8005292:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005296:	4b5f      	ldr	r3, [pc, #380]	; (8005414 <BSP_TS_GetState+0x280>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01b      	beq.n	80052da <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80052aa:	4413      	add	r3, r2
 80052ac:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80052b8:	440b      	add	r3, r1
 80052ba:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80052be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80052c6:	4413      	add	r3, r2
 80052c8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80052cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80052d4:	440b      	add	r3, r1
 80052d6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80052da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80052e2:	4413      	add	r3, r2
 80052e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80052e8:	4619      	mov	r1, r3
 80052ea:	4a4b      	ldr	r2, [pc, #300]	; (8005418 <BSP_TS_GetState+0x284>)
 80052ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f2:	4299      	cmp	r1, r3
 80052f4:	d90e      	bls.n	8005314 <BSP_TS_GetState+0x180>
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80052fe:	4413      	add	r3, r2
 8005300:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005304:	4944      	ldr	r1, [pc, #272]	; (8005418 <BSP_TS_GetState+0x284>)
 8005306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005308:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800530c:	b29b      	uxth	r3, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	e00d      	b.n	8005330 <BSP_TS_GetState+0x19c>
 8005314:	4a40      	ldr	r2, [pc, #256]	; (8005418 <BSP_TS_GetState+0x284>)
 8005316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531c:	b29a      	uxth	r2, r3
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005326:	440b      	add	r3, r1
 8005328:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800533c:	4413      	add	r3, r2
 800533e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005342:	4619      	mov	r1, r3
 8005344:	4a35      	ldr	r2, [pc, #212]	; (800541c <BSP_TS_GetState+0x288>)
 8005346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534c:	4299      	cmp	r1, r3
 800534e:	d90e      	bls.n	800536e <BSP_TS_GetState+0x1da>
 8005350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005358:	4413      	add	r3, r2
 800535a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800535e:	492f      	ldr	r1, [pc, #188]	; (800541c <BSP_TS_GetState+0x288>)
 8005360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005362:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005366:	b29b      	uxth	r3, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	b29b      	uxth	r3, r3
 800536c:	e00d      	b.n	800538a <BSP_TS_GetState+0x1f6>
 800536e:	4a2b      	ldr	r2, [pc, #172]	; (800541c <BSP_TS_GetState+0x288>)
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005376:	b29a      	uxth	r2, r3
 8005378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005380:	440b      	add	r3, r1
 8005382:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	b29b      	uxth	r3, r3
 800538a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800538e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005392:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005396:	4413      	add	r3, r2
 8005398:	2b05      	cmp	r3, #5
 800539a:	dd17      	ble.n	80053cc <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800539c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80053a4:	4413      	add	r3, r2
 80053a6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <BSP_TS_GetState+0x284>)
 80053ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80053b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80053bc:	4413      	add	r3, r2
 80053be:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80053c2:	4619      	mov	r1, r3
 80053c4:	4a15      	ldr	r2, [pc, #84]	; (800541c <BSP_TS_GetState+0x288>)
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <BSP_TS_GetState+0x27c>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b70      	cmp	r3, #112	; 0x70
 80053d2:	d125      	bne.n	8005420 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80053d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80053dc:	4413      	add	r3, r2
 80053de:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	460a      	mov	r2, r1
 80053ec:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80053ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80053f6:	4413      	add	r3, r2
 80053f8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005400:	3304      	adds	r3, #4
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	460a      	mov	r2, r1
 8005408:	809a      	strh	r2, [r3, #4]
 800540a:	e02c      	b.n	8005466 <BSP_TS_GetState+0x2d2>
 800540c:	200018e0 	.word	0x200018e0
 8005410:	200018e9 	.word	0x200018e9
 8005414:	200018e8 	.word	0x200018e8
 8005418:	200018ec 	.word	0x200018ec
 800541c:	20001900 	.word	0x20001900
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005420:	4b42      	ldr	r3, [pc, #264]	; (800552c <BSP_TS_GetState+0x398>)
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	4a42      	ldr	r2, [pc, #264]	; (8005530 <BSP_TS_GetState+0x39c>)
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	fb03 f301 	mul.w	r3, r3, r1
 8005432:	0b1b      	lsrs	r3, r3, #12
 8005434:	b299      	uxth	r1, r3
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	460a      	mov	r2, r1
 8005440:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005442:	4b3c      	ldr	r3, [pc, #240]	; (8005534 <BSP_TS_GetState+0x3a0>)
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	4a3b      	ldr	r2, [pc, #236]	; (8005538 <BSP_TS_GetState+0x3a4>)
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005450:	fb03 f301 	mul.w	r3, r3, r1
 8005454:	0b1b      	lsrs	r3, r3, #12
 8005456:	b299      	uxth	r1, r3
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545c:	3304      	adds	r3, #4
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4413      	add	r3, r2
 8005462:	460a      	mov	r2, r1
 8005464:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <BSP_TS_GetState+0x3a8>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b298      	uxth	r0, r3
 800546c:	f107 010c 	add.w	r1, r7, #12
 8005470:	f107 0210 	add.w	r2, r7, #16
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	460b      	mov	r3, r1
 800547c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800547e:	f7fb fa95 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	b2d9      	uxtb	r1, r3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548a:	4413      	add	r3, r2
 800548c:	3316      	adds	r3, #22
 800548e:	460a      	mov	r2, r1
 8005490:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	b2d9      	uxtb	r1, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549a:	4413      	add	r3, r2
 800549c:	3320      	adds	r3, #32
 800549e:	460a      	mov	r2, r1
 80054a0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d827      	bhi.n	80054f8 <BSP_TS_GetState+0x364>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <BSP_TS_GetState+0x31c>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054cf 	.word	0x080054cf
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054eb 	.word	0x080054eb
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c4:	4413      	add	r3, r2
 80054c6:	331b      	adds	r3, #27
 80054c8:	2201      	movs	r2, #1
 80054ca:	701a      	strb	r2, [r3, #0]
          break;
 80054cc:	e018      	b.n	8005500 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d2:	4413      	add	r3, r2
 80054d4:	331b      	adds	r3, #27
 80054d6:	2202      	movs	r2, #2
 80054d8:	701a      	strb	r2, [r3, #0]
          break;
 80054da:	e011      	b.n	8005500 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e0:	4413      	add	r3, r2
 80054e2:	331b      	adds	r3, #27
 80054e4:	2203      	movs	r2, #3
 80054e6:	701a      	strb	r2, [r3, #0]
          break;
 80054e8:	e00a      	b.n	8005500 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ee:	4413      	add	r3, r2
 80054f0:	331b      	adds	r3, #27
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
          break;
 80054f6:	e003      	b.n	8005500 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80054fe:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005502:	3301      	adds	r3, #1
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550e:	4293      	cmp	r3, r2
 8005510:	f4ff ae61 	bcc.w	80051d6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f813 	bl	8005540 <BSP_TS_Get_GestureId>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005520:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005524:	4618      	mov	r0, r3
 8005526:	3754      	adds	r7, #84	; 0x54
 8005528:	46bd      	mov	sp, r7
 800552a:	bd90      	pop	{r4, r7, pc}
 800552c:	200018e4 	.word	0x200018e4
 8005530:	200018ec 	.word	0x200018ec
 8005534:	200018e6 	.word	0x200018e6
 8005538:	20001900 	.word	0x20001900
 800553c:	200018e9 	.word	0x200018e9

08005540 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005550:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <BSP_TS_Get_GestureId+0x90>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f107 0208 	add.w	r2, r7, #8
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f7fb fa0c 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b18      	cmp	r3, #24
 8005566:	d01b      	beq.n	80055a0 <BSP_TS_Get_GestureId+0x60>
 8005568:	2b18      	cmp	r3, #24
 800556a:	d806      	bhi.n	800557a <BSP_TS_Get_GestureId+0x3a>
 800556c:	2b10      	cmp	r3, #16
 800556e:	d00f      	beq.n	8005590 <BSP_TS_Get_GestureId+0x50>
 8005570:	2b14      	cmp	r3, #20
 8005572:	d011      	beq.n	8005598 <BSP_TS_Get_GestureId+0x58>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <BSP_TS_Get_GestureId+0x48>
 8005578:	e022      	b.n	80055c0 <BSP_TS_Get_GestureId+0x80>
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d018      	beq.n	80055b0 <BSP_TS_Get_GestureId+0x70>
 800557e:	2b49      	cmp	r3, #73	; 0x49
 8005580:	d01a      	beq.n	80055b8 <BSP_TS_Get_GestureId+0x78>
 8005582:	2b1c      	cmp	r3, #28
 8005584:	d010      	beq.n	80055a8 <BSP_TS_Get_GestureId+0x68>
 8005586:	e01b      	b.n	80055c0 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800558e:	e01a      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005596:	e016      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800559e:	e012      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2203      	movs	r2, #3
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80055a6:	e00e      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2204      	movs	r2, #4
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80055ae:	e00a      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2205      	movs	r2, #5
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80055b6:	e006      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2206      	movs	r2, #6
 80055bc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80055be:	e002      	b.n	80055c6 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200018e9 	.word	0x200018e9

080055d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_MspInit+0x4c>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_MspInit+0x4c>)
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e4:	6413      	str	r3, [r2, #64]	; 0x40
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_MspInit+0x4c>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_MspInit+0x4c>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <HAL_MspInit+0x4c>)
 80055f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fc:	6453      	str	r3, [r2, #68]	; 0x44
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <HAL_MspInit+0x4c>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800560a:	2200      	movs	r2, #0
 800560c:	210f      	movs	r1, #15
 800560e:	f06f 0001 	mvn.w	r0, #1
 8005612:	f001 fb13 	bl	8006c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800

08005624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08c      	sub	sp, #48	; 0x30
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800562c:	f107 031c 	add.w	r3, r7, #28
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <HAL_ADC_MspInit+0xc8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d124      	bne.n	8005690 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005646:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	4a29      	ldr	r2, [pc, #164]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6453      	str	r3, [r2, #68]	; 0x44
 8005652:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565e:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	4a23      	ldr	r2, [pc, #140]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	6313      	str	r3, [r2, #48]	; 0x30
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005676:	2301      	movs	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800567a:	2303      	movs	r3, #3
 800567c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005682:	f107 031c 	add.w	r3, r7, #28
 8005686:	4619      	mov	r1, r3
 8005688:	481a      	ldr	r0, [pc, #104]	; (80056f4 <HAL_ADC_MspInit+0xd0>)
 800568a:	f002 f839 	bl	8007700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800568e:	e029      	b.n	80056e4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_ADC_MspInit+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d124      	bne.n	80056e4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800569a:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 80056a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056a4:	6453      	str	r3, [r2, #68]	; 0x44
 80056a6:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80056b2:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a0e      	ldr	r2, [pc, #56]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 80056b8:	f043 0320 	orr.w	r3, r3, #32
 80056bc:	6313      	str	r3, [r2, #48]	; 0x30
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <HAL_ADC_MspInit+0xcc>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80056ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80056ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056d0:	2303      	movs	r3, #3
 80056d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056d8:	f107 031c 	add.w	r3, r7, #28
 80056dc:	4619      	mov	r1, r3
 80056de:	4807      	ldr	r0, [pc, #28]	; (80056fc <HAL_ADC_MspInit+0xd8>)
 80056e0:	f002 f80e 	bl	8007700 <HAL_GPIO_Init>
}
 80056e4:	bf00      	nop
 80056e6:	3730      	adds	r7, #48	; 0x30
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40012000 	.word	0x40012000
 80056f0:	40023800 	.word	0x40023800
 80056f4:	40020000 	.word	0x40020000
 80056f8:	40012200 	.word	0x40012200
 80056fc:	40021400 	.word	0x40021400

08005700 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_DAC_MspInit+0x84>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d12b      	bne.n	800577a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005722:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_DAC_MspInit+0x88>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_DAC_MspInit+0x88>)
 8005728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <HAL_DAC_MspInit+0x88>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <HAL_DAC_MspInit+0x88>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	4a12      	ldr	r2, [pc, #72]	; (8005788 <HAL_DAC_MspInit+0x88>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6313      	str	r3, [r2, #48]	; 0x30
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <HAL_DAC_MspInit+0x88>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005752:	2310      	movs	r3, #16
 8005754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005756:	2303      	movs	r3, #3
 8005758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	4619      	mov	r1, r3
 8005764:	4809      	ldr	r0, [pc, #36]	; (800578c <HAL_DAC_MspInit+0x8c>)
 8005766:	f001 ffcb 	bl	8007700 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800576a:	2200      	movs	r2, #0
 800576c:	2100      	movs	r1, #0
 800576e:	2036      	movs	r0, #54	; 0x36
 8005770:	f001 fa64 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005774:	2036      	movs	r0, #54	; 0x36
 8005776:	f001 fa7d 	bl	8006c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800577a:	bf00      	nop
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40007400 	.word	0x40007400
 8005788:	40023800 	.word	0x40023800
 800578c:	40020000 	.word	0x40020000

08005790 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <HAL_DMA2D_MspInit+0x38>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10b      	bne.n	80057ba <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_DMA2D_MspInit+0x3c>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_DMA2D_MspInit+0x3c>)
 80057a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ac:	6313      	str	r3, [r2, #48]	; 0x30
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <HAL_DMA2D_MspInit+0x3c>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	4002b000 	.word	0x4002b000
 80057cc:	40023800 	.word	0x40023800

080057d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	; 0x30
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d8:	f107 031c 	add.w	r3, r7, #28
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <HAL_I2C_MspInit+0xdc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d129      	bne.n	8005846 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f2:	4b2f      	ldr	r3, [pc, #188]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	4a2e      	ldr	r2, [pc, #184]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 80057f8:	f043 0302 	orr.w	r3, r3, #2
 80057fc:	6313      	str	r3, [r2, #48]	; 0x30
 80057fe:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800580a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800580e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005810:	2312      	movs	r3, #18
 8005812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005814:	2301      	movs	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005818:	2300      	movs	r3, #0
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800581c:	2304      	movs	r3, #4
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005820:	f107 031c 	add.w	r3, r7, #28
 8005824:	4619      	mov	r1, r3
 8005826:	4823      	ldr	r0, [pc, #140]	; (80058b4 <HAL_I2C_MspInit+0xe4>)
 8005828:	f001 ff6a 	bl	8007700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800582c:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 8005832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005836:	6413      	str	r3, [r2, #64]	; 0x40
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005844:	e02d      	b.n	80058a2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <HAL_I2C_MspInit+0xe8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d128      	bne.n	80058a2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	6313      	str	r3, [r2, #48]	; 0x30
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005868:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800586c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800586e:	2312      	movs	r3, #18
 8005870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005872:	2301      	movs	r3, #1
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005876:	2303      	movs	r3, #3
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800587a:	2304      	movs	r3, #4
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800587e:	f107 031c 	add.w	r3, r7, #28
 8005882:	4619      	mov	r1, r3
 8005884:	480d      	ldr	r0, [pc, #52]	; (80058bc <HAL_I2C_MspInit+0xec>)
 8005886:	f001 ff3b 	bl	8007700 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 8005890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_I2C_MspInit+0xe0>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	3730      	adds	r7, #48	; 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40005400 	.word	0x40005400
 80058b0:	40023800 	.word	0x40023800
 80058b4:	40020400 	.word	0x40020400
 80058b8:	40005c00 	.word	0x40005c00
 80058bc:	40021c00 	.word	0x40021c00

080058c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <HAL_I2C_MspDeInit+0x64>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d110      	bne.n	80058f4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <HAL_I2C_MspDeInit+0x68>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <HAL_I2C_MspDeInit+0x68>)
 80058d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058dc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80058de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058e2:	4812      	ldr	r0, [pc, #72]	; (800592c <HAL_I2C_MspDeInit+0x6c>)
 80058e4:	f002 f8b6 	bl	8007a54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80058e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058ec:	480f      	ldr	r0, [pc, #60]	; (800592c <HAL_I2C_MspDeInit+0x6c>)
 80058ee:	f002 f8b1 	bl	8007a54 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80058f2:	e013      	b.n	800591c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <HAL_I2C_MspDeInit+0x70>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d10e      	bne.n	800591c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_I2C_MspDeInit+0x68>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <HAL_I2C_MspDeInit+0x68>)
 8005904:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005908:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800590a:	2180      	movs	r1, #128	; 0x80
 800590c:	4809      	ldr	r0, [pc, #36]	; (8005934 <HAL_I2C_MspDeInit+0x74>)
 800590e:	f002 f8a1 	bl	8007a54 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005916:	4807      	ldr	r0, [pc, #28]	; (8005934 <HAL_I2C_MspDeInit+0x74>)
 8005918:	f002 f89c 	bl	8007a54 <HAL_GPIO_DeInit>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40005400 	.word	0x40005400
 8005928:	40023800 	.word	0x40023800
 800592c:	40020400 	.word	0x40020400
 8005930:	40005c00 	.word	0x40005c00
 8005934:	40021c00 	.word	0x40021c00

08005938 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08e      	sub	sp, #56	; 0x38
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a55      	ldr	r2, [pc, #340]	; (8005aac <HAL_LTDC_MspInit+0x174>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f040 80a3 	bne.w	8005aa2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800595c:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	4a53      	ldr	r2, [pc, #332]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 8005962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005966:	6453      	str	r3, [r2, #68]	; 0x44
 8005968:	4b51      	ldr	r3, [pc, #324]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005974:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	4a4d      	ldr	r2, [pc, #308]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 800597a:	f043 0310 	orr.w	r3, r3, #16
 800597e:	6313      	str	r3, [r2, #48]	; 0x30
 8005980:	4b4b      	ldr	r3, [pc, #300]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800598c:	4b48      	ldr	r3, [pc, #288]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	4a47      	ldr	r2, [pc, #284]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 8005992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005996:	6313      	str	r3, [r2, #48]	; 0x30
 8005998:	4b45      	ldr	r3, [pc, #276]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80059a4:	4b42      	ldr	r3, [pc, #264]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ae:	6313      	str	r3, [r2, #48]	; 0x30
 80059b0:	4b3f      	ldr	r3, [pc, #252]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80059bc:	4b3c      	ldr	r3, [pc, #240]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4a3b      	ldr	r2, [pc, #236]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c6:	6313      	str	r3, [r2, #48]	; 0x30
 80059c8:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80059d4:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	4a35      	ldr	r2, [pc, #212]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059de:	6313      	str	r3, [r2, #48]	; 0x30
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <HAL_LTDC_MspInit+0x178>)
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80059ec:	2310      	movs	r3, #16
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f0:	2302      	movs	r3, #2
 80059f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f8:	2300      	movs	r3, #0
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80059fc:	230e      	movs	r3, #14
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a04:	4619      	mov	r1, r3
 8005a06:	482b      	ldr	r0, [pc, #172]	; (8005ab4 <HAL_LTDC_MspInit+0x17c>)
 8005a08:	f001 fe7a 	bl	8007700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005a0c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a12:	2302      	movs	r3, #2
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a1e:	230e      	movs	r3, #14
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a26:	4619      	mov	r1, r3
 8005a28:	4823      	ldr	r0, [pc, #140]	; (8005ab8 <HAL_LTDC_MspInit+0x180>)
 8005a2a:	f001 fe69 	bl	8007700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005a2e:	23f7      	movs	r3, #247	; 0xf7
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a32:	2302      	movs	r3, #2
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a3e:	230e      	movs	r3, #14
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a46:	4619      	mov	r1, r3
 8005a48:	481c      	ldr	r0, [pc, #112]	; (8005abc <HAL_LTDC_MspInit+0x184>)
 8005a4a:	f001 fe59 	bl	8007700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a54:	2302      	movs	r3, #2
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005a60:	2309      	movs	r3, #9
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4815      	ldr	r0, [pc, #84]	; (8005ac0 <HAL_LTDC_MspInit+0x188>)
 8005a6c:	f001 fe48 	bl	8007700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005a70:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a76:	2302      	movs	r3, #2
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a82:	230e      	movs	r3, #14
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	480d      	ldr	r0, [pc, #52]	; (8005ac4 <HAL_LTDC_MspInit+0x18c>)
 8005a8e:	f001 fe37 	bl	8007700 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2105      	movs	r1, #5
 8005a96:	2058      	movs	r0, #88	; 0x58
 8005a98:	f001 f8d0 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005a9c:	2058      	movs	r0, #88	; 0x58
 8005a9e:	f001 f8e9 	bl	8006c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005aa2:	bf00      	nop
 8005aa4:	3738      	adds	r7, #56	; 0x38
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40016800 	.word	0x40016800
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40022400 	.word	0x40022400
 8005abc:	40022800 	.word	0x40022800
 8005ac0:	40021800 	.word	0x40021800
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <HAL_RTC_MspInit+0x2c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <HAL_RTC_MspInit+0x30>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <HAL_RTC_MspInit+0x30>)
 8005ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40002800 	.word	0x40002800
 8005af8:	40023800 	.word	0x40023800

08005afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <HAL_SPI_MspInit+0xd4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d154      	bne.n	8005bc8 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b28:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b40:	6313      	str	r3, [r2, #48]	; 0x30
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_SPI_MspInit+0xd8>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8005b66:	2302      	movs	r3, #2
 8005b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b72:	2300      	movs	r3, #0
 8005b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b76:	2305      	movs	r3, #5
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8005b7a:	f107 0314 	add.w	r3, r7, #20
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4815      	ldr	r0, [pc, #84]	; (8005bd8 <HAL_SPI_MspInit+0xdc>)
 8005b82:	f001 fdbd 	bl	8007700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005b86:	2301      	movs	r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b92:	2303      	movs	r3, #3
 8005b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b96:	2305      	movs	r3, #5
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005b9a:	f107 0314 	add.w	r3, r7, #20
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <HAL_SPI_MspInit+0xdc>)
 8005ba2:	f001 fdad 	bl	8007700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005ba6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bac:	2302      	movs	r3, #2
 8005bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005bb8:	2305      	movs	r3, #5
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4806      	ldr	r0, [pc, #24]	; (8005bdc <HAL_SPI_MspInit+0xe0>)
 8005bc4:	f001 fd9c 	bl	8007700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005bc8:	bf00      	nop
 8005bca:	3728      	adds	r7, #40	; 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40003800 	.word	0x40003800
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40022000 	.word	0x40022000
 8005bdc:	40020400 	.word	0x40020400

08005be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	; 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2e      	ldr	r2, [pc, #184]	; (8005ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10c      	bne.n	8005c0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	4a2d      	ldr	r2, [pc, #180]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005c0a:	e046      	b.n	8005c9a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d10c      	bne.n	8005c30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c16:	4b25      	ldr	r3, [pc, #148]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	4a24      	ldr	r2, [pc, #144]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6413      	str	r3, [r2, #64]	; 0x40
 8005c22:	4b22      	ldr	r3, [pc, #136]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
}
 8005c2e:	e034      	b.n	8005c9a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10c      	bne.n	8005c54 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]
}
 8005c52:	e022      	b.n	8005c9a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10c      	bne.n	8005c78 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	4a12      	ldr	r2, [pc, #72]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c64:	f043 0308 	orr.w	r3, r3, #8
 8005c68:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6a:	4b10      	ldr	r3, [pc, #64]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	693b      	ldr	r3, [r7, #16]
}
 8005c76:	e010      	b.n	8005c9a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <HAL_TIM_Base_MspInit+0xd8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10b      	bne.n	8005c9a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c88:	f043 0302 	orr.w	r3, r3, #2
 8005c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c8e:	4b07      	ldr	r3, [pc, #28]	; (8005cac <HAL_TIM_Base_MspInit+0xcc>)
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	3724      	adds	r7, #36	; 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400

08005cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <HAL_TIM_MspPostInit+0xa8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d11c      	bne.n	8005d18 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <HAL_TIM_MspPostInit+0xac>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <HAL_TIM_MspPostInit+0xac>)
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <HAL_TIM_MspPostInit+0xac>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005cf6:	2310      	movs	r3, #16
 8005cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d02:	2300      	movs	r3, #0
 8005d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d06:	2302      	movs	r3, #2
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d0a:	f107 0314 	add.w	r3, r7, #20
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4816      	ldr	r0, [pc, #88]	; (8005d6c <HAL_TIM_MspPostInit+0xb0>)
 8005d12:	f001 fcf5 	bl	8007700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005d16:	e020      	b.n	8005d5a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <HAL_TIM_MspPostInit+0xb4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d11b      	bne.n	8005d5a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <HAL_TIM_MspPostInit+0xac>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <HAL_TIM_MspPostInit+0xac>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_TIM_MspPostInit+0xac>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005d3a:	2304      	movs	r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d46:	2300      	movs	r3, #0
 8005d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005d4e:	f107 0314 	add.w	r3, r7, #20
 8005d52:	4619      	mov	r1, r3
 8005d54:	4807      	ldr	r0, [pc, #28]	; (8005d74 <HAL_TIM_MspPostInit+0xb8>)
 8005d56:	f001 fcd3 	bl	8007700 <HAL_GPIO_Init>
}
 8005d5a:	bf00      	nop
 8005d5c:	3728      	adds	r7, #40	; 0x28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40020400 	.word	0x40020400
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40022000 	.word	0x40022000

08005d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	; 0x38
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a57      	ldr	r2, [pc, #348]	; (8005ef4 <HAL_UART_MspInit+0x17c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d128      	bne.n	8005dec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005d9a:	4b57      	ldr	r3, [pc, #348]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	4a56      	ldr	r2, [pc, #344]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da4:	6413      	str	r3, [r2, #64]	; 0x40
 8005da6:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dae:	623b      	str	r3, [r7, #32]
 8005db0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005db2:	4b51      	ldr	r3, [pc, #324]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	4a50      	ldr	r2, [pc, #320]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005db8:	f043 0320 	orr.w	r3, r3, #32
 8005dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dbe:	4b4e      	ldr	r3, [pc, #312]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005dca:	23c0      	movs	r3, #192	; 0xc0
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005dda:	2308      	movs	r3, #8
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de2:	4619      	mov	r1, r3
 8005de4:	4845      	ldr	r0, [pc, #276]	; (8005efc <HAL_UART_MspInit+0x184>)
 8005de6:	f001 fc8b 	bl	8007700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005dea:	e07f      	b.n	8005eec <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a43      	ldr	r2, [pc, #268]	; (8005f00 <HAL_UART_MspInit+0x188>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d14d      	bne.n	8005e92 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005df6:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	4a3f      	ldr	r2, [pc, #252]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005dfc:	f043 0310 	orr.w	r3, r3, #16
 8005e00:	6453      	str	r3, [r2, #68]	; 0x44
 8005e02:	4b3d      	ldr	r3, [pc, #244]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e0e:	4b3a      	ldr	r3, [pc, #232]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4a39      	ldr	r2, [pc, #228]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e14:	f043 0302 	orr.w	r3, r3, #2
 8005e18:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e26:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	4a33      	ldr	r2, [pc, #204]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	6313      	str	r3, [r2, #48]	; 0x30
 8005e32:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e42:	2302      	movs	r3, #2
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e4e:	2307      	movs	r3, #7
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e56:	4619      	mov	r1, r3
 8005e58:	482a      	ldr	r0, [pc, #168]	; (8005f04 <HAL_UART_MspInit+0x18c>)
 8005e5a:	f001 fc51 	bl	8007700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e64:	2302      	movs	r3, #2
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e70:	2307      	movs	r3, #7
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4823      	ldr	r0, [pc, #140]	; (8005f08 <HAL_UART_MspInit+0x190>)
 8005e7c:	f001 fc40 	bl	8007700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005e80:	2200      	movs	r2, #0
 8005e82:	2105      	movs	r1, #5
 8005e84:	2025      	movs	r0, #37	; 0x25
 8005e86:	f000 fed9 	bl	8006c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e8a:	2025      	movs	r0, #37	; 0x25
 8005e8c:	f000 fef2 	bl	8006c74 <HAL_NVIC_EnableIRQ>
}
 8005e90:	e02c      	b.n	8005eec <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_UART_MspInit+0x194>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d127      	bne.n	8005eec <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005e9c:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8005ea8:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eb4:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005eba:	f043 0304 	orr.w	r3, r3, #4
 8005ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <HAL_UART_MspInit+0x180>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005ecc:	23c0      	movs	r3, #192	; 0xc0
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005edc:	2308      	movs	r3, #8
 8005ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	480a      	ldr	r0, [pc, #40]	; (8005f10 <HAL_UART_MspInit+0x198>)
 8005ee8:	f001 fc0a 	bl	8007700 <HAL_GPIO_Init>
}
 8005eec:	bf00      	nop
 8005eee:	3738      	adds	r7, #56	; 0x38
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40007800 	.word	0x40007800
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40021400 	.word	0x40021400
 8005f00:	40011000 	.word	0x40011000
 8005f04:	40020400 	.word	0x40020400
 8005f08:	40020000 	.word	0x40020000
 8005f0c:	40011400 	.word	0x40011400
 8005f10:	40020800 	.word	0x40020800

08005f14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005f28:	4b3a      	ldr	r3, [pc, #232]	; (8006014 <HAL_FMC_MspInit+0x100>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d16d      	bne.n	800600c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005f30:	4b38      	ldr	r3, [pc, #224]	; (8006014 <HAL_FMC_MspInit+0x100>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005f36:	4b38      	ldr	r3, [pc, #224]	; (8006018 <HAL_FMC_MspInit+0x104>)
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	4a37      	ldr	r2, [pc, #220]	; (8006018 <HAL_FMC_MspInit+0x104>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	6393      	str	r3, [r2, #56]	; 0x38
 8005f42:	4b35      	ldr	r3, [pc, #212]	; (8006018 <HAL_FMC_MspInit+0x104>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8005f4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005f52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f54:	2302      	movs	r3, #2
 8005f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f60:	230c      	movs	r3, #12
 8005f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	482c      	ldr	r0, [pc, #176]	; (800601c <HAL_FMC_MspInit+0x108>)
 8005f6a:	f001 fbc9 	bl	8007700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8005f6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8005f72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f74:	2302      	movs	r3, #2
 8005f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005f80:	230c      	movs	r3, #12
 8005f82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4825      	ldr	r0, [pc, #148]	; (8006020 <HAL_FMC_MspInit+0x10c>)
 8005f8a:	f001 fbb9 	bl	8007700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8005f8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005f92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f94:	2302      	movs	r3, #2
 8005f96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	481e      	ldr	r0, [pc, #120]	; (8006024 <HAL_FMC_MspInit+0x110>)
 8005faa:	f001 fba9 	bl	8007700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005fae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005fb2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4817      	ldr	r0, [pc, #92]	; (8006028 <HAL_FMC_MspInit+0x114>)
 8005fca:	f001 fb99 	bl	8007700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8005fce:	2328      	movs	r3, #40	; 0x28
 8005fd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005fde:	230c      	movs	r3, #12
 8005fe0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4811      	ldr	r0, [pc, #68]	; (800602c <HAL_FMC_MspInit+0x118>)
 8005fe8:	f001 fb8a 	bl	8007700 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005fec:	2308      	movs	r3, #8
 8005fee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ffc:	230c      	movs	r3, #12
 8005ffe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	4619      	mov	r1, r3
 8006004:	480a      	ldr	r0, [pc, #40]	; (8006030 <HAL_FMC_MspInit+0x11c>)
 8006006:	f001 fb7b 	bl	8007700 <HAL_GPIO_Init>
 800600a:	e000      	b.n	800600e <HAL_FMC_MspInit+0xfa>
    return;
 800600c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20001914 	.word	0x20001914
 8006018:	40023800 	.word	0x40023800
 800601c:	40021000 	.word	0x40021000
 8006020:	40021800 	.word	0x40021800
 8006024:	40020c00 	.word	0x40020c00
 8006028:	40021400 	.word	0x40021400
 800602c:	40021c00 	.word	0x40021c00
 8006030:	40020800 	.word	0x40020800

08006034 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800603c:	f7ff ff6a 	bl	8005f14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08c      	sub	sp, #48	; 0x30
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006058:	2200      	movs	r2, #0
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	2036      	movs	r0, #54	; 0x36
 800605e:	f000 fded 	bl	8006c3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006062:	2036      	movs	r0, #54	; 0x36
 8006064:	f000 fe06 	bl	8006c74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006068:	4b1f      	ldr	r3, [pc, #124]	; (80060e8 <HAL_InitTick+0xa0>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_InitTick+0xa0>)
 800606e:	f043 0310 	orr.w	r3, r3, #16
 8006072:	6413      	str	r3, [r2, #64]	; 0x40
 8006074:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <HAL_InitTick+0xa0>)
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006080:	f107 0210 	add.w	r2, r7, #16
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f003 fc34 	bl	80098f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006090:	f003 fc0a 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8006094:	4603      	mov	r3, r0
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	4a13      	ldr	r2, [pc, #76]	; (80060ec <HAL_InitTick+0xa4>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	0c9b      	lsrs	r3, r3, #18
 80060a4:	3b01      	subs	r3, #1
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <HAL_InitTick+0xa8>)
 80060aa:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <HAL_InitTick+0xac>)
 80060ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_InitTick+0xa8>)
 80060b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80060b6:	4a0e      	ldr	r2, [pc, #56]	; (80060f0 <HAL_InitTick+0xa8>)
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <HAL_InitTick+0xa8>)
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_InitTick+0xa8>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80060c8:	4809      	ldr	r0, [pc, #36]	; (80060f0 <HAL_InitTick+0xa8>)
 80060ca:	f004 fd08 	bl	800aade <HAL_TIM_Base_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80060d4:	4806      	ldr	r0, [pc, #24]	; (80060f0 <HAL_InitTick+0xa8>)
 80060d6:	f004 fd2d 	bl	800ab34 <HAL_TIM_Base_Start_IT>
 80060da:	4603      	mov	r3, r0
 80060dc:	e000      	b.n	80060e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3730      	adds	r7, #48	; 0x30
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	431bde83 	.word	0x431bde83
 80060f0:	2000a10c 	.word	0x2000a10c
 80060f4:	40001000 	.word	0x40001000

080060f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80060fc:	e7fe      	b.n	80060fc <NMI_Handler+0x4>

080060fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060fe:	b480      	push	{r7}
 8006100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006102:	e7fe      	b.n	8006102 <HardFault_Handler+0x4>

08006104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006108:	e7fe      	b.n	8006108 <MemManage_Handler+0x4>

0800610a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800610a:	b480      	push	{r7}
 800610c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800610e:	e7fe      	b.n	800610e <BusFault_Handler+0x4>

08006110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006114:	e7fe      	b.n	8006114 <UsageFault_Handler+0x4>

08006116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006116:	b480      	push	{r7}
 8006118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8006128:	2080      	movs	r0, #128	; 0x80
 800612a:	f001 fdcf 	bl	8007ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800612e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006132:	f001 fdcb 	bl	8007ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006140:	4802      	ldr	r0, [pc, #8]	; (800614c <USART1_IRQHandler+0x10>)
 8006142:	f005 fe49 	bl	800bdd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20009df0 	.word	0x20009df0

08006150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006154:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006158:	f001 fdb8 	bl	8007ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}

08006160 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8006164:	4803      	ldr	r0, [pc, #12]	; (8006174 <TIM6_DAC_IRQHandler+0x14>)
 8006166:	f000 fdb5 	bl	8006cd4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800616a:	4803      	ldr	r0, [pc, #12]	; (8006178 <TIM6_DAC_IRQHandler+0x18>)
 800616c:	f004 fd41 	bl	800abf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006170:	bf00      	nop
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20009e70 	.word	0x20009e70
 8006178:	2000a10c 	.word	0x2000a10c

0800617c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006180:	4802      	ldr	r0, [pc, #8]	; (800618c <LTDC_IRQHandler+0x10>)
 8006182:	f002 fc3b 	bl	80089fc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20009cb8 	.word	0x20009cb8

08006190 <_sbrk>:
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	4a14      	ldr	r2, [pc, #80]	; (80061ec <_sbrk+0x5c>)
 800619a:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <_sbrk+0x60>)
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <_sbrk+0x64>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <_sbrk+0x22>
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <_sbrk+0x64>)
 80061ae:	4a12      	ldr	r2, [pc, #72]	; (80061f8 <_sbrk+0x68>)
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <_sbrk+0x64>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d207      	bcs.n	80061d0 <_sbrk+0x40>
 80061c0:	f008 ff4e 	bl	800f060 <__errno>
 80061c4:	4602      	mov	r2, r0
 80061c6:	230c      	movs	r3, #12
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	e009      	b.n	80061e4 <_sbrk+0x54>
 80061d0:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <_sbrk+0x64>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <_sbrk+0x64>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	4a05      	ldr	r2, [pc, #20]	; (80061f4 <_sbrk+0x64>)
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20050000 	.word	0x20050000
 80061f0:	00000400 	.word	0x00000400
 80061f4:	20001918 	.word	0x20001918
 80061f8:	2000a158 	.word	0x2000a158

080061fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006200:	4b08      	ldr	r3, [pc, #32]	; (8006224 <SystemInit+0x28>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <SystemInit+0x28>)
 8006208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800620c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <SystemInit+0x28>)
 8006212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006216:	609a      	str	r2, [r3, #8]
#endif
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	e000ed00 	.word	0xe000ed00

08006228 <Reset_Handler>:
 8006228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006260 <LoopFillZerobss+0x14>
 800622c:	2100      	movs	r1, #0
 800622e:	e003      	b.n	8006238 <LoopCopyDataInit>

08006230 <CopyDataInit>:
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <LoopFillZerobss+0x18>)
 8006232:	585b      	ldr	r3, [r3, r1]
 8006234:	5043      	str	r3, [r0, r1]
 8006236:	3104      	adds	r1, #4

08006238 <LoopCopyDataInit>:
 8006238:	480b      	ldr	r0, [pc, #44]	; (8006268 <LoopFillZerobss+0x1c>)
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <LoopFillZerobss+0x20>)
 800623c:	1842      	adds	r2, r0, r1
 800623e:	429a      	cmp	r2, r3
 8006240:	d3f6      	bcc.n	8006230 <CopyDataInit>
 8006242:	4a0b      	ldr	r2, [pc, #44]	; (8006270 <LoopFillZerobss+0x24>)
 8006244:	e002      	b.n	800624c <LoopFillZerobss>

08006246 <FillZerobss>:
 8006246:	2300      	movs	r3, #0
 8006248:	f842 3b04 	str.w	r3, [r2], #4

0800624c <LoopFillZerobss>:
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <LoopFillZerobss+0x28>)
 800624e:	429a      	cmp	r2, r3
 8006250:	d3f9      	bcc.n	8006246 <FillZerobss>
 8006252:	f7ff ffd3 	bl	80061fc <SystemInit>
 8006256:	f008 ff09 	bl	800f06c <__libc_init_array>
 800625a:	f7fa fc7f 	bl	8000b5c <main>
 800625e:	4770      	bx	lr
 8006260:	20050000 	.word	0x20050000
 8006264:	08011a54 	.word	0x08011a54
 8006268:	20000000 	.word	0x20000000
 800626c:	20001428 	.word	0x20001428
 8006270:	20001428 	.word	0x20001428
 8006274:	2000a154 	.word	0x2000a154

08006278 <ADC_IRQHandler>:
 8006278:	e7fe      	b.n	8006278 <ADC_IRQHandler>

0800627a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800627e:	2003      	movs	r0, #3
 8006280:	f000 fcd1 	bl	8006c26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006284:	2000      	movs	r0, #0
 8006286:	f7ff fedf 	bl	8006048 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800628a:	f7ff f9a3 	bl	80055d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_IncTick+0x20>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_IncTick+0x24>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4413      	add	r3, r2
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <HAL_IncTick+0x24>)
 80062a6:	6013      	str	r3, [r2, #0]
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	200013bc 	.word	0x200013bc
 80062b8:	2000a14c 	.word	0x2000a14c

080062bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  return uwTick;
 80062c0:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <HAL_GetTick+0x14>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	2000a14c 	.word	0x2000a14c

080062d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062dc:	f7ff ffee 	bl	80062bc <HAL_GetTick>
 80062e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d005      	beq.n	80062fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_Delay+0x40>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062fa:	bf00      	nop
 80062fc:	f7ff ffde 	bl	80062bc <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d8f7      	bhi.n	80062fc <HAL_Delay+0x28>
  {
  }
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	200013bc 	.word	0x200013bc

08006318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e031      	b.n	8006392 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff f974 	bl	8005624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <HAL_ADC_Init+0x84>)
 800635c:	4013      	ands	r3, r2
 800635e:	f043 0202 	orr.w	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fab6 	bl	80068d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	f043 0201 	orr.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
 8006382:	e001      	b.n	8006388 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	ffffeefd 	.word	0xffffeefd

080063a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_ADC_Start+0x1a>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e0a0      	b.n	80064fc <HAL_ADC_Start+0x15c>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d018      	beq.n	8006402 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80063e0:	4b49      	ldr	r3, [pc, #292]	; (8006508 <HAL_ADC_Start+0x168>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a49      	ldr	r2, [pc, #292]	; (800650c <HAL_ADC_Start+0x16c>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0c9a      	lsrs	r2, r3, #18
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80063f4:	e002      	b.n	80063fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f9      	bne.n	80063f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b01      	cmp	r3, #1
 800640e:	d174      	bne.n	80064fa <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006414:	4b3e      	ldr	r3, [pc, #248]	; (8006510 <HAL_ADC_Start+0x170>)
 8006416:	4013      	ands	r3, r2
 8006418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006436:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644a:	d106      	bne.n	800645a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006450:	f023 0206 	bic.w	r2, r3, #6
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	645a      	str	r2, [r3, #68]	; 0x44
 8006458:	e002      	b.n	8006460 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006470:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006472:	4b28      	ldr	r3, [pc, #160]	; (8006514 <HAL_ADC_Start+0x174>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d136      	bne.n	80064fa <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	e02d      	b.n	80064fa <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <HAL_ADC_Start+0x178>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10e      	bne.n	80064c6 <HAL_ADC_Start+0x126>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064c4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <HAL_ADC_Start+0x174>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d113      	bne.n	80064fa <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a11      	ldr	r2, [pc, #68]	; (800651c <HAL_ADC_Start+0x17c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d10e      	bne.n	80064fa <HAL_ADC_Start+0x15a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064f8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	200013b4 	.word	0x200013b4
 800650c:	431bde83 	.word	0x431bde83
 8006510:	fffff8fe 	.word	0xfffff8fe
 8006514:	40012300 	.word	0x40012300
 8006518:	40012000 	.word	0x40012000
 800651c:	40012200 	.word	0x40012200

08006520 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d113      	bne.n	8006566 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654c:	d10b      	bne.n	8006566 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f043 0220 	orr.w	r2, r3, #32
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e05c      	b.n	8006620 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006566:	f7ff fea9 	bl	80062bc <HAL_GetTick>
 800656a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800656c:	e01a      	b.n	80065a4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d016      	beq.n	80065a4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <HAL_ADC_PollForConversion+0x6c>
 800657c:	f7ff fe9e 	bl	80062bc <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d20b      	bcs.n	80065a4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f043 0204 	orr.w	r2, r3, #4
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e03d      	b.n	8006620 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d1dd      	bne.n	800656e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0212 	mvn.w	r2, #18
 80065ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d123      	bne.n	800661e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11f      	bne.n	800661e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d111      	bne.n	800661e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d105      	bne.n	800661e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f043 0201 	orr.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x1c>
 800665c:	2302      	movs	r3, #2
 800665e:	e12a      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x272>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b09      	cmp	r3, #9
 800666e:	d93a      	bls.n	80066e6 <HAL_ADC_ConfigChannel+0xa2>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006678:	d035      	beq.n	80066e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	3b1e      	subs	r3, #30
 8006690:	2207      	movs	r2, #7
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	43da      	mvns	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	400a      	ands	r2, r1
 800669e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a87      	ldr	r2, [pc, #540]	; (80068c4 <HAL_ADC_ConfigChannel+0x280>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10a      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68d9      	ldr	r1, [r3, #12]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	061a      	lsls	r2, r3, #24
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066be:	e035      	b.n	800672c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68d9      	ldr	r1, [r3, #12]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4618      	mov	r0, r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4403      	add	r3, r0
 80066d8:	3b1e      	subs	r3, #30
 80066da:	409a      	lsls	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066e4:	e022      	b.n	800672c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6919      	ldr	r1, [r3, #16]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	4613      	mov	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	4413      	add	r3, r2
 80066fa:	2207      	movs	r2, #7
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	43da      	mvns	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	400a      	ands	r2, r1
 8006708:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6919      	ldr	r1, [r3, #16]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	4618      	mov	r0, r3
 800671c:	4603      	mov	r3, r0
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	4403      	add	r3, r0
 8006722:	409a      	lsls	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d824      	bhi.n	800677e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	3b05      	subs	r3, #5
 8006746:	221f      	movs	r2, #31
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	43da      	mvns	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	400a      	ands	r2, r1
 8006754:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	4618      	mov	r0, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	3b05      	subs	r3, #5
 8006770:	fa00 f203 	lsl.w	r2, r0, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	635a      	str	r2, [r3, #52]	; 0x34
 800677c:	e04c      	b.n	8006818 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b0c      	cmp	r3, #12
 8006784:	d824      	bhi.n	80067d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	3b23      	subs	r3, #35	; 0x23
 8006798:	221f      	movs	r2, #31
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43da      	mvns	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	400a      	ands	r2, r1
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	4618      	mov	r0, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	3b23      	subs	r3, #35	; 0x23
 80067c2:	fa00 f203 	lsl.w	r2, r0, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
 80067ce:	e023      	b.n	8006818 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	3b41      	subs	r3, #65	; 0x41
 80067e2:	221f      	movs	r2, #31
 80067e4:	fa02 f303 	lsl.w	r3, r2, r3
 80067e8:	43da      	mvns	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	400a      	ands	r2, r1
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	4618      	mov	r0, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	3b41      	subs	r3, #65	; 0x41
 800680c:	fa00 f203 	lsl.w	r2, r0, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a2a      	ldr	r2, [pc, #168]	; (80068c8 <HAL_ADC_ConfigChannel+0x284>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10a      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x1f4>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800682a:	d105      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800682c:	4b27      	ldr	r3, [pc, #156]	; (80068cc <HAL_ADC_ConfigChannel+0x288>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <HAL_ADC_ConfigChannel+0x288>)
 8006832:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006836:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <HAL_ADC_ConfigChannel+0x284>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d109      	bne.n	8006856 <HAL_ADC_ConfigChannel+0x212>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b12      	cmp	r3, #18
 8006848:	d105      	bne.n	8006856 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800684a:	4b20      	ldr	r3, [pc, #128]	; (80068cc <HAL_ADC_ConfigChannel+0x288>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_ADC_ConfigChannel+0x288>)
 8006850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006854:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_ADC_ConfigChannel+0x284>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d125      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x268>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_ADC_ConfigChannel+0x280>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <HAL_ADC_ConfigChannel+0x22e>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b11      	cmp	r3, #17
 8006870:	d11c      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006872:	4b16      	ldr	r3, [pc, #88]	; (80068cc <HAL_ADC_ConfigChannel+0x288>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_ADC_ConfigChannel+0x288>)
 8006878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800687c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <HAL_ADC_ConfigChannel+0x280>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d111      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006888:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <HAL_ADC_ConfigChannel+0x28c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a11      	ldr	r2, [pc, #68]	; (80068d4 <HAL_ADC_ConfigChannel+0x290>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	0c9a      	lsrs	r2, r3, #18
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800689e:	e002      	b.n	80068a6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f9      	bne.n	80068a0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	10000012 	.word	0x10000012
 80068c8:	40012000 	.word	0x40012000
 80068cc:	40012300 	.word	0x40012300
 80068d0:	200013b4 	.word	0x200013b4
 80068d4:	431bde83 	.word	0x431bde83

080068d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80068e0:	4b78      	ldr	r3, [pc, #480]	; (8006ac4 <ADC_Init+0x1ec>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4a77      	ldr	r2, [pc, #476]	; (8006ac4 <ADC_Init+0x1ec>)
 80068e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80068ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80068ec:	4b75      	ldr	r3, [pc, #468]	; (8006ac4 <ADC_Init+0x1ec>)
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4973      	ldr	r1, [pc, #460]	; (8006ac4 <ADC_Init+0x1ec>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6859      	ldr	r1, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	021a      	lsls	r2, r3, #8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800692c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6899      	ldr	r1, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	4a58      	ldr	r2, [pc, #352]	; (8006ac8 <ADC_Init+0x1f0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800697a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6899      	ldr	r1, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800699c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	609a      	str	r2, [r3, #8]
 80069b0:	e00f      	b.n	80069d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80069d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0202 	bic.w	r2, r2, #2
 80069e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	005a      	lsls	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6859      	ldr	r1, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	035a      	lsls	r2, r3, #13
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	e007      	b.n	8006a48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	051a      	lsls	r2, r3, #20
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6899      	ldr	r1, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a8a:	025a      	lsls	r2, r3, #9
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6899      	ldr	r1, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	029a      	lsls	r2, r3, #10
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	609a      	str	r2, [r3, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40012300 	.word	0x40012300
 8006ac8:	0f000001 	.word	0x0f000001

08006acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <__NVIC_SetPriorityGrouping+0x40>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <__NVIC_SetPriorityGrouping+0x44>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006afa:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <__NVIC_SetPriorityGrouping+0x40>)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	60d3      	str	r3, [r2, #12]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	e000ed00 	.word	0xe000ed00
 8006b10:	05fa0000 	.word	0x05fa0000

08006b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <__NVIC_GetPriorityGrouping+0x18>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	f003 0307 	and.w	r3, r3, #7
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	e000ed00 	.word	0xe000ed00

08006b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	db0b      	blt.n	8006b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	f003 021f 	and.w	r2, r3, #31
 8006b48:	4907      	ldr	r1, [pc, #28]	; (8006b68 <__NVIC_EnableIRQ+0x38>)
 8006b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	2001      	movs	r0, #1
 8006b52:	fa00 f202 	lsl.w	r2, r0, r2
 8006b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	e000e100 	.word	0xe000e100

08006b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	db0a      	blt.n	8006b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	490c      	ldr	r1, [pc, #48]	; (8006bb8 <__NVIC_SetPriority+0x4c>)
 8006b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8a:	0112      	lsls	r2, r2, #4
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	440b      	add	r3, r1
 8006b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b94:	e00a      	b.n	8006bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4908      	ldr	r1, [pc, #32]	; (8006bbc <__NVIC_SetPriority+0x50>)
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	3b04      	subs	r3, #4
 8006ba4:	0112      	lsls	r2, r2, #4
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	440b      	add	r3, r1
 8006baa:	761a      	strb	r2, [r3, #24]
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	e000e100 	.word	0xe000e100
 8006bbc:	e000ed00 	.word	0xe000ed00

08006bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	; 0x24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f1c3 0307 	rsb	r3, r3, #7
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	bf28      	it	cs
 8006bde:	2304      	movcs	r3, #4
 8006be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	3304      	adds	r3, #4
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d902      	bls.n	8006bf0 <NVIC_EncodePriority+0x30>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3b03      	subs	r3, #3
 8006bee:	e000      	b.n	8006bf2 <NVIC_EncodePriority+0x32>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43da      	mvns	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	401a      	ands	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c08:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c12:	43d9      	mvns	r1, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c18:	4313      	orrs	r3, r2
         );
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3724      	adds	r7, #36	; 0x24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff4c 	bl	8006acc <__NVIC_SetPriorityGrouping>
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c4e:	f7ff ff61 	bl	8006b14 <__NVIC_GetPriorityGrouping>
 8006c52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f7ff ffb1 	bl	8006bc0 <NVIC_EncodePriority>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c64:	4611      	mov	r1, r2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff ff80 	bl	8006b6c <__NVIC_SetPriority>
}
 8006c6c:	bf00      	nop
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff ff54 	bl	8006b30 <__NVIC_EnableIRQ>
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e014      	b.n	8006ccc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d105      	bne.n	8006cb8 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fe fd24 	bl	8005700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cea:	d118      	bne.n	8006d1e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2204      	movs	r2, #4
 8006cf0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f043 0201 	orr.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d16:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f825 	bl	8006d68 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2c:	d118      	bne.n	8006d60 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2204      	movs	r2, #4
 8006d32:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f043 0202 	orr.w	r2, r3, #2
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006d48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d58:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f85b 	bl	8006e16 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	795b      	ldrb	r3, [r3, #5]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_DAC_ConfigChannel+0x20>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e036      	b.n	8006e0a <HAL_DAC_ConfigChannel+0x8e>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2202      	movs	r2, #2
 8006da6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006db0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	22c0      	movs	r2, #192	; 0xc0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	43da      	mvns	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	400a      	ands	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
	...

08006e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e38:	f7ff fa40 	bl	80062bc <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e099      	b.n	8006f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e68:	e00f      	b.n	8006e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e6a:	f7ff fa27 	bl	80062bc <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d908      	bls.n	8006e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2203      	movs	r2, #3
 8006e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e078      	b.n	8006f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e8      	bne.n	8006e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <HAL_DMA_Init+0x158>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d107      	bne.n	8006ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	4313      	orrs	r3, r2
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d117      	bne.n	8006f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00e      	beq.n	8006f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8df 	bl	80070f4 <DMA_CheckFifoParam>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2240      	movs	r2, #64	; 0x40
 8006f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e016      	b.n	8006f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f896 	bl	8007088 <DMA_CalcBaseAndBitshift>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f64:	223f      	movs	r2, #63	; 0x3f
 8006f66:	409a      	lsls	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	f010803f 	.word	0xf010803f

08006f88 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e050      	b.n	800703c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d101      	bne.n	8006faa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e048      	b.n	800703c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2221      	movs	r2, #33	; 0x21
 8006fe8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f84c 	bl	8007088 <DMA_CalcBaseAndBitshift>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff8:	223f      	movs	r2, #63	; 0x3f
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d004      	beq.n	8007062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e00c      	b.n	800707c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2205      	movs	r2, #5
 8007066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	3b10      	subs	r3, #16
 8007098:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <DMA_CalcBaseAndBitshift+0x60>)
 800709a:	fba2 2303 	umull	r2, r3, r2, r3
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070a2:	4a12      	ldr	r2, [pc, #72]	; (80070ec <DMA_CalcBaseAndBitshift+0x64>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d908      	bls.n	80070c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <DMA_CalcBaseAndBitshift+0x68>)
 80070be:	4013      	ands	r3, r2
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	659a      	str	r2, [r3, #88]	; 0x58
 80070c6:	e006      	b.n	80070d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <DMA_CalcBaseAndBitshift+0x68>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	aaaaaaab 	.word	0xaaaaaaab
 80070ec:	08011a08 	.word	0x08011a08
 80070f0:	fffffc00 	.word	0xfffffc00

080070f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d11f      	bne.n	800714e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d855      	bhi.n	80071c0 <DMA_CheckFifoParam+0xcc>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <DMA_CheckFifoParam+0x28>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	0800712d 	.word	0x0800712d
 8007120:	0800713f 	.word	0x0800713f
 8007124:	0800712d 	.word	0x0800712d
 8007128:	080071c1 	.word	0x080071c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d045      	beq.n	80071c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800713c:	e042      	b.n	80071c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007146:	d13f      	bne.n	80071c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800714c:	e03c      	b.n	80071c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007156:	d121      	bne.n	800719c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d836      	bhi.n	80071cc <DMA_CheckFifoParam+0xd8>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <DMA_CheckFifoParam+0x70>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007175 	.word	0x08007175
 8007168:	0800717b 	.word	0x0800717b
 800716c:	08007175 	.word	0x08007175
 8007170:	0800718d 	.word	0x0800718d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	73fb      	strb	r3, [r7, #15]
      break;
 8007178:	e02f      	b.n	80071da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d024      	beq.n	80071d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800718a:	e021      	b.n	80071d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007194:	d11e      	bne.n	80071d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800719a:	e01b      	b.n	80071d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d902      	bls.n	80071a8 <DMA_CheckFifoParam+0xb4>
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d003      	beq.n	80071ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071a6:	e018      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
      break;
 80071ac:	e015      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00e      	beq.n	80071d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	e00b      	b.n	80071d8 <DMA_CheckFifoParam+0xe4>
      break;
 80071c0:	bf00      	nop
 80071c2:	e00a      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      break;
 80071c4:	bf00      	nop
 80071c6:	e008      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      break;
 80071c8:	bf00      	nop
 80071ca:	e006      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      break;
 80071cc:	bf00      	nop
 80071ce:	e004      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      break;
 80071d0:	bf00      	nop
 80071d2:	e002      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      break;   
 80071d4:	bf00      	nop
 80071d6:	e000      	b.n	80071da <DMA_CheckFifoParam+0xe6>
      break;
 80071d8:	bf00      	nop
    }
  } 
  
  return status; 
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e039      	b.n	800726e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fe fabe 	bl	8005790 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	f023 0107 	bic.w	r1, r3, #7
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <HAL_DMA2D_Init+0x90>)
 8007250:	4013      	ands	r3, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68d1      	ldr	r1, [r2, #12]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	430b      	orrs	r3, r1
 800725c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	ffffc000 	.word	0xffffc000

0800727c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_DMA2D_Start+0x1c>
 8007294:	2302      	movs	r3, #2
 8007296:	e018      	b.n	80072ca <HAL_DMA2D_Start+0x4e>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f988 	bl	80075c8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d056      	beq.n	800739c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80072ee:	f7fe ffe5 	bl	80062bc <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80072f4:	e04b      	b.n	800738e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007304:	2b00      	cmp	r3, #0
 8007306:	d023      	beq.n	8007350 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	f043 0202 	orr.w	r2, r3, #2
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732c:	f043 0201 	orr.w	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2221      	movs	r2, #33	; 0x21
 800733a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2204      	movs	r2, #4
 8007340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0a5      	b.n	800749c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007356:	d01a      	beq.n	800738e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007358:	f7fe ffb0 	bl	80062bc <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <HAL_DMA2D_PollForTransfer+0x9c>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10f      	bne.n	800738e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	f043 0220 	orr.w	r2, r3, #32
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2203      	movs	r2, #3
 800737e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e086      	b.n	800749c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0ac      	beq.n	80072f6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d061      	beq.n	8007482 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80073be:	f7fe ff7d 	bl	80062bc <HAL_GetTick>
 80073c2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80073c4:	e056      	b.n	8007474 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d02e      	beq.n	8007436 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	f043 0204 	orr.w	r2, r3, #4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	f043 0202 	orr.w	r2, r3, #2
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	f043 0201 	orr.w	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2229      	movs	r2, #41	; 0x29
 8007420:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2204      	movs	r2, #4
 8007426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e032      	b.n	800749c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d01a      	beq.n	8007474 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800743e:	f7fe ff3d 	bl	80062bc <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <HAL_DMA2D_PollForTransfer+0x182>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10f      	bne.n	8007474 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	f043 0220 	orr.w	r2, r3, #32
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2203      	movs	r2, #3
 8007464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e013      	b.n	800749c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0a1      	beq.n	80073c6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2212      	movs	r2, #18
 8007488:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_DMA2D_ConfigLayer+0x20>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e079      	b.n	80075b8 <HAL_DMA2D_ConfigLayer+0x114>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	3318      	adds	r3, #24
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80074ee:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <HAL_DMA2D_ConfigLayer+0x120>)
 80074f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b0a      	cmp	r3, #10
 80074f8:	d003      	beq.n	8007502 <HAL_DMA2D_ConfigLayer+0x5e>
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d107      	bne.n	8007512 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e005      	b.n	800751e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d120      	bne.n	8007566 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	43db      	mvns	r3, r3
 800752e:	ea02 0103 	and.w	r1, r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	430a      	orrs	r2, r1
 800753a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b0a      	cmp	r3, #10
 800754c:	d003      	beq.n	8007556 <HAL_DMA2D_ConfigLayer+0xb2>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b09      	cmp	r3, #9
 8007554:	d127      	bne.n	80075a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007562:	629a      	str	r2, [r3, #40]	; 0x28
 8007564:	e01f      	b.n	80075a6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	43db      	mvns	r3, r3
 8007570:	ea02 0103 	and.w	r1, r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	430a      	orrs	r2, r1
 800757c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b0a      	cmp	r3, #10
 800758e:	d003      	beq.n	8007598 <HAL_DMA2D_ConfigLayer+0xf4>
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b09      	cmp	r3, #9
 8007596:	d106      	bne.n	80075a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80075a4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	ff03000f 	.word	0xff03000f

080075c8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b08b      	sub	sp, #44	; 0x2c
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	041a      	lsls	r2, r3, #16
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	431a      	orrs	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007600:	d174      	bne.n	80076ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007608:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007610:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007618:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d108      	bne.n	800763a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	431a      	orrs	r2, r3
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	4313      	orrs	r3, r2
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
 8007638:	e053      	b.n	80076e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d106      	bne.n	8007650 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	4313      	orrs	r3, r2
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
 800764e:	e048      	b.n	80076e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d111      	bne.n	800767c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	0cdb      	lsrs	r3, r3, #19
 800765c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	0a9b      	lsrs	r3, r3, #10
 8007662:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	08db      	lsrs	r3, r3, #3
 8007668:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	02db      	lsls	r3, r3, #11
 8007672:	4313      	orrs	r3, r2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
 800767a:	e032      	b.n	80076e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b03      	cmp	r3, #3
 8007682:	d117      	bne.n	80076b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	0fdb      	lsrs	r3, r3, #31
 8007688:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	0cdb      	lsrs	r3, r3, #19
 800768e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	0adb      	lsrs	r3, r3, #11
 8007694:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	08db      	lsrs	r3, r3, #3
 800769a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	029b      	lsls	r3, r3, #10
 80076a4:	431a      	orrs	r2, r3
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	03db      	lsls	r3, r3, #15
 80076aa:	4313      	orrs	r3, r2
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
 80076b2:	e016      	b.n	80076e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	0f1b      	lsrs	r3, r3, #28
 80076b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	0d1b      	lsrs	r3, r3, #20
 80076be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	0b1b      	lsrs	r3, r3, #12
 80076c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	091b      	lsrs	r3, r3, #4
 80076ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	011a      	lsls	r2, r3, #4
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	431a      	orrs	r2, r3
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	031b      	lsls	r3, r3, #12
 80076da:	4313      	orrs	r3, r2
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80076ea:	e003      	b.n	80076f4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	60da      	str	r2, [r3, #12]
}
 80076f4:	bf00      	nop
 80076f6:	372c      	adds	r7, #44	; 0x2c
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007700:	b480      	push	{r7}
 8007702:	b089      	sub	sp, #36	; 0x24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007712:	2300      	movs	r3, #0
 8007714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007716:	2300      	movs	r3, #0
 8007718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	e175      	b.n	8007a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007720:	2201      	movs	r2, #1
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4013      	ands	r3, r2
 8007732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	429a      	cmp	r2, r3
 800773a:	f040 8164 	bne.w	8007a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d00b      	beq.n	800775e <HAL_GPIO_Init+0x5e>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d007      	beq.n	800775e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007752:	2b11      	cmp	r3, #17
 8007754:	d003      	beq.n	800775e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b12      	cmp	r3, #18
 800775c:	d130      	bne.n	80077c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	2203      	movs	r2, #3
 800776a:	fa02 f303 	lsl.w	r3, r2, r3
 800776e:	43db      	mvns	r3, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4013      	ands	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4313      	orrs	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007794:	2201      	movs	r2, #1
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4013      	ands	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	f003 0201 	and.w	r2, r3, #1
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	2203      	movs	r2, #3
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	43db      	mvns	r3, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4013      	ands	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d003      	beq.n	8007800 <HAL_GPIO_Init+0x100>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b12      	cmp	r3, #18
 80077fe:	d123      	bne.n	8007848 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	08da      	lsrs	r2, r3, #3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3208      	adds	r2, #8
 8007808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	220f      	movs	r2, #15
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	43db      	mvns	r3, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4013      	ands	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	4313      	orrs	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	08da      	lsrs	r2, r3, #3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3208      	adds	r2, #8
 8007842:	69b9      	ldr	r1, [r7, #24]
 8007844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	2203      	movs	r2, #3
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 0203 	and.w	r2, r3, #3
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	4313      	orrs	r3, r2
 8007874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80be 	beq.w	8007a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800788a:	4b65      	ldr	r3, [pc, #404]	; (8007a20 <HAL_GPIO_Init+0x320>)
 800788c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788e:	4a64      	ldr	r2, [pc, #400]	; (8007a20 <HAL_GPIO_Init+0x320>)
 8007890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007894:	6453      	str	r3, [r2, #68]	; 0x44
 8007896:	4b62      	ldr	r3, [pc, #392]	; (8007a20 <HAL_GPIO_Init+0x320>)
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80078a2:	4a60      	ldr	r2, [pc, #384]	; (8007a24 <HAL_GPIO_Init+0x324>)
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	089b      	lsrs	r3, r3, #2
 80078a8:	3302      	adds	r3, #2
 80078aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	220f      	movs	r2, #15
 80078ba:	fa02 f303 	lsl.w	r3, r2, r3
 80078be:	43db      	mvns	r3, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4013      	ands	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a57      	ldr	r2, [pc, #348]	; (8007a28 <HAL_GPIO_Init+0x328>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d037      	beq.n	800793e <HAL_GPIO_Init+0x23e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a56      	ldr	r2, [pc, #344]	; (8007a2c <HAL_GPIO_Init+0x32c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d031      	beq.n	800793a <HAL_GPIO_Init+0x23a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a55      	ldr	r2, [pc, #340]	; (8007a30 <HAL_GPIO_Init+0x330>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d02b      	beq.n	8007936 <HAL_GPIO_Init+0x236>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a54      	ldr	r2, [pc, #336]	; (8007a34 <HAL_GPIO_Init+0x334>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d025      	beq.n	8007932 <HAL_GPIO_Init+0x232>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a53      	ldr	r2, [pc, #332]	; (8007a38 <HAL_GPIO_Init+0x338>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d01f      	beq.n	800792e <HAL_GPIO_Init+0x22e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a52      	ldr	r2, [pc, #328]	; (8007a3c <HAL_GPIO_Init+0x33c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d019      	beq.n	800792a <HAL_GPIO_Init+0x22a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a51      	ldr	r2, [pc, #324]	; (8007a40 <HAL_GPIO_Init+0x340>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <HAL_GPIO_Init+0x226>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a50      	ldr	r2, [pc, #320]	; (8007a44 <HAL_GPIO_Init+0x344>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00d      	beq.n	8007922 <HAL_GPIO_Init+0x222>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a4f      	ldr	r2, [pc, #316]	; (8007a48 <HAL_GPIO_Init+0x348>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <HAL_GPIO_Init+0x21e>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a4e      	ldr	r2, [pc, #312]	; (8007a4c <HAL_GPIO_Init+0x34c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d101      	bne.n	800791a <HAL_GPIO_Init+0x21a>
 8007916:	2309      	movs	r3, #9
 8007918:	e012      	b.n	8007940 <HAL_GPIO_Init+0x240>
 800791a:	230a      	movs	r3, #10
 800791c:	e010      	b.n	8007940 <HAL_GPIO_Init+0x240>
 800791e:	2308      	movs	r3, #8
 8007920:	e00e      	b.n	8007940 <HAL_GPIO_Init+0x240>
 8007922:	2307      	movs	r3, #7
 8007924:	e00c      	b.n	8007940 <HAL_GPIO_Init+0x240>
 8007926:	2306      	movs	r3, #6
 8007928:	e00a      	b.n	8007940 <HAL_GPIO_Init+0x240>
 800792a:	2305      	movs	r3, #5
 800792c:	e008      	b.n	8007940 <HAL_GPIO_Init+0x240>
 800792e:	2304      	movs	r3, #4
 8007930:	e006      	b.n	8007940 <HAL_GPIO_Init+0x240>
 8007932:	2303      	movs	r3, #3
 8007934:	e004      	b.n	8007940 <HAL_GPIO_Init+0x240>
 8007936:	2302      	movs	r3, #2
 8007938:	e002      	b.n	8007940 <HAL_GPIO_Init+0x240>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <HAL_GPIO_Init+0x240>
 800793e:	2300      	movs	r3, #0
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	f002 0203 	and.w	r2, r2, #3
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	4093      	lsls	r3, r2
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	4313      	orrs	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007950:	4934      	ldr	r1, [pc, #208]	; (8007a24 <HAL_GPIO_Init+0x324>)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	089b      	lsrs	r3, r3, #2
 8007956:	3302      	adds	r3, #2
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800795e:	4b3c      	ldr	r3, [pc, #240]	; (8007a50 <HAL_GPIO_Init+0x350>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	43db      	mvns	r3, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4013      	ands	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007982:	4a33      	ldr	r2, [pc, #204]	; (8007a50 <HAL_GPIO_Init+0x350>)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007988:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <HAL_GPIO_Init+0x350>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	43db      	mvns	r3, r3
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	4013      	ands	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079ac:	4a28      	ldr	r2, [pc, #160]	; (8007a50 <HAL_GPIO_Init+0x350>)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079b2:	4b27      	ldr	r3, [pc, #156]	; (8007a50 <HAL_GPIO_Init+0x350>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	43db      	mvns	r3, r3
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	4013      	ands	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079d6:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <HAL_GPIO_Init+0x350>)
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079dc:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <HAL_GPIO_Init+0x350>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	43db      	mvns	r3, r3
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	4013      	ands	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a00:	4a13      	ldr	r2, [pc, #76]	; (8007a50 <HAL_GPIO_Init+0x350>)
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b0f      	cmp	r3, #15
 8007a10:	f67f ae86 	bls.w	8007720 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007a14:	bf00      	nop
 8007a16:	3724      	adds	r7, #36	; 0x24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40013800 	.word	0x40013800
 8007a28:	40020000 	.word	0x40020000
 8007a2c:	40020400 	.word	0x40020400
 8007a30:	40020800 	.word	0x40020800
 8007a34:	40020c00 	.word	0x40020c00
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	40021400 	.word	0x40021400
 8007a40:	40021800 	.word	0x40021800
 8007a44:	40021c00 	.word	0x40021c00
 8007a48:	40022000 	.word	0x40022000
 8007a4c:	40022400 	.word	0x40022400
 8007a50:	40013c00 	.word	0x40013c00

08007a54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e0d9      	b.n	8007c24 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a70:	2201      	movs	r2, #1
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	f040 80c9 	bne.w	8007c1e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007a8c:	4a6a      	ldr	r2, [pc, #424]	; (8007c38 <HAL_GPIO_DeInit+0x1e4>)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	089b      	lsrs	r3, r3, #2
 8007a92:	3302      	adds	r3, #2
 8007a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a98:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	220f      	movs	r2, #15
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a62      	ldr	r2, [pc, #392]	; (8007c3c <HAL_GPIO_DeInit+0x1e8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d037      	beq.n	8007b26 <HAL_GPIO_DeInit+0xd2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a61      	ldr	r2, [pc, #388]	; (8007c40 <HAL_GPIO_DeInit+0x1ec>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d031      	beq.n	8007b22 <HAL_GPIO_DeInit+0xce>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a60      	ldr	r2, [pc, #384]	; (8007c44 <HAL_GPIO_DeInit+0x1f0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02b      	beq.n	8007b1e <HAL_GPIO_DeInit+0xca>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a5f      	ldr	r2, [pc, #380]	; (8007c48 <HAL_GPIO_DeInit+0x1f4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d025      	beq.n	8007b1a <HAL_GPIO_DeInit+0xc6>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a5e      	ldr	r2, [pc, #376]	; (8007c4c <HAL_GPIO_DeInit+0x1f8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01f      	beq.n	8007b16 <HAL_GPIO_DeInit+0xc2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a5d      	ldr	r2, [pc, #372]	; (8007c50 <HAL_GPIO_DeInit+0x1fc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d019      	beq.n	8007b12 <HAL_GPIO_DeInit+0xbe>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a5c      	ldr	r2, [pc, #368]	; (8007c54 <HAL_GPIO_DeInit+0x200>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_GPIO_DeInit+0xba>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a5b      	ldr	r2, [pc, #364]	; (8007c58 <HAL_GPIO_DeInit+0x204>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00d      	beq.n	8007b0a <HAL_GPIO_DeInit+0xb6>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a5a      	ldr	r2, [pc, #360]	; (8007c5c <HAL_GPIO_DeInit+0x208>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <HAL_GPIO_DeInit+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a59      	ldr	r2, [pc, #356]	; (8007c60 <HAL_GPIO_DeInit+0x20c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <HAL_GPIO_DeInit+0xae>
 8007afe:	2309      	movs	r3, #9
 8007b00:	e012      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b02:	230a      	movs	r3, #10
 8007b04:	e010      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b06:	2308      	movs	r3, #8
 8007b08:	e00e      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b0a:	2307      	movs	r3, #7
 8007b0c:	e00c      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b0e:	2306      	movs	r3, #6
 8007b10:	e00a      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b12:	2305      	movs	r3, #5
 8007b14:	e008      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b16:	2304      	movs	r3, #4
 8007b18:	e006      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e004      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e002      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <HAL_GPIO_DeInit+0xd4>
 8007b26:	2300      	movs	r3, #0
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	f002 0203 	and.w	r2, r2, #3
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	4093      	lsls	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d132      	bne.n	8007b9e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b38:	4b4a      	ldr	r3, [pc, #296]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	4948      	ldr	r1, [pc, #288]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b46:	4b47      	ldr	r3, [pc, #284]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	4945      	ldr	r1, [pc, #276]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b54:	4b43      	ldr	r3, [pc, #268]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	4941      	ldr	r1, [pc, #260]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b62:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	493e      	ldr	r1, [pc, #248]	; (8007c64 <HAL_GPIO_DeInit+0x210>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	220f      	movs	r2, #15
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007b80:	4a2d      	ldr	r2, [pc, #180]	; (8007c38 <HAL_GPIO_DeInit+0x1e4>)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	089b      	lsrs	r3, r3, #2
 8007b86:	3302      	adds	r3, #2
 8007b88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	43da      	mvns	r2, r3
 8007b90:	4829      	ldr	r0, [pc, #164]	; (8007c38 <HAL_GPIO_DeInit+0x1e4>)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	089b      	lsrs	r3, r3, #2
 8007b96:	400a      	ands	r2, r1
 8007b98:	3302      	adds	r3, #2
 8007b9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	2103      	movs	r1, #3
 8007ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bac:	43db      	mvns	r3, r3
 8007bae:	401a      	ands	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	08da      	lsrs	r2, r3, #3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3208      	adds	r2, #8
 8007bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	220f      	movs	r2, #15
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	08d2      	lsrs	r2, r2, #3
 8007bd4:	4019      	ands	r1, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3208      	adds	r2, #8
 8007bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	2103      	movs	r1, #3
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007c00:	43db      	mvns	r3, r3
 8007c02:	401a      	ands	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	2103      	movs	r1, #3
 8007c12:	fa01 f303 	lsl.w	r3, r1, r3
 8007c16:	43db      	mvns	r3, r3
 8007c18:	401a      	ands	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	3301      	adds	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	f67f af22 	bls.w	8007a70 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	40013800 	.word	0x40013800
 8007c3c:	40020000 	.word	0x40020000
 8007c40:	40020400 	.word	0x40020400
 8007c44:	40020800 	.word	0x40020800
 8007c48:	40020c00 	.word	0x40020c00
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	40021400 	.word	0x40021400
 8007c54:	40021800 	.word	0x40021800
 8007c58:	40021c00 	.word	0x40021c00
 8007c5c:	40022000 	.word	0x40022000
 8007c60:	40022400 	.word	0x40022400
 8007c64:	40013c00 	.word	0x40013c00

08007c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	887b      	ldrh	r3, [r7, #2]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e001      	b.n	8007c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ca8:	787b      	ldrb	r3, [r7, #1]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cae:	887a      	ldrh	r2, [r7, #2]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007cb4:	e003      	b.n	8007cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007cb6:	887b      	ldrh	r3, [r7, #2]
 8007cb8:	041a      	lsls	r2, r3, #16
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	619a      	str	r2, [r3, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d006      	beq.n	8007cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ce2:	4a05      	ldr	r2, [pc, #20]	; (8007cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fa f992 	bl	8002014 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	40013c00 	.word	0x40013c00

08007cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e07f      	b.n	8007e0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fd fd54 	bl	80057d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	; 0x24
 8007d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d107      	bne.n	8007d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d72:	609a      	str	r2, [r3, #8]
 8007d74:	e006      	b.n	8007d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d104      	bne.n	8007d96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6859      	ldr	r1, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <HAL_I2C_Init+0x11c>)
 8007da2:	430b      	orrs	r3, r1
 8007da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	ea42 0103 	orr.w	r1, r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	021a      	lsls	r2, r3, #8
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69d9      	ldr	r1, [r3, #28]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1a      	ldr	r2, [r3, #32]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	02008000 	.word	0x02008000

08007e1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e021      	b.n	8007e72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2224      	movs	r2, #36	; 0x24
 8007e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fd fd3a 	bl	80058c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	4608      	mov	r0, r1
 8007e86:	4611      	mov	r1, r2
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	817b      	strh	r3, [r7, #10]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	813b      	strh	r3, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	f040 80f9 	bne.w	8008096 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <HAL_I2C_Mem_Write+0x34>
 8007eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d105      	bne.n	8007ebc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0ed      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d101      	bne.n	8007eca <HAL_I2C_Mem_Write+0x4e>
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e0e6      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ed2:	f7fe f9f3 	bl	80062bc <HAL_GetTick>
 8007ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2319      	movs	r3, #25
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fad1 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0d1      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2221      	movs	r2, #33	; 0x21
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2240      	movs	r2, #64	; 0x40
 8007f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a3a      	ldr	r2, [r7, #32]
 8007f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f1c:	88f8      	ldrh	r0, [r7, #6]
 8007f1e:	893a      	ldrh	r2, [r7, #8]
 8007f20:	8979      	ldrh	r1, [r7, #10]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f9e1 	bl	80082f4 <I2C_RequestMemoryWrite>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0a9      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2bff      	cmp	r3, #255	; 0xff
 8007f4c:	d90e      	bls.n	8007f6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	8979      	ldrh	r1, [r7, #10]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 fbb3 	bl	80086d0 <I2C_TransferConfig>
 8007f6a:	e00f      	b.n	8007f8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	8979      	ldrh	r1, [r7, #10]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fba2 	bl	80086d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fabb 	bl	800850c <I2C_WaitOnTXISFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e07b      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d034      	beq.n	8008044 <HAL_I2C_Mem_Write+0x1c8>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d130      	bne.n	8008044 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2180      	movs	r1, #128	; 0x80
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fa4d 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e04d      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008000:	b29b      	uxth	r3, r3
 8008002:	2bff      	cmp	r3, #255	; 0xff
 8008004:	d90e      	bls.n	8008024 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	22ff      	movs	r2, #255	; 0xff
 800800a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008010:	b2da      	uxtb	r2, r3
 8008012:	8979      	ldrh	r1, [r7, #10]
 8008014:	2300      	movs	r3, #0
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fb57 	bl	80086d0 <I2C_TransferConfig>
 8008022:	e00f      	b.n	8008044 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008032:	b2da      	uxtb	r2, r3
 8008034:	8979      	ldrh	r1, [r7, #10]
 8008036:	2300      	movs	r3, #0
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fb46 	bl	80086d0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d19e      	bne.n	8007f8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fa9a 	bl	800858c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e01a      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2220      	movs	r2, #32
 8008068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6859      	ldr	r1, [r3, #4]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <HAL_I2C_Mem_Write+0x224>)
 8008076:	400b      	ands	r3, r1
 8008078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e000      	b.n	8008098 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	fe00e800 	.word	0xfe00e800

080080a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	4608      	mov	r0, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4603      	mov	r3, r0
 80080b4:	817b      	strh	r3, [r7, #10]
 80080b6:	460b      	mov	r3, r1
 80080b8:	813b      	strh	r3, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	f040 80fd 	bne.w	80082c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_I2C_Mem_Read+0x34>
 80080d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e0f1      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <HAL_I2C_Mem_Read+0x4e>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e0ea      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080fa:	f7fe f8df 	bl	80062bc <HAL_GetTick>
 80080fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2319      	movs	r3, #25
 8008106:	2201      	movs	r2, #1
 8008108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f9bd 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e0d5      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2222      	movs	r2, #34	; 0x22
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2240      	movs	r2, #64	; 0x40
 8008128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a3a      	ldr	r2, [r7, #32]
 8008136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008144:	88f8      	ldrh	r0, [r7, #6]
 8008146:	893a      	ldrh	r2, [r7, #8]
 8008148:	8979      	ldrh	r1, [r7, #10]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4603      	mov	r3, r0
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f921 	bl	800839c <I2C_RequestMemoryRead>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0ad      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008170:	b29b      	uxth	r3, r3
 8008172:	2bff      	cmp	r3, #255	; 0xff
 8008174:	d90e      	bls.n	8008194 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	22ff      	movs	r2, #255	; 0xff
 800817a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008180:	b2da      	uxtb	r2, r3
 8008182:	8979      	ldrh	r1, [r7, #10]
 8008184:	4b52      	ldr	r3, [pc, #328]	; (80082d0 <HAL_I2C_Mem_Read+0x22c>)
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fa9f 	bl	80086d0 <I2C_TransferConfig>
 8008192:	e00f      	b.n	80081b4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	8979      	ldrh	r1, [r7, #10]
 80081a6:	4b4a      	ldr	r3, [pc, #296]	; (80082d0 <HAL_I2C_Mem_Read+0x22c>)
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 fa8e 	bl	80086d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2200      	movs	r2, #0
 80081bc:	2104      	movs	r1, #4
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f964 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e07c      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d034      	beq.n	8008274 <HAL_I2C_Mem_Read+0x1d0>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d130      	bne.n	8008274 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	2200      	movs	r2, #0
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f935 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e04d      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008230:	b29b      	uxth	r3, r3
 8008232:	2bff      	cmp	r3, #255	; 0xff
 8008234:	d90e      	bls.n	8008254 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	22ff      	movs	r2, #255	; 0xff
 800823a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008240:	b2da      	uxtb	r2, r3
 8008242:	8979      	ldrh	r1, [r7, #10]
 8008244:	2300      	movs	r3, #0
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fa3f 	bl	80086d0 <I2C_TransferConfig>
 8008252:	e00f      	b.n	8008274 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008262:	b2da      	uxtb	r2, r3
 8008264:	8979      	ldrh	r1, [r7, #10]
 8008266:	2300      	movs	r3, #0
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fa2e 	bl	80086d0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d19a      	bne.n	80081b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f982 	bl	800858c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e01a      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2220      	movs	r2, #32
 8008298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6859      	ldr	r1, [r3, #4]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_I2C_Mem_Read+0x230>)
 80082a6:	400b      	ands	r3, r1
 80082a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e000      	b.n	80082c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	80002400 	.word	0x80002400
 80082d4:	fe00e800 	.word	0xfe00e800

080082d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e6:	b2db      	uxtb	r3, r3
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	817b      	strh	r3, [r7, #10]
 8008306:	460b      	mov	r3, r1
 8008308:	813b      	strh	r3, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	8979      	ldrh	r1, [r7, #10]
 8008314:	4b20      	ldr	r3, [pc, #128]	; (8008398 <I2C_RequestMemoryWrite+0xa4>)
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f9d7 	bl	80086d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	69b9      	ldr	r1, [r7, #24]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f8f0 	bl	800850c <I2C_WaitOnTXISFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e02c      	b.n	8008390 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d105      	bne.n	8008348 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800833c:	893b      	ldrh	r3, [r7, #8]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
 8008346:	e015      	b.n	8008374 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008348:	893b      	ldrh	r3, [r7, #8]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	b29b      	uxth	r3, r3
 800834e:	b2da      	uxtb	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	69b9      	ldr	r1, [r7, #24]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f8d6 	bl	800850c <I2C_WaitOnTXISFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e012      	b.n	8008390 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800836a:	893b      	ldrh	r3, [r7, #8]
 800836c:	b2da      	uxtb	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	2200      	movs	r2, #0
 800837c:	2180      	movs	r1, #128	; 0x80
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f884 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e000      	b.n	8008390 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	80002000 	.word	0x80002000

0800839c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	461a      	mov	r2, r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	817b      	strh	r3, [r7, #10]
 80083ae:	460b      	mov	r3, r1
 80083b0:	813b      	strh	r3, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	8979      	ldrh	r1, [r7, #10]
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <I2C_RequestMemoryRead+0xa4>)
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 f984 	bl	80086d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	69b9      	ldr	r1, [r7, #24]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f89d 	bl	800850c <I2C_WaitOnTXISFlagUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e02c      	b.n	8008436 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d105      	bne.n	80083ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083e2:	893b      	ldrh	r3, [r7, #8]
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	629a      	str	r2, [r3, #40]	; 0x28
 80083ec:	e015      	b.n	800841a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083ee:	893b      	ldrh	r3, [r7, #8]
 80083f0:	0a1b      	lsrs	r3, r3, #8
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	69b9      	ldr	r1, [r7, #24]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f883 	bl	800850c <I2C_WaitOnTXISFlagUntilTimeout>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e012      	b.n	8008436 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008410:	893b      	ldrh	r3, [r7, #8]
 8008412:	b2da      	uxtb	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2200      	movs	r2, #0
 8008422:	2140      	movs	r1, #64	; 0x40
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f831 	bl	800848c <I2C_WaitOnFlagUntilTimeout>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	80002000 	.word	0x80002000

08008444 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d103      	bne.n	8008462 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b01      	cmp	r3, #1
 800846e:	d007      	beq.n	8008480 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	619a      	str	r2, [r3, #24]
  }
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800849c:	e022      	b.n	80084e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d01e      	beq.n	80084e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a6:	f7fd ff09 	bl	80062bc <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d302      	bcc.n	80084bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d113      	bne.n	80084e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c0:	f043 0220 	orr.w	r2, r3, #32
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e00f      	b.n	8008504 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	4013      	ands	r3, r2
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	bf0c      	ite	eq
 80084f4:	2301      	moveq	r3, #1
 80084f6:	2300      	movne	r3, #0
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	461a      	mov	r2, r3
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d0cd      	beq.n	800849e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008518:	e02c      	b.n	8008574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f870 	bl	8008604 <I2C_IsAcknowledgeFailed>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e02a      	b.n	8008584 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008534:	d01e      	beq.n	8008574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008536:	f7fd fec1 	bl	80062bc <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	d302      	bcc.n	800854c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d113      	bne.n	8008574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008550:	f043 0220 	orr.w	r2, r3, #32
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2220      	movs	r2, #32
 800855c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e007      	b.n	8008584 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b02      	cmp	r3, #2
 8008580:	d1cb      	bne.n	800851a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008598:	e028      	b.n	80085ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f830 	bl	8008604 <I2C_IsAcknowledgeFailed>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e026      	b.n	80085fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ae:	f7fd fe85 	bl	80062bc <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d302      	bcc.n	80085c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d113      	bne.n	80085ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	f043 0220 	orr.w	r2, r3, #32
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e007      	b.n	80085fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d1cf      	bne.n	800859a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b10      	cmp	r3, #16
 800861c:	d151      	bne.n	80086c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800861e:	e022      	b.n	8008666 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008626:	d01e      	beq.n	8008666 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008628:	f7fd fe48 	bl	80062bc <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <I2C_IsAcknowledgeFailed+0x3a>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d113      	bne.n	8008666 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	f043 0220 	orr.w	r2, r3, #32
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e02e      	b.n	80086c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b20      	cmp	r3, #32
 8008672:	d1d5      	bne.n	8008620 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2210      	movs	r2, #16
 800867a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2220      	movs	r2, #32
 8008682:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff fedd 	bl	8008444 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6859      	ldr	r1, [r3, #4]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <I2C_IsAcknowledgeFailed+0xc8>)
 8008696:	400b      	ands	r3, r1
 8008698:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869e:	f043 0204 	orr.w	r2, r3, #4
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	fe00e800 	.word	0xfe00e800

080086d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	607b      	str	r3, [r7, #4]
 80086da:	460b      	mov	r3, r1
 80086dc:	817b      	strh	r3, [r7, #10]
 80086de:	4613      	mov	r3, r2
 80086e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	0d5b      	lsrs	r3, r3, #21
 80086ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80086f0:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <I2C_TransferConfig+0x58>)
 80086f2:	430b      	orrs	r3, r1
 80086f4:	43db      	mvns	r3, r3
 80086f6:	ea02 0103 	and.w	r1, r2, r3
 80086fa:	897b      	ldrh	r3, [r7, #10]
 80086fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008700:	7a7b      	ldrb	r3, [r7, #9]
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	431a      	orrs	r2, r3
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	03ff63ff 	.word	0x03ff63ff

0800872c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b20      	cmp	r3, #32
 8008740:	d138      	bne.n	80087b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800874c:	2302      	movs	r3, #2
 800874e:	e032      	b.n	80087b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2224      	movs	r2, #36	; 0x24
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800877e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6819      	ldr	r1, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0201 	orr.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e000      	b.n	80087b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087b4:	2302      	movs	r3, #2
  }
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d139      	bne.n	800884c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e033      	b.n	800884e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2224      	movs	r2, #36	; 0x24
 80087f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0201 	bic.w	r2, r2, #1
 8008804:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008814:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	e000      	b.n	800884e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800884c:	2302      	movs	r3, #2
  }
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e0bf      	b.n	80089ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fd f858 	bl	8005938 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800889e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6999      	ldr	r1, [r3, #24]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6899      	ldr	r1, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b4a      	ldr	r3, [pc, #296]	; (80089f8 <HAL_LTDC_Init+0x19c>)
 80088d0:	400b      	ands	r3, r1
 80088d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6899      	ldr	r1, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	699a      	ldr	r2, [r3, #24]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68d9      	ldr	r1, [r3, #12]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	4b3e      	ldr	r3, [pc, #248]	; (80089f8 <HAL_LTDC_Init+0x19c>)
 80088fe:	400b      	ands	r3, r1
 8008900:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68d9      	ldr	r1, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1a      	ldr	r2, [r3, #32]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	430a      	orrs	r2, r1
 800891e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6919      	ldr	r1, [r3, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	4b33      	ldr	r3, [pc, #204]	; (80089f8 <HAL_LTDC_Init+0x19c>)
 800892c:	400b      	ands	r3, r1
 800892e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	041b      	lsls	r3, r3, #16
 8008936:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6919      	ldr	r1, [r3, #16]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6959      	ldr	r1, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	4b27      	ldr	r3, [pc, #156]	; (80089f8 <HAL_LTDC_Init+0x19c>)
 800895a:	400b      	ands	r3, r1
 800895c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6959      	ldr	r1, [r3, #20]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	431a      	orrs	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800898c:	041b      	lsls	r3, r3, #16
 800898e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0206 	orr.w	r2, r2, #6
 80089ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	f000f800 	.word	0xf000f800

080089fc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d023      	beq.n	8008a66 <HAL_LTDC_IRQHandler+0x6a>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01e      	beq.n	8008a66 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0204 	bic.w	r2, r2, #4
 8008a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2204      	movs	r2, #4
 8008a3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a46:	f043 0201 	orr.w	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2204      	movs	r2, #4
 8008a54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f86f 	bl	8008b44 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d023      	beq.n	8008ab8 <HAL_LTDC_IRQHandler+0xbc>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01e      	beq.n	8008ab8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0202 	bic.w	r2, r2, #2
 8008a88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a98:	f043 0202 	orr.w	r2, r3, #2
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f846 	bl	8008b44 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01b      	beq.n	8008afa <HAL_LTDC_IRQHandler+0xfe>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d016      	beq.n	8008afa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f82f 	bl	8008b58 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01b      	beq.n	8008b3c <HAL_LTDC_IRQHandler+0x140>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d016      	beq.n	8008b3c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0208 	bic.w	r2, r2, #8
 8008b1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2208      	movs	r2, #8
 8008b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f818 	bl	8008b6c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008b3c:	bf00      	nop
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b80:	b5b0      	push	{r4, r5, r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_LTDC_ConfigLayer+0x1a>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e02c      	b.n	8008bf4 <HAL_LTDC_ConfigLayer+0x74>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2134      	movs	r1, #52	; 0x34
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 f81f 	bl	8008c18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2201      	movs	r2, #1
 8008be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bdb0      	pop	{r4, r5, r7, pc}

08008bfc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008c0a:	b2db      	uxtb	r3, r3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b089      	sub	sp, #36	; 0x24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	0c1b      	lsrs	r3, r3, #16
 8008c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c34:	4413      	add	r3, r2
 8008c36:	041b      	lsls	r3, r3, #16
 8008c38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	01db      	lsls	r3, r3, #7
 8008c44:	4413      	add	r3, r2
 8008c46:	3384      	adds	r3, #132	; 0x84
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	01d2      	lsls	r2, r2, #7
 8008c54:	440a      	add	r2, r1
 8008c56:	3284      	adds	r2, #132	; 0x84
 8008c58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008c5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	0c1b      	lsrs	r3, r3, #16
 8008c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c6e:	4413      	add	r3, r2
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	01db      	lsls	r3, r3, #7
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3384      	adds	r3, #132	; 0x84
 8008c80:	4619      	mov	r1, r3
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c96:	4413      	add	r3, r2
 8008c98:	041b      	lsls	r3, r3, #16
 8008c9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	01db      	lsls	r3, r3, #7
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3384      	adds	r3, #132	; 0x84
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	01d2      	lsls	r2, r2, #7
 8008cb6:	440a      	add	r2, r1
 8008cb8:	3284      	adds	r2, #132	; 0x84
 8008cba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008cbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cce:	4413      	add	r3, r2
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	01db      	lsls	r3, r3, #7
 8008cdc:	440b      	add	r3, r1
 8008cde:	3384      	adds	r3, #132	; 0x84
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	01db      	lsls	r3, r3, #7
 8008cf2:	4413      	add	r3, r2
 8008cf4:	3384      	adds	r3, #132	; 0x84
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	6812      	ldr	r2, [r2, #0]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	01d2      	lsls	r2, r2, #7
 8008d02:	440a      	add	r2, r1
 8008d04:	3284      	adds	r2, #132	; 0x84
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	01db      	lsls	r3, r3, #7
 8008d16:	4413      	add	r3, r2
 8008d18:	3384      	adds	r3, #132	; 0x84
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008d32:	041b      	lsls	r3, r3, #16
 8008d34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	061b      	lsls	r3, r3, #24
 8008d3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	01db      	lsls	r3, r3, #7
 8008d48:	4413      	add	r3, r2
 8008d4a:	3384      	adds	r3, #132	; 0x84
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	01db      	lsls	r3, r3, #7
 8008d58:	4413      	add	r3, r2
 8008d5a:	3384      	adds	r3, #132	; 0x84
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d68:	461a      	mov	r2, r3
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	431a      	orrs	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4619      	mov	r1, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	01db      	lsls	r3, r3, #7
 8008d7c:	440b      	add	r3, r1
 8008d7e:	3384      	adds	r3, #132	; 0x84
 8008d80:	4619      	mov	r1, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	01db      	lsls	r3, r3, #7
 8008d92:	4413      	add	r3, r2
 8008d94:	3384      	adds	r3, #132	; 0x84
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	01d2      	lsls	r2, r2, #7
 8008da2:	440a      	add	r2, r1
 8008da4:	3284      	adds	r2, #132	; 0x84
 8008da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008daa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	01db      	lsls	r3, r3, #7
 8008db6:	4413      	add	r3, r2
 8008db8:	3384      	adds	r3, #132	; 0x84
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	01db      	lsls	r3, r3, #7
 8008dcc:	4413      	add	r3, r2
 8008dce:	3384      	adds	r3, #132	; 0x84
 8008dd0:	69da      	ldr	r2, [r3, #28]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	01db      	lsls	r3, r3, #7
 8008ddc:	440b      	add	r3, r1
 8008dde:	3384      	adds	r3, #132	; 0x84
 8008de0:	4619      	mov	r1, r3
 8008de2:	4b58      	ldr	r3, [pc, #352]	; (8008f44 <LTDC_SetConfig+0x32c>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	69da      	ldr	r2, [r3, #28]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	6809      	ldr	r1, [r1, #0]
 8008df4:	4608      	mov	r0, r1
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	01c9      	lsls	r1, r1, #7
 8008dfa:	4401      	add	r1, r0
 8008dfc:	3184      	adds	r1, #132	; 0x84
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	01db      	lsls	r3, r3, #7
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3384      	adds	r3, #132	; 0x84
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	01db      	lsls	r3, r3, #7
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3384      	adds	r3, #132	; 0x84
 8008e20:	461a      	mov	r2, r3
 8008e22:	2300      	movs	r3, #0
 8008e24:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	01db      	lsls	r3, r3, #7
 8008e30:	4413      	add	r3, r2
 8008e32:	3384      	adds	r3, #132	; 0x84
 8008e34:	461a      	mov	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008e44:	2304      	movs	r3, #4
 8008e46:	61fb      	str	r3, [r7, #28]
 8008e48:	e01b      	b.n	8008e82 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d102      	bne.n	8008e58 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008e52:	2303      	movs	r3, #3
 8008e54:	61fb      	str	r3, [r7, #28]
 8008e56:	e014      	b.n	8008e82 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d00b      	beq.n	8008e78 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d007      	beq.n	8008e78 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d003      	beq.n	8008e78 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e74:	2b07      	cmp	r3, #7
 8008e76:	d102      	bne.n	8008e7e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e001      	b.n	8008e82 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	01db      	lsls	r3, r3, #7
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3384      	adds	r3, #132	; 0x84
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	4611      	mov	r1, r2
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	01d2      	lsls	r2, r2, #7
 8008e9c:	440a      	add	r2, r1
 8008e9e:	3284      	adds	r2, #132	; 0x84
 8008ea0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eaa:	69fa      	ldr	r2, [r7, #28]
 8008eac:	fb02 f303 	mul.w	r3, r2, r3
 8008eb0:	041a      	lsls	r2, r3, #16
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6859      	ldr	r1, [r3, #4]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	1acb      	subs	r3, r1, r3
 8008ebc:	69f9      	ldr	r1, [r7, #28]
 8008ebe:	fb01 f303 	mul.w	r3, r1, r3
 8008ec2:	3303      	adds	r3, #3
 8008ec4:	68f9      	ldr	r1, [r7, #12]
 8008ec6:	6809      	ldr	r1, [r1, #0]
 8008ec8:	4608      	mov	r0, r1
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	01c9      	lsls	r1, r1, #7
 8008ece:	4401      	add	r1, r0
 8008ed0:	3184      	adds	r1, #132	; 0x84
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	01db      	lsls	r3, r3, #7
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3384      	adds	r3, #132	; 0x84
 8008ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	01db      	lsls	r3, r3, #7
 8008ef0:	440b      	add	r3, r1
 8008ef2:	3384      	adds	r3, #132	; 0x84
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <LTDC_SetConfig+0x330>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	01db      	lsls	r3, r3, #7
 8008f06:	4413      	add	r3, r2
 8008f08:	3384      	adds	r3, #132	; 0x84
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	01db      	lsls	r3, r3, #7
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3384      	adds	r3, #132	; 0x84
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	6812      	ldr	r2, [r2, #0]
 8008f26:	4611      	mov	r1, r2
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	01d2      	lsls	r2, r2, #7
 8008f2c:	440a      	add	r2, r1
 8008f2e:	3284      	adds	r2, #132	; 0x84
 8008f30:	f043 0301 	orr.w	r3, r3, #1
 8008f34:	6013      	str	r3, [r2, #0]
}
 8008f36:	bf00      	nop
 8008f38:	3724      	adds	r7, #36	; 0x24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	fffff8f8 	.word	0xfffff8f8
 8008f48:	fffff800 	.word	0xfffff800

08008f4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f5a:	6013      	str	r3, [r2, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40007000 	.word	0x40007000

08008f6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f76:	4b23      	ldr	r3, [pc, #140]	; (8009004 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	4a22      	ldr	r2, [pc, #136]	; (8009004 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f80:	6413      	str	r3, [r2, #64]	; 0x40
 8008f82:	4b20      	ldr	r3, [pc, #128]	; (8009004 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f8a:	603b      	str	r3, [r7, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1d      	ldr	r2, [pc, #116]	; (8009008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f9a:	f7fd f98f 	bl	80062bc <HAL_GetTick>
 8008f9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008fa0:	e009      	b.n	8008fb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008fa2:	f7fd f98b 	bl	80062bc <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fb0:	d901      	bls.n	8008fb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e022      	b.n	8008ffc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc2:	d1ee      	bne.n	8008fa2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008fc4:	4b10      	ldr	r3, [pc, #64]	; (8009008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a0f      	ldr	r2, [pc, #60]	; (8009008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fd0:	f7fd f974 	bl	80062bc <HAL_GetTick>
 8008fd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fd6:	e009      	b.n	8008fec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008fd8:	f7fd f970 	bl	80062bc <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fe6:	d901      	bls.n	8008fec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e007      	b.n	8008ffc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff8:	d1ee      	bne.n	8008fd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40023800 	.word	0x40023800
 8009008:	40007000 	.word	0x40007000

0800900c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009014:	2300      	movs	r3, #0
 8009016:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e291      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8087 	beq.w	800913e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009030:	4b96      	ldr	r3, [pc, #600]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 030c 	and.w	r3, r3, #12
 8009038:	2b04      	cmp	r3, #4
 800903a:	d00c      	beq.n	8009056 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800903c:	4b93      	ldr	r3, [pc, #588]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 030c 	and.w	r3, r3, #12
 8009044:	2b08      	cmp	r3, #8
 8009046:	d112      	bne.n	800906e <HAL_RCC_OscConfig+0x62>
 8009048:	4b90      	ldr	r3, [pc, #576]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009054:	d10b      	bne.n	800906e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009056:	4b8d      	ldr	r3, [pc, #564]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d06c      	beq.n	800913c <HAL_RCC_OscConfig+0x130>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d168      	bne.n	800913c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e26b      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009076:	d106      	bne.n	8009086 <HAL_RCC_OscConfig+0x7a>
 8009078:	4b84      	ldr	r3, [pc, #528]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a83      	ldr	r2, [pc, #524]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800907e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	e02e      	b.n	80090e4 <HAL_RCC_OscConfig+0xd8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10c      	bne.n	80090a8 <HAL_RCC_OscConfig+0x9c>
 800908e:	4b7f      	ldr	r3, [pc, #508]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a7e      	ldr	r2, [pc, #504]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	4b7c      	ldr	r3, [pc, #496]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a7b      	ldr	r2, [pc, #492]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	e01d      	b.n	80090e4 <HAL_RCC_OscConfig+0xd8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090b0:	d10c      	bne.n	80090cc <HAL_RCC_OscConfig+0xc0>
 80090b2:	4b76      	ldr	r3, [pc, #472]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a75      	ldr	r2, [pc, #468]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	4b73      	ldr	r3, [pc, #460]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a72      	ldr	r2, [pc, #456]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	e00b      	b.n	80090e4 <HAL_RCC_OscConfig+0xd8>
 80090cc:	4b6f      	ldr	r3, [pc, #444]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a6e      	ldr	r2, [pc, #440]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	4b6c      	ldr	r3, [pc, #432]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a6b      	ldr	r2, [pc, #428]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80090de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d013      	beq.n	8009114 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ec:	f7fd f8e6 	bl	80062bc <HAL_GetTick>
 80090f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090f4:	f7fd f8e2 	bl	80062bc <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b64      	cmp	r3, #100	; 0x64
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e21f      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009106:	4b61      	ldr	r3, [pc, #388]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f0      	beq.n	80090f4 <HAL_RCC_OscConfig+0xe8>
 8009112:	e014      	b.n	800913e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009114:	f7fd f8d2 	bl	80062bc <HAL_GetTick>
 8009118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800911a:	e008      	b.n	800912e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800911c:	f7fd f8ce 	bl	80062bc <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b64      	cmp	r3, #100	; 0x64
 8009128:	d901      	bls.n	800912e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e20b      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800912e:	4b57      	ldr	r3, [pc, #348]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f0      	bne.n	800911c <HAL_RCC_OscConfig+0x110>
 800913a:	e000      	b.n	800913e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800913c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d069      	beq.n	800921e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800914a:	4b50      	ldr	r3, [pc, #320]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 030c 	and.w	r3, r3, #12
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009156:	4b4d      	ldr	r3, [pc, #308]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 030c 	and.w	r3, r3, #12
 800915e:	2b08      	cmp	r3, #8
 8009160:	d11c      	bne.n	800919c <HAL_RCC_OscConfig+0x190>
 8009162:	4b4a      	ldr	r3, [pc, #296]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d116      	bne.n	800919c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800916e:	4b47      	ldr	r3, [pc, #284]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d005      	beq.n	8009186 <HAL_RCC_OscConfig+0x17a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d001      	beq.n	8009186 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e1df      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009186:	4b41      	ldr	r3, [pc, #260]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	493d      	ldr	r1, [pc, #244]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009196:	4313      	orrs	r3, r2
 8009198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800919a:	e040      	b.n	800921e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d023      	beq.n	80091ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a38      	ldr	r2, [pc, #224]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fd f884 	bl	80062bc <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091b8:	f7fd f880 	bl	80062bc <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e1bd      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ca:	4b30      	ldr	r3, [pc, #192]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091d6:	4b2d      	ldr	r3, [pc, #180]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4929      	ldr	r1, [pc, #164]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	600b      	str	r3, [r1, #0]
 80091ea:	e018      	b.n	800921e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ec:	4b27      	ldr	r3, [pc, #156]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a26      	ldr	r2, [pc, #152]	; (800928c <HAL_RCC_OscConfig+0x280>)
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f8:	f7fd f860 	bl	80062bc <HAL_GetTick>
 80091fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091fe:	e008      	b.n	8009212 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009200:	f7fd f85c 	bl	80062bc <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d901      	bls.n	8009212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e199      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009212:	4b1e      	ldr	r3, [pc, #120]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f0      	bne.n	8009200 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d038      	beq.n	800929c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d019      	beq.n	8009266 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009232:	4b16      	ldr	r3, [pc, #88]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009236:	4a15      	ldr	r2, [pc, #84]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009238:	f043 0301 	orr.w	r3, r3, #1
 800923c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923e:	f7fd f83d 	bl	80062bc <HAL_GetTick>
 8009242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009244:	e008      	b.n	8009258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009246:	f7fd f839 	bl	80062bc <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e176      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009258:	4b0c      	ldr	r3, [pc, #48]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800925a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d0f0      	beq.n	8009246 <HAL_RCC_OscConfig+0x23a>
 8009264:	e01a      	b.n	800929c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <HAL_RCC_OscConfig+0x280>)
 8009268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926a:	4a08      	ldr	r2, [pc, #32]	; (800928c <HAL_RCC_OscConfig+0x280>)
 800926c:	f023 0301 	bic.w	r3, r3, #1
 8009270:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009272:	f7fd f823 	bl	80062bc <HAL_GetTick>
 8009276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009278:	e00a      	b.n	8009290 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800927a:	f7fd f81f 	bl	80062bc <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d903      	bls.n	8009290 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e15c      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
 800928c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009290:	4b91      	ldr	r3, [pc, #580]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1ee      	bne.n	800927a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80a4 	beq.w	80093f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092aa:	4b8b      	ldr	r3, [pc, #556]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10d      	bne.n	80092d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80092b6:	4b88      	ldr	r3, [pc, #544]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	4a87      	ldr	r2, [pc, #540]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80092bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c0:	6413      	str	r3, [r2, #64]	; 0x40
 80092c2:	4b85      	ldr	r3, [pc, #532]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ce:	2301      	movs	r3, #1
 80092d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092d2:	4b82      	ldr	r3, [pc, #520]	; (80094dc <HAL_RCC_OscConfig+0x4d0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d118      	bne.n	8009310 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80092de:	4b7f      	ldr	r3, [pc, #508]	; (80094dc <HAL_RCC_OscConfig+0x4d0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a7e      	ldr	r2, [pc, #504]	; (80094dc <HAL_RCC_OscConfig+0x4d0>)
 80092e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092ea:	f7fc ffe7 	bl	80062bc <HAL_GetTick>
 80092ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092f0:	e008      	b.n	8009304 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f2:	f7fc ffe3 	bl	80062bc <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	2b64      	cmp	r3, #100	; 0x64
 80092fe:	d901      	bls.n	8009304 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e120      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009304:	4b75      	ldr	r3, [pc, #468]	; (80094dc <HAL_RCC_OscConfig+0x4d0>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0f0      	beq.n	80092f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d106      	bne.n	8009326 <HAL_RCC_OscConfig+0x31a>
 8009318:	4b6f      	ldr	r3, [pc, #444]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800931a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931c:	4a6e      	ldr	r2, [pc, #440]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	6713      	str	r3, [r2, #112]	; 0x70
 8009324:	e02d      	b.n	8009382 <HAL_RCC_OscConfig+0x376>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10c      	bne.n	8009348 <HAL_RCC_OscConfig+0x33c>
 800932e:	4b6a      	ldr	r3, [pc, #424]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009332:	4a69      	ldr	r2, [pc, #420]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	6713      	str	r3, [r2, #112]	; 0x70
 800933a:	4b67      	ldr	r3, [pc, #412]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	4a66      	ldr	r2, [pc, #408]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009340:	f023 0304 	bic.w	r3, r3, #4
 8009344:	6713      	str	r3, [r2, #112]	; 0x70
 8009346:	e01c      	b.n	8009382 <HAL_RCC_OscConfig+0x376>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b05      	cmp	r3, #5
 800934e:	d10c      	bne.n	800936a <HAL_RCC_OscConfig+0x35e>
 8009350:	4b61      	ldr	r3, [pc, #388]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009354:	4a60      	ldr	r2, [pc, #384]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009356:	f043 0304 	orr.w	r3, r3, #4
 800935a:	6713      	str	r3, [r2, #112]	; 0x70
 800935c:	4b5e      	ldr	r3, [pc, #376]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800935e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009360:	4a5d      	ldr	r2, [pc, #372]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	6713      	str	r3, [r2, #112]	; 0x70
 8009368:	e00b      	b.n	8009382 <HAL_RCC_OscConfig+0x376>
 800936a:	4b5b      	ldr	r3, [pc, #364]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	4a5a      	ldr	r2, [pc, #360]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009370:	f023 0301 	bic.w	r3, r3, #1
 8009374:	6713      	str	r3, [r2, #112]	; 0x70
 8009376:	4b58      	ldr	r3, [pc, #352]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937a:	4a57      	ldr	r2, [pc, #348]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800937c:	f023 0304 	bic.w	r3, r3, #4
 8009380:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d015      	beq.n	80093b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800938a:	f7fc ff97 	bl	80062bc <HAL_GetTick>
 800938e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009390:	e00a      	b.n	80093a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009392:	f7fc ff93 	bl	80062bc <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d901      	bls.n	80093a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e0ce      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093a8:	4b4b      	ldr	r3, [pc, #300]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80093aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0ee      	beq.n	8009392 <HAL_RCC_OscConfig+0x386>
 80093b4:	e014      	b.n	80093e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b6:	f7fc ff81 	bl	80062bc <HAL_GetTick>
 80093ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093bc:	e00a      	b.n	80093d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093be:	f7fc ff7d 	bl	80062bc <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d901      	bls.n	80093d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e0b8      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093d4:	4b40      	ldr	r3, [pc, #256]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1ee      	bne.n	80093be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d105      	bne.n	80093f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093e6:	4b3c      	ldr	r3, [pc, #240]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	4a3b      	ldr	r2, [pc, #236]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80093ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80a4 	beq.w	8009544 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093fc:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 030c 	and.w	r3, r3, #12
 8009404:	2b08      	cmp	r3, #8
 8009406:	d06b      	beq.n	80094e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	2b02      	cmp	r3, #2
 800940e:	d149      	bne.n	80094a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009410:	4b31      	ldr	r3, [pc, #196]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a30      	ldr	r2, [pc, #192]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800941a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941c:	f7fc ff4e 	bl	80062bc <HAL_GetTick>
 8009420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009422:	e008      	b.n	8009436 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009424:	f7fc ff4a 	bl	80062bc <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e087      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009436:	4b28      	ldr	r3, [pc, #160]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f0      	bne.n	8009424 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	019b      	lsls	r3, r3, #6
 8009452:	431a      	orrs	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	3b01      	subs	r3, #1
 800945c:	041b      	lsls	r3, r3, #16
 800945e:	431a      	orrs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	061b      	lsls	r3, r3, #24
 8009466:	4313      	orrs	r3, r2
 8009468:	4a1b      	ldr	r2, [pc, #108]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 800946a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800946e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009470:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a18      	ldr	r2, [pc, #96]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800947a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947c:	f7fc ff1e 	bl	80062bc <HAL_GetTick>
 8009480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009482:	e008      	b.n	8009496 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009484:	f7fc ff1a 	bl	80062bc <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b02      	cmp	r3, #2
 8009490:	d901      	bls.n	8009496 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e057      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0f0      	beq.n	8009484 <HAL_RCC_OscConfig+0x478>
 80094a2:	e04f      	b.n	8009544 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094a4:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80094aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b0:	f7fc ff04 	bl	80062bc <HAL_GetTick>
 80094b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094b6:	e008      	b.n	80094ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094b8:	f7fc ff00 	bl	80062bc <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e03d      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <HAL_RCC_OscConfig+0x4cc>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1f0      	bne.n	80094b8 <HAL_RCC_OscConfig+0x4ac>
 80094d6:	e035      	b.n	8009544 <HAL_RCC_OscConfig+0x538>
 80094d8:	40023800 	.word	0x40023800
 80094dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <HAL_RCC_OscConfig+0x544>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d028      	beq.n	8009540 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d121      	bne.n	8009540 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009506:	429a      	cmp	r2, r3
 8009508:	d11a      	bne.n	8009540 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009510:	4013      	ands	r3, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009516:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009518:	4293      	cmp	r3, r2
 800951a:	d111      	bne.n	8009540 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	3b01      	subs	r3, #1
 800952a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800952c:	429a      	cmp	r2, r3
 800952e:	d107      	bne.n	8009540 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800953c:	429a      	cmp	r2, r3
 800953e:	d001      	beq.n	8009544 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	40023800 	.word	0x40023800

08009554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e0d0      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800956c:	4b6a      	ldr	r3, [pc, #424]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d910      	bls.n	800959c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800957a:	4b67      	ldr	r3, [pc, #412]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f023 020f 	bic.w	r2, r3, #15
 8009582:	4965      	ldr	r1, [pc, #404]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	4313      	orrs	r3, r2
 8009588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800958a:	4b63      	ldr	r3, [pc, #396]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d001      	beq.n	800959c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e0b8      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d020      	beq.n	80095ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095b4:	4b59      	ldr	r3, [pc, #356]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4a58      	ldr	r2, [pc, #352]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80095ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80095be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0308 	and.w	r3, r3, #8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095cc:	4b53      	ldr	r3, [pc, #332]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	4a52      	ldr	r2, [pc, #328]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80095d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80095d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095d8:	4b50      	ldr	r3, [pc, #320]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	494d      	ldr	r1, [pc, #308]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d040      	beq.n	8009678 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d107      	bne.n	800960e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095fe:	4b47      	ldr	r3, [pc, #284]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d115      	bne.n	8009636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e07f      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d107      	bne.n	8009626 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009616:	4b41      	ldr	r3, [pc, #260]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d109      	bne.n	8009636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e073      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009626:	4b3d      	ldr	r3, [pc, #244]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0302 	and.w	r3, r3, #2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e06b      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009636:	4b39      	ldr	r3, [pc, #228]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f023 0203 	bic.w	r2, r3, #3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	4936      	ldr	r1, [pc, #216]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 8009644:	4313      	orrs	r3, r2
 8009646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009648:	f7fc fe38 	bl	80062bc <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964e:	e00a      	b.n	8009666 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009650:	f7fc fe34 	bl	80062bc <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	f241 3288 	movw	r2, #5000	; 0x1388
 800965e:	4293      	cmp	r3, r2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e053      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009666:	4b2d      	ldr	r3, [pc, #180]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 020c 	and.w	r2, r3, #12
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	429a      	cmp	r2, r3
 8009676:	d1eb      	bne.n	8009650 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009678:	4b27      	ldr	r3, [pc, #156]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d210      	bcs.n	80096a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009686:	4b24      	ldr	r3, [pc, #144]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f023 020f 	bic.w	r2, r3, #15
 800968e:	4922      	ldr	r1, [pc, #136]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	4313      	orrs	r3, r2
 8009694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009696:	4b20      	ldr	r3, [pc, #128]	; (8009718 <HAL_RCC_ClockConfig+0x1c4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d001      	beq.n	80096a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e032      	b.n	800970e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d008      	beq.n	80096c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096b4:	4b19      	ldr	r3, [pc, #100]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4916      	ldr	r1, [pc, #88]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d009      	beq.n	80096e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80096d2:	4b12      	ldr	r3, [pc, #72]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	490e      	ldr	r1, [pc, #56]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80096e6:	f000 f821 	bl	800972c <HAL_RCC_GetSysClockFreq>
 80096ea:	4601      	mov	r1, r0
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <HAL_RCC_ClockConfig+0x1c8>)
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	091b      	lsrs	r3, r3, #4
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	4a0a      	ldr	r2, [pc, #40]	; (8009720 <HAL_RCC_ClockConfig+0x1cc>)
 80096f8:	5cd3      	ldrb	r3, [r2, r3]
 80096fa:	fa21 f303 	lsr.w	r3, r1, r3
 80096fe:	4a09      	ldr	r2, [pc, #36]	; (8009724 <HAL_RCC_ClockConfig+0x1d0>)
 8009700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <HAL_RCC_ClockConfig+0x1d4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fc fc9e 	bl	8006048 <HAL_InitTick>

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	40023c00 	.word	0x40023c00
 800971c:	40023800 	.word	0x40023800
 8009720:	080119f0 	.word	0x080119f0
 8009724:	200013b4 	.word	0x200013b4
 8009728:	200013b8 	.word	0x200013b8

0800972c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800972c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	2300      	movs	r3, #0
 800973c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009742:	4b50      	ldr	r3, [pc, #320]	; (8009884 <HAL_RCC_GetSysClockFreq+0x158>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 030c 	and.w	r3, r3, #12
 800974a:	2b04      	cmp	r3, #4
 800974c:	d007      	beq.n	800975e <HAL_RCC_GetSysClockFreq+0x32>
 800974e:	2b08      	cmp	r3, #8
 8009750:	d008      	beq.n	8009764 <HAL_RCC_GetSysClockFreq+0x38>
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 808d 	bne.w	8009872 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009758:	4b4b      	ldr	r3, [pc, #300]	; (8009888 <HAL_RCC_GetSysClockFreq+0x15c>)
 800975a:	60bb      	str	r3, [r7, #8]
      break;
 800975c:	e08c      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800975e:	4b4b      	ldr	r3, [pc, #300]	; (800988c <HAL_RCC_GetSysClockFreq+0x160>)
 8009760:	60bb      	str	r3, [r7, #8]
      break;
 8009762:	e089      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009764:	4b47      	ldr	r3, [pc, #284]	; (8009884 <HAL_RCC_GetSysClockFreq+0x158>)
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800976c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800976e:	4b45      	ldr	r3, [pc, #276]	; (8009884 <HAL_RCC_GetSysClockFreq+0x158>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d023      	beq.n	80097c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800977a:	4b42      	ldr	r3, [pc, #264]	; (8009884 <HAL_RCC_GetSysClockFreq+0x158>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	099b      	lsrs	r3, r3, #6
 8009780:	f04f 0400 	mov.w	r4, #0
 8009784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	ea03 0501 	and.w	r5, r3, r1
 8009790:	ea04 0602 	and.w	r6, r4, r2
 8009794:	4a3d      	ldr	r2, [pc, #244]	; (800988c <HAL_RCC_GetSysClockFreq+0x160>)
 8009796:	fb02 f106 	mul.w	r1, r2, r6
 800979a:	2200      	movs	r2, #0
 800979c:	fb02 f205 	mul.w	r2, r2, r5
 80097a0:	440a      	add	r2, r1
 80097a2:	493a      	ldr	r1, [pc, #232]	; (800988c <HAL_RCC_GetSysClockFreq+0x160>)
 80097a4:	fba5 0101 	umull	r0, r1, r5, r1
 80097a8:	1853      	adds	r3, r2, r1
 80097aa:	4619      	mov	r1, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f04f 0400 	mov.w	r4, #0
 80097b2:	461a      	mov	r2, r3
 80097b4:	4623      	mov	r3, r4
 80097b6:	f7f6 fd7b 	bl	80002b0 <__aeabi_uldivmod>
 80097ba:	4603      	mov	r3, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	e049      	b.n	8009856 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097c2:	4b30      	ldr	r3, [pc, #192]	; (8009884 <HAL_RCC_GetSysClockFreq+0x158>)
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	099b      	lsrs	r3, r3, #6
 80097c8:	f04f 0400 	mov.w	r4, #0
 80097cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	ea03 0501 	and.w	r5, r3, r1
 80097d8:	ea04 0602 	and.w	r6, r4, r2
 80097dc:	4629      	mov	r1, r5
 80097de:	4632      	mov	r2, r6
 80097e0:	f04f 0300 	mov.w	r3, #0
 80097e4:	f04f 0400 	mov.w	r4, #0
 80097e8:	0154      	lsls	r4, r2, #5
 80097ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80097ee:	014b      	lsls	r3, r1, #5
 80097f0:	4619      	mov	r1, r3
 80097f2:	4622      	mov	r2, r4
 80097f4:	1b49      	subs	r1, r1, r5
 80097f6:	eb62 0206 	sbc.w	r2, r2, r6
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	f04f 0400 	mov.w	r4, #0
 8009802:	0194      	lsls	r4, r2, #6
 8009804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009808:	018b      	lsls	r3, r1, #6
 800980a:	1a5b      	subs	r3, r3, r1
 800980c:	eb64 0402 	sbc.w	r4, r4, r2
 8009810:	f04f 0100 	mov.w	r1, #0
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	00e2      	lsls	r2, r4, #3
 800981a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800981e:	00d9      	lsls	r1, r3, #3
 8009820:	460b      	mov	r3, r1
 8009822:	4614      	mov	r4, r2
 8009824:	195b      	adds	r3, r3, r5
 8009826:	eb44 0406 	adc.w	r4, r4, r6
 800982a:	f04f 0100 	mov.w	r1, #0
 800982e:	f04f 0200 	mov.w	r2, #0
 8009832:	02a2      	lsls	r2, r4, #10
 8009834:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009838:	0299      	lsls	r1, r3, #10
 800983a:	460b      	mov	r3, r1
 800983c:	4614      	mov	r4, r2
 800983e:	4618      	mov	r0, r3
 8009840:	4621      	mov	r1, r4
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f04f 0400 	mov.w	r4, #0
 8009848:	461a      	mov	r2, r3
 800984a:	4623      	mov	r3, r4
 800984c:	f7f6 fd30 	bl	80002b0 <__aeabi_uldivmod>
 8009850:	4603      	mov	r3, r0
 8009852:	460c      	mov	r4, r1
 8009854:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <HAL_RCC_GetSysClockFreq+0x158>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	0c1b      	lsrs	r3, r3, #16
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	3301      	adds	r3, #1
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	fbb2 f3f3 	udiv	r3, r2, r3
 800986e:	60bb      	str	r3, [r7, #8]
      break;
 8009870:	e002      	b.n	8009878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009874:	60bb      	str	r3, [r7, #8]
      break;
 8009876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009878:	68bb      	ldr	r3, [r7, #8]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009882:	bf00      	nop
 8009884:	40023800 	.word	0x40023800
 8009888:	00f42400 	.word	0x00f42400
 800988c:	017d7840 	.word	0x017d7840

08009890 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009894:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009896:	681b      	ldr	r3, [r3, #0]
}
 8009898:	4618      	mov	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200013b4 	.word	0x200013b4

080098a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80098ac:	f7ff fff0 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098b0:	4601      	mov	r1, r0
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	0a9b      	lsrs	r3, r3, #10
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	4a03      	ldr	r2, [pc, #12]	; (80098cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098be:	5cd3      	ldrb	r3, [r2, r3]
 80098c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40023800 	.word	0x40023800
 80098cc:	08011a00 	.word	0x08011a00

080098d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80098d4:	f7ff ffdc 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098d8:	4601      	mov	r1, r0
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	0b5b      	lsrs	r3, r3, #13
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	4a03      	ldr	r2, [pc, #12]	; (80098f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e6:	5cd3      	ldrb	r3, [r2, r3]
 80098e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40023800 	.word	0x40023800
 80098f4:	08011a00 	.word	0x08011a00

080098f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	220f      	movs	r2, #15
 8009906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009908:	4b12      	ldr	r3, [pc, #72]	; (8009954 <HAL_RCC_GetClockConfig+0x5c>)
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f003 0203 	and.w	r2, r3, #3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <HAL_RCC_GetClockConfig+0x5c>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009920:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <HAL_RCC_GetClockConfig+0x5c>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800992c:	4b09      	ldr	r3, [pc, #36]	; (8009954 <HAL_RCC_GetClockConfig+0x5c>)
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	08db      	lsrs	r3, r3, #3
 8009932:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <HAL_RCC_GetClockConfig+0x60>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 020f 	and.w	r2, r3, #15
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	601a      	str	r2, [r3, #0]
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40023800 	.word	0x40023800
 8009958:	40023c00 	.word	0x40023c00

0800995c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d012      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009984:	4b69      	ldr	r3, [pc, #420]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	4a68      	ldr	r2, [pc, #416]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800998a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800998e:	6093      	str	r3, [r2, #8]
 8009990:	4b66      	ldr	r3, [pc, #408]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009998:	4964      	ldr	r1, [pc, #400]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800999a:	4313      	orrs	r3, r2
 800999c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80099a6:	2301      	movs	r3, #1
 80099a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d017      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099b6:	4b5d      	ldr	r3, [pc, #372]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c4:	4959      	ldr	r1, [pc, #356]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d4:	d101      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80099d6:	2301      	movs	r3, #1
 80099d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80099e2:	2301      	movs	r3, #1
 80099e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d017      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099f2:	4b4e      	ldr	r3, [pc, #312]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a00:	494a      	ldr	r1, [pc, #296]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a10:	d101      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 808b 	beq.w	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a40:	4b3a      	ldr	r3, [pc, #232]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	4a39      	ldr	r2, [pc, #228]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8009a4c:	4b37      	ldr	r3, [pc, #220]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a54:	60bb      	str	r3, [r7, #8]
 8009a56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a58:	4b35      	ldr	r3, [pc, #212]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a34      	ldr	r2, [pc, #208]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a64:	f7fc fc2a 	bl	80062bc <HAL_GetTick>
 8009a68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a6c:	f7fc fc26 	bl	80062bc <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b64      	cmp	r3, #100	; 0x64
 8009a78:	d901      	bls.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e355      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a7e:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f0      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a8a:	4b28      	ldr	r3, [pc, #160]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d035      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d02e      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009aa8:	4b20      	ldr	r3, [pc, #128]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ab2:	4b1e      	ldr	r3, [pc, #120]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab6:	4a1d      	ldr	r2, [pc, #116]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009abc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009abe:	4b1b      	ldr	r3, [pc, #108]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac2:	4a1a      	ldr	r2, [pc, #104]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009aca:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ad0:	4b16      	ldr	r3, [pc, #88]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d114      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009adc:	f7fc fbee 	bl	80062bc <HAL_GetTick>
 8009ae0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ae2:	e00a      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ae4:	f7fc fbea 	bl	80062bc <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d901      	bls.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e317      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0ee      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b12:	d111      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009b22:	400b      	ands	r3, r1
 8009b24:	4901      	ldr	r1, [pc, #4]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	608b      	str	r3, [r1, #8]
 8009b2a:	e00b      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009b2c:	40023800 	.word	0x40023800
 8009b30:	40007000 	.word	0x40007000
 8009b34:	0ffffcff 	.word	0x0ffffcff
 8009b38:	4bb0      	ldr	r3, [pc, #704]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	4aaf      	ldr	r2, [pc, #700]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009b42:	6093      	str	r3, [r2, #8]
 8009b44:	4bad      	ldr	r3, [pc, #692]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b50:	49aa      	ldr	r1, [pc, #680]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d010      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b62:	4ba6      	ldr	r3, [pc, #664]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b68:	4aa4      	ldr	r2, [pc, #656]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009b72:	4ba2      	ldr	r3, [pc, #648]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7c:	499f      	ldr	r1, [pc, #636]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b90:	4b9a      	ldr	r3, [pc, #616]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b9e:	4997      	ldr	r1, [pc, #604]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009bb2:	4b92      	ldr	r3, [pc, #584]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc0:	498e      	ldr	r1, [pc, #568]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bd4:	4b89      	ldr	r3, [pc, #548]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be2:	4986      	ldr	r1, [pc, #536]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bf6:	4b81      	ldr	r3, [pc, #516]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c04:	497d      	ldr	r1, [pc, #500]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c18:	4b78      	ldr	r3, [pc, #480]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1e:	f023 0203 	bic.w	r2, r3, #3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c26:	4975      	ldr	r1, [pc, #468]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c3a:	4b70      	ldr	r3, [pc, #448]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c40:	f023 020c 	bic.w	r2, r3, #12
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c48:	496c      	ldr	r1, [pc, #432]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00a      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c5c:	4b67      	ldr	r3, [pc, #412]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6a:	4964      	ldr	r1, [pc, #400]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c7e:	4b5f      	ldr	r3, [pc, #380]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8c:	495b      	ldr	r1, [pc, #364]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00a      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ca0:	4b56      	ldr	r3, [pc, #344]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cae:	4953      	ldr	r1, [pc, #332]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009cc2:	4b4e      	ldr	r3, [pc, #312]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd0:	494a      	ldr	r1, [pc, #296]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00a      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009ce4:	4b45      	ldr	r3, [pc, #276]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf2:	4942      	ldr	r1, [pc, #264]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009d06:	4b3d      	ldr	r3, [pc, #244]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d14:	4939      	ldr	r1, [pc, #228]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d28:	4b34      	ldr	r3, [pc, #208]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d36:	4931      	ldr	r1, [pc, #196]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d011      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009d4a:	4b2c      	ldr	r3, [pc, #176]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d58:	4928      	ldr	r1, [pc, #160]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d68:	d101      	bne.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d98:	4918      	ldr	r1, [pc, #96]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009dac:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dbc:	490f      	ldr	r1, [pc, #60]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d005      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dd2:	f040 80d8 	bne.w	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009de2:	f7fc fa6b 	bl	80062bc <HAL_GetTick>
 8009de6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009de8:	e00a      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009dea:	f7fc fa67 	bl	80062bc <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	2b64      	cmp	r3, #100	; 0x64
 8009df6:	d903      	bls.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e196      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009dfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e00:	4b6c      	ldr	r3, [pc, #432]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1ee      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d021      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11d      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e20:	4b64      	ldr	r3, [pc, #400]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e2e:	4b61      	ldr	r3, [pc, #388]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e34:	0e1b      	lsrs	r3, r3, #24
 8009e36:	f003 030f 	and.w	r3, r3, #15
 8009e3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	019a      	lsls	r2, r3, #6
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	041b      	lsls	r3, r3, #16
 8009e46:	431a      	orrs	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	061b      	lsls	r3, r3, #24
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	071b      	lsls	r3, r3, #28
 8009e54:	4957      	ldr	r1, [pc, #348]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e70:	d00a      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d02e      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e86:	d129      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e88:	4b4a      	ldr	r3, [pc, #296]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e96:	4b47      	ldr	r3, [pc, #284]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9c:	0f1b      	lsrs	r3, r3, #28
 8009e9e:	f003 0307 	and.w	r3, r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	019a      	lsls	r2, r3, #6
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	061b      	lsls	r3, r3, #24
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	071b      	lsls	r3, r3, #28
 8009ebc:	493d      	ldr	r1, [pc, #244]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ec4:	4b3b      	ldr	r3, [pc, #236]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eca:	f023 021f 	bic.w	r2, r3, #31
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	4937      	ldr	r1, [pc, #220]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01d      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ee8:	4b32      	ldr	r3, [pc, #200]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eee:	0e1b      	lsrs	r3, r3, #24
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ef6:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009efc:	0f1b      	lsrs	r3, r3, #28
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	019a      	lsls	r2, r3, #6
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	041b      	lsls	r3, r3, #16
 8009f10:	431a      	orrs	r2, r3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	061b      	lsls	r3, r3, #24
 8009f16:	431a      	orrs	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	071b      	lsls	r3, r3, #28
 8009f1c:	4925      	ldr	r1, [pc, #148]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d011      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	019a      	lsls	r2, r3, #6
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	041b      	lsls	r3, r3, #16
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	061b      	lsls	r3, r3, #24
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	071b      	lsls	r3, r3, #28
 8009f4c:	4919      	ldr	r1, [pc, #100]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f54:	4b17      	ldr	r3, [pc, #92]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a16      	ldr	r2, [pc, #88]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f60:	f7fc f9ac 	bl	80062bc <HAL_GetTick>
 8009f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f66:	e008      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009f68:	f7fc f9a8 	bl	80062bc <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b64      	cmp	r3, #100	; 0x64
 8009f74:	d901      	bls.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e0d7      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0f0      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	f040 80cd 	bne.w	800a128 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a08      	ldr	r2, [pc, #32]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f9a:	f7fc f98f 	bl	80062bc <HAL_GetTick>
 8009f9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fa0:	e00a      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009fa2:	f7fc f98b 	bl	80062bc <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b64      	cmp	r3, #100	; 0x64
 8009fae:	d903      	bls.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e0ba      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009fb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fb8:	4b5e      	ldr	r3, [pc, #376]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc4:	d0ed      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d02e      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d12a      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009fee:	4b51      	ldr	r3, [pc, #324]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff4:	0c1b      	lsrs	r3, r3, #16
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ffc:	4b4d      	ldr	r3, [pc, #308]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a002:	0f1b      	lsrs	r3, r3, #28
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	019a      	lsls	r2, r3, #6
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	431a      	orrs	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	071b      	lsls	r3, r3, #28
 800a022:	4944      	ldr	r1, [pc, #272]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a024:	4313      	orrs	r3, r2
 800a026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a02a:	4b42      	ldr	r3, [pc, #264]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a030:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	3b01      	subs	r3, #1
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	493d      	ldr	r1, [pc, #244]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d022      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a058:	d11d      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a05a:	4b36      	ldr	r3, [pc, #216]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	0e1b      	lsrs	r3, r3, #24
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a068:	4b32      	ldr	r3, [pc, #200]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06e:	0f1b      	lsrs	r3, r3, #28
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	019a      	lsls	r2, r3, #6
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	431a      	orrs	r2, r3
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	061b      	lsls	r3, r3, #24
 800a088:	431a      	orrs	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	071b      	lsls	r3, r3, #28
 800a08e:	4929      	ldr	r1, [pc, #164]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a090:	4313      	orrs	r3, r2
 800a092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d028      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a8:	0e1b      	lsrs	r3, r3, #24
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a0b0:	4b20      	ldr	r3, [pc, #128]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b6:	0c1b      	lsrs	r3, r3, #16
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	019a      	lsls	r2, r3, #6
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	061b      	lsls	r3, r3, #24
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	071b      	lsls	r3, r3, #28
 800a0d6:	4917      	ldr	r1, [pc, #92]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a0de:	4b15      	ldr	r3, [pc, #84]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4911      	ldr	r1, [pc, #68]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a0f4:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a0fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a100:	f7fc f8dc 	bl	80062bc <HAL_GetTick>
 800a104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a106:	e008      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a108:	f7fc f8d8 	bl	80062bc <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b64      	cmp	r3, #100	; 0x64
 800a114:	d901      	bls.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e007      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a126:	d1ef      	bne.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	40023800 	.word	0x40023800

0800a138 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e06b      	b.n	800a222 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	7f5b      	ldrb	r3, [r3, #29]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	d105      	bne.n	800a160 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7fb fcb4 	bl	8005ac8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	22ca      	movs	r2, #202	; 0xca
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2253      	movs	r2, #83	; 0x53
 800a174:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fb00 	bl	800a77c <RTC_EnterInitMode>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	22ff      	movs	r2, #255	; 0xff
 800a188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2204      	movs	r2, #4
 800a18e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e046      	b.n	800a222 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6899      	ldr	r1, [r3, #8]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	4b23      	ldr	r3, [pc, #140]	; (800a22c <HAL_RTC_Init+0xf4>)
 800a1a0:	400b      	ands	r3, r1
 800a1a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6899      	ldr	r1, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	68d2      	ldr	r2, [r2, #12]
 800a1ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6919      	ldr	r1, [r3, #16]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	041a      	lsls	r2, r3, #16
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1ee:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 0208 	bic.w	r2, r2, #8
 800a1fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	22ff      	movs	r2, #255	; 0xff
 800a218:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a220:	2300      	movs	r3, #0
  }
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	ff8fffbf 	.word	0xff8fffbf

0800a230 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a230:	b590      	push	{r4, r7, lr}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	7f1b      	ldrb	r3, [r3, #28]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d101      	bne.n	800a24c <HAL_RTC_SetTime+0x1c>
 800a248:	2302      	movs	r3, #2
 800a24a:	e0a8      	b.n	800a39e <HAL_RTC_SetTime+0x16e>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2201      	movs	r2, #1
 800a250:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2202      	movs	r2, #2
 800a256:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d126      	bne.n	800a2ac <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2200      	movs	r2, #0
 800a270:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 faac 	bl	800a7d4 <RTC_ByteToBcd2>
 800a27c:	4603      	mov	r3, r0
 800a27e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	4618      	mov	r0, r3
 800a286:	f000 faa5 	bl	800a7d4 <RTC_ByteToBcd2>
 800a28a:	4603      	mov	r3, r0
 800a28c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a28e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	789b      	ldrb	r3, [r3, #2]
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fa9d 	bl	800a7d4 <RTC_ByteToBcd2>
 800a29a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a29c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	7b1b      	ldrb	r3, [r3, #12]
 800a2a4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]
 800a2aa:	e018      	b.n	800a2de <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2cc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a2d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	7b1b      	ldrb	r3, [r3, #12]
 800a2d8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	22ca      	movs	r2, #202	; 0xca
 800a2e4:	625a      	str	r2, [r3, #36]	; 0x24
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2253      	movs	r2, #83	; 0x53
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fa44 	bl	800a77c <RTC_EnterInitMode>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00b      	beq.n	800a312 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	22ff      	movs	r2, #255	; 0xff
 800a300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2204      	movs	r2, #4
 800a306:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e045      	b.n	800a39e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	6979      	ldr	r1, [r7, #20]
 800a318:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <HAL_RTC_SetTime+0x178>)
 800a31a:	400b      	ands	r3, r1
 800a31c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a32c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6899      	ldr	r1, [r3, #8]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	691a      	ldr	r2, [r3, #16]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	431a      	orrs	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a354:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b00      	cmp	r3, #0
 800a362:	d111      	bne.n	800a388 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 f9e1 	bl	800a72c <HAL_RTC_WaitForSynchro>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00b      	beq.n	800a388 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	22ff      	movs	r2, #255	; 0xff
 800a376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2204      	movs	r2, #4
 800a37c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e00a      	b.n	800a39e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	22ff      	movs	r2, #255	; 0xff
 800a38e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a39c:	2300      	movs	r3, #0
  }
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd90      	pop	{r4, r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	007f7f7f 	.word	0x007f7f7f

0800a3ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	7f1b      	ldrb	r3, [r3, #28]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d101      	bne.n	800a3c8 <HAL_RTC_SetDate+0x1c>
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	e092      	b.n	800a4ee <HAL_RTC_SetDate+0x142>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10e      	bne.n	800a3f8 <HAL_RTC_SetDate+0x4c>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d008      	beq.n	800a3f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	f023 0310 	bic.w	r3, r3, #16
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	330a      	adds	r3, #10
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d11c      	bne.n	800a438 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	78db      	ldrb	r3, [r3, #3]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f9e6 	bl	800a7d4 <RTC_ByteToBcd2>
 800a408:	4603      	mov	r3, r0
 800a40a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 f9df 	bl	800a7d4 <RTC_ByteToBcd2>
 800a416:	4603      	mov	r3, r0
 800a418:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a41a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	789b      	ldrb	r3, [r3, #2]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 f9d7 	bl	800a7d4 <RTC_ByteToBcd2>
 800a426:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a428:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a432:	4313      	orrs	r3, r2
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	e00e      	b.n	800a456 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	78db      	ldrb	r3, [r3, #3]
 800a43c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	785b      	ldrb	r3, [r3, #1]
 800a442:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a444:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a44a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	22ca      	movs	r2, #202	; 0xca
 800a45c:	625a      	str	r2, [r3, #36]	; 0x24
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2253      	movs	r2, #83	; 0x53
 800a464:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 f988 	bl	800a77c <RTC_EnterInitMode>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00b      	beq.n	800a48a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	22ff      	movs	r2, #255	; 0xff
 800a478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2204      	movs	r2, #4
 800a47e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e031      	b.n	800a4ee <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	6979      	ldr	r1, [r7, #20]
 800a490:	4b19      	ldr	r3, [pc, #100]	; (800a4f8 <HAL_RTC_SetDate+0x14c>)
 800a492:	400b      	ands	r3, r1
 800a494:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 0320 	and.w	r3, r3, #32
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d111      	bne.n	800a4d8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 f939 	bl	800a72c <HAL_RTC_WaitForSynchro>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00b      	beq.n	800a4d8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	22ff      	movs	r2, #255	; 0xff
 800a4c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e00a      	b.n	800a4ee <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	22ff      	movs	r2, #255	; 0xff
 800a4de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
  }
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd90      	pop	{r4, r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	00ffff3f 	.word	0x00ffff3f

0800a4fc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a4fc:	b590      	push	{r4, r7, lr}
 800a4fe:	b089      	sub	sp, #36	; 0x24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	7f1b      	ldrb	r3, [r3, #28]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d101      	bne.n	800a520 <HAL_RTC_SetAlarm+0x24>
 800a51c:	2302      	movs	r3, #2
 800a51e:	e101      	b.n	800a724 <HAL_RTC_SetAlarm+0x228>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2202      	movs	r2, #2
 800a52a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d137      	bne.n	800a5a2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 f942 	bl	800a7d4 <RTC_ByteToBcd2>
 800a550:	4603      	mov	r3, r0
 800a552:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f93b 	bl	800a7d4 <RTC_ByteToBcd2>
 800a55e:	4603      	mov	r3, r0
 800a560:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a562:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	789b      	ldrb	r3, [r3, #2]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f933 	bl	800a7d4 <RTC_ByteToBcd2>
 800a56e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a570:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	7b1b      	ldrb	r3, [r3, #12]
 800a578:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a57a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a584:	4618      	mov	r0, r3
 800a586:	f000 f925 	bl	800a7d4 <RTC_ByteToBcd2>
 800a58a:	4603      	mov	r3, r0
 800a58c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a58e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a596:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a59c:	4313      	orrs	r3, r2
 800a59e:	61fb      	str	r3, [r7, #28]
 800a5a0:	e023      	b.n	800a5ea <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5c2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	7b1b      	ldrb	r3, [r3, #12]
 800a5ce:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a5d0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5d8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	22ca      	movs	r2, #202	; 0xca
 800a5fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2253      	movs	r2, #83	; 0x53
 800a604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a60e:	d13f      	bne.n	800a690 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a61e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a62e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a630:	f7fb fe44 	bl	80062bc <HAL_GetTick>
 800a634:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a636:	e013      	b.n	800a660 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a638:	f7fb fe40 	bl	80062bc <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a646:	d90b      	bls.n	800a660 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	22ff      	movs	r2, #255	; 0xff
 800a64e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2203      	movs	r2, #3
 800a654:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e061      	b.n	800a724 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0e4      	beq.n	800a638 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a68c:	609a      	str	r2, [r3, #8]
 800a68e:	e03e      	b.n	800a70e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a69e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6ae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6b0:	f7fb fe04 	bl	80062bc <HAL_GetTick>
 800a6b4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a6b6:	e013      	b.n	800a6e0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6b8:	f7fb fe00 	bl	80062bc <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6c6:	d90b      	bls.n	800a6e0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	22ff      	movs	r2, #255	; 0xff
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2203      	movs	r2, #3
 800a6d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e021      	b.n	800a724 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0e4      	beq.n	800a6b8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69fa      	ldr	r2, [r7, #28]
 800a6f4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a70c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	22ff      	movs	r2, #255	; 0xff
 800a714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2201      	movs	r2, #1
 800a71a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3724      	adds	r7, #36	; 0x24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}

0800a72c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68da      	ldr	r2, [r3, #12]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a746:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a748:	f7fb fdb8 	bl	80062bc <HAL_GetTick>
 800a74c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a74e:	e009      	b.n	800a764 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a750:	f7fb fdb4 	bl	80062bc <HAL_GetTick>
 800a754:	4602      	mov	r2, r0
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a75e:	d901      	bls.n	800a764 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e007      	b.n	800a774 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0ee      	beq.n	800a750 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d119      	bne.n	800a7ca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f04f 32ff 	mov.w	r2, #4294967295
 800a79e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7a0:	f7fb fd8c 	bl	80062bc <HAL_GetTick>
 800a7a4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7a6:	e009      	b.n	800a7bc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7a8:	f7fb fd88 	bl	80062bc <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7b6:	d901      	bls.n	800a7bc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e007      	b.n	800a7cc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0ee      	beq.n	800a7a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a7e2:	e005      	b.n	800a7f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	3b0a      	subs	r3, #10
 800a7ee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	2b09      	cmp	r3, #9
 800a7f4:	d8f6      	bhi.n	800a7e4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	011b      	lsls	r3, r3, #4
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	4313      	orrs	r3, r2
 800a802:	b2db      	uxtb	r3, r3
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	7f1b      	ldrb	r3, [r3, #28]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d101      	bne.n	800a82c <HAL_RTCEx_SetTimeStamp+0x1c>
 800a828:	2302      	movs	r3, #2
 800a82a:	e03e      	b.n	800a8aa <HAL_RTCEx_SetTimeStamp+0x9a>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2201      	movs	r2, #1
 800a830:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2202      	movs	r2, #2
 800a836:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	4b1e      	ldr	r3, [pc, #120]	; (800a8b8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a840:	4013      	ands	r3, r2
 800a842:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	22ca      	movs	r2, #202	; 0xca
 800a852:	625a      	str	r2, [r3, #36]	; 0x24
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2253      	movs	r2, #83	; 0x53
 800a85a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0206 	bic.w	r2, r2, #6
 800a86a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	430a      	orrs	r2, r1
 800a87a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	689a      	ldr	r2, [r3, #8]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a892:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	22ff      	movs	r2, #255	; 0xff
 800a89a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	fffff7f7 	.word	0xfffff7f7

0800a8bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e025      	b.n	800a91c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7fb fba5 	bl	8006034 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f001 fff7 	bl	800c8f0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	461a      	mov	r2, r3
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	f002 f861 	bl	800c9d4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d101      	bne.n	800a940 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a93c:	2302      	movs	r3, #2
 800a93e:	e018      	b.n	800a972 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2202      	movs	r2, #2
 800a944:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	4618      	mov	r0, r3
 800a952:	f002 f8bf 	bl	800cad4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d104      	bne.n	800a968 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2205      	movs	r2, #5
 800a962:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a966:	e003      	b.n	800a970 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d101      	bne.n	800a994 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a990:	2302      	movs	r3, #2
 800a992:	e00e      	b.n	800a9b2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f002 f8b7 	bl	800cb16 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e084      	b.n	800aad6 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7fb f888 	bl	8005afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa0c:	d902      	bls.n	800aa14 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	e002      	b.n	800aa1a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aa22:	d007      	beq.n	800aa34 <HAL_SPI_Init+0x7a>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa2c:	d002      	beq.n	800aa34 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa44:	d903      	bls.n	800aa4e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	631a      	str	r2, [r3, #48]	; 0x30
 800aa4c:	e002      	b.n	800aa54 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	ea42 0103 	orr.w	r1, r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	0c1b      	lsrs	r3, r3, #16
 800aa94:	f003 0204 	and.w	r2, r3, #4
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	ea42 0103 	orr.w	r1, r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69da      	ldr	r2, [r3, #28]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e01d      	b.n	800ab2c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7fb f86b 	bl	8005be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2202      	movs	r2, #2
 800ab0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f000 fbc3 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689a      	ldr	r2, [r3, #8]
 800ab52:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <HAL_TIM_Base_Start_IT+0x50>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b06      	cmp	r3, #6
 800ab5c:	d00b      	beq.n	800ab76 <HAL_TIM_Base_Start_IT+0x42>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab64:	d007      	beq.n	800ab76 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f042 0201 	orr.w	r2, r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	00010007 	.word	0x00010007

0800ab88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e01d      	b.n	800abd6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d106      	bne.n	800abb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f815 	bl	800abde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f000 fb6e 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abde:	b480      	push	{r7}
 800abe0:	b083      	sub	sp, #12
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abe6:	bf00      	nop
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	f003 0302 	and.w	r3, r3, #2
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d122      	bne.n	800ac4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d11b      	bne.n	800ac4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f06f 0202 	mvn.w	r2, #2
 800ac1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	f003 0303 	and.w	r3, r3, #3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fb19 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800ac3a:	e005      	b.n	800ac48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fb0b 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fb1c 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d122      	bne.n	800aca2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d11b      	bne.n	800aca2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f06f 0204 	mvn.w	r2, #4
 800ac72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2202      	movs	r2, #2
 800ac78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d003      	beq.n	800ac90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 faef 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800ac8e:	e005      	b.n	800ac9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fae1 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 faf2 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b08      	cmp	r3, #8
 800acae:	d122      	bne.n	800acf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f003 0308 	and.w	r3, r3, #8
 800acba:	2b08      	cmp	r3, #8
 800acbc:	d11b      	bne.n	800acf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f06f 0208 	mvn.w	r2, #8
 800acc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2204      	movs	r2, #4
 800accc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fac5 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800ace2:	e005      	b.n	800acf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fab7 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fac8 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b10      	cmp	r3, #16
 800ad02:	d122      	bne.n	800ad4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	f003 0310 	and.w	r3, r3, #16
 800ad0e:	2b10      	cmp	r3, #16
 800ad10:	d11b      	bne.n	800ad4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f06f 0210 	mvn.w	r2, #16
 800ad1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2208      	movs	r2, #8
 800ad20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fa9b 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800ad36:	e005      	b.n	800ad44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fa8d 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa9e 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d10e      	bne.n	800ad76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d107      	bne.n	800ad76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f06f 0201 	mvn.w	r2, #1
 800ad6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7f8 fddd 	bl	8003930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad80:	2b80      	cmp	r3, #128	; 0x80
 800ad82:	d10e      	bne.n	800ada2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad8e:	2b80      	cmp	r3, #128	; 0x80
 800ad90:	d107      	bne.n	800ada2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 ffb9 	bl	800bd14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb0:	d10e      	bne.n	800add0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adbc:	2b80      	cmp	r3, #128	; 0x80
 800adbe:	d107      	bne.n	800add0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 ffac 	bl	800bd28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adda:	2b40      	cmp	r3, #64	; 0x40
 800addc:	d10e      	bne.n	800adfc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d107      	bne.n	800adfc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa4c 	bl	800b294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d10e      	bne.n	800ae28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f003 0320 	and.w	r3, r3, #32
 800ae14:	2b20      	cmp	r3, #32
 800ae16:	d107      	bne.n	800ae28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f06f 0220 	mvn.w	r2, #32
 800ae20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 ff6c 	bl	800bd00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d101      	bne.n	800ae4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ae46:	2302      	movs	r3, #2
 800ae48:	e105      	b.n	800b056 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2202      	movs	r2, #2
 800ae56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b14      	cmp	r3, #20
 800ae5e:	f200 80f0 	bhi.w	800b042 <HAL_TIM_PWM_ConfigChannel+0x212>
 800ae62:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800aebd 	.word	0x0800aebd
 800ae6c:	0800b043 	.word	0x0800b043
 800ae70:	0800b043 	.word	0x0800b043
 800ae74:	0800b043 	.word	0x0800b043
 800ae78:	0800aefd 	.word	0x0800aefd
 800ae7c:	0800b043 	.word	0x0800b043
 800ae80:	0800b043 	.word	0x0800b043
 800ae84:	0800b043 	.word	0x0800b043
 800ae88:	0800af3f 	.word	0x0800af3f
 800ae8c:	0800b043 	.word	0x0800b043
 800ae90:	0800b043 	.word	0x0800b043
 800ae94:	0800b043 	.word	0x0800b043
 800ae98:	0800af7f 	.word	0x0800af7f
 800ae9c:	0800b043 	.word	0x0800b043
 800aea0:	0800b043 	.word	0x0800b043
 800aea4:	0800b043 	.word	0x0800b043
 800aea8:	0800afc1 	.word	0x0800afc1
 800aeac:	0800b043 	.word	0x0800b043
 800aeb0:	0800b043 	.word	0x0800b043
 800aeb4:	0800b043 	.word	0x0800b043
 800aeb8:	0800b001 	.word	0x0800b001
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fa90 	bl	800b3e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0208 	orr.w	r2, r2, #8
 800aed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	699a      	ldr	r2, [r3, #24]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f022 0204 	bic.w	r2, r2, #4
 800aee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6999      	ldr	r1, [r3, #24]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	691a      	ldr	r2, [r3, #16]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	619a      	str	r2, [r3, #24]
      break;
 800aefa:	e0a3      	b.n	800b044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fae2 	bl	800b4cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6999      	ldr	r1, [r3, #24]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	021a      	lsls	r2, r3, #8
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	619a      	str	r2, [r3, #24]
      break;
 800af3c:	e082      	b.n	800b044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fb39 	bl	800b5bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	69da      	ldr	r2, [r3, #28]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0208 	orr.w	r2, r2, #8
 800af58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69da      	ldr	r2, [r3, #28]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0204 	bic.w	r2, r2, #4
 800af68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	69d9      	ldr	r1, [r3, #28]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	691a      	ldr	r2, [r3, #16]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	61da      	str	r2, [r3, #28]
      break;
 800af7c:	e062      	b.n	800b044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fb8f 	bl	800b6a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69da      	ldr	r2, [r3, #28]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69d9      	ldr	r1, [r3, #28]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	021a      	lsls	r2, r3, #8
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	61da      	str	r2, [r3, #28]
      break;
 800afbe:	e041      	b.n	800b044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 fbc6 	bl	800b758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f042 0208 	orr.w	r2, r2, #8
 800afda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0204 	bic.w	r2, r2, #4
 800afea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	691a      	ldr	r2, [r3, #16]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800affe:	e021      	b.n	800b044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68b9      	ldr	r1, [r7, #8]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fbf8 	bl	800b7fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b01a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b02a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	021a      	lsls	r2, r3, #8
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b040:	e000      	b.n	800b044 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800b042:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop

0800b060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b070:	2b01      	cmp	r3, #1
 800b072:	d101      	bne.n	800b078 <HAL_TIM_ConfigClockSource+0x18>
 800b074:	2302      	movs	r3, #2
 800b076:	e0a6      	b.n	800b1c6 <HAL_TIM_ConfigClockSource+0x166>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	4b4f      	ldr	r3, [pc, #316]	; (800b1d0 <HAL_TIM_ConfigClockSource+0x170>)
 800b094:	4013      	ands	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b09e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b40      	cmp	r3, #64	; 0x40
 800b0ae:	d067      	beq.n	800b180 <HAL_TIM_ConfigClockSource+0x120>
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	d80b      	bhi.n	800b0cc <HAL_TIM_ConfigClockSource+0x6c>
 800b0b4:	2b10      	cmp	r3, #16
 800b0b6:	d073      	beq.n	800b1a0 <HAL_TIM_ConfigClockSource+0x140>
 800b0b8:	2b10      	cmp	r3, #16
 800b0ba:	d802      	bhi.n	800b0c2 <HAL_TIM_ConfigClockSource+0x62>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d06f      	beq.n	800b1a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b0c0:	e078      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0c2:	2b20      	cmp	r3, #32
 800b0c4:	d06c      	beq.n	800b1a0 <HAL_TIM_ConfigClockSource+0x140>
 800b0c6:	2b30      	cmp	r3, #48	; 0x30
 800b0c8:	d06a      	beq.n	800b1a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b0ca:	e073      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0cc:	2b70      	cmp	r3, #112	; 0x70
 800b0ce:	d00d      	beq.n	800b0ec <HAL_TIM_ConfigClockSource+0x8c>
 800b0d0:	2b70      	cmp	r3, #112	; 0x70
 800b0d2:	d804      	bhi.n	800b0de <HAL_TIM_ConfigClockSource+0x7e>
 800b0d4:	2b50      	cmp	r3, #80	; 0x50
 800b0d6:	d033      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0xe0>
 800b0d8:	2b60      	cmp	r3, #96	; 0x60
 800b0da:	d041      	beq.n	800b160 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b0dc:	e06a      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e2:	d066      	beq.n	800b1b2 <HAL_TIM_ConfigClockSource+0x152>
 800b0e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e8:	d017      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b0ea:	e063      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6818      	ldr	r0, [r3, #0]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	6899      	ldr	r1, [r3, #8]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	f000 fcd4 	bl	800baa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b10e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	609a      	str	r2, [r3, #8]
      break;
 800b118:	e04c      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	6899      	ldr	r1, [r3, #8]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	f000 fcbd 	bl	800baa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689a      	ldr	r2, [r3, #8]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b13c:	609a      	str	r2, [r3, #8]
      break;
 800b13e:	e039      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	6859      	ldr	r1, [r3, #4]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	461a      	mov	r2, r3
 800b14e:	f000 fc31 	bl	800b9b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2150      	movs	r1, #80	; 0x50
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fc8a 	bl	800ba72 <TIM_ITRx_SetConfig>
      break;
 800b15e:	e029      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	6859      	ldr	r1, [r3, #4]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	461a      	mov	r2, r3
 800b16e:	f000 fc50 	bl	800ba12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2160      	movs	r1, #96	; 0x60
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fc7a 	bl	800ba72 <TIM_ITRx_SetConfig>
      break;
 800b17e:	e019      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	6859      	ldr	r1, [r3, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	461a      	mov	r2, r3
 800b18e:	f000 fc11 	bl	800b9b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2140      	movs	r1, #64	; 0x40
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fc6a 	bl	800ba72 <TIM_ITRx_SetConfig>
      break;
 800b19e:	e009      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	f000 fc61 	bl	800ba72 <TIM_ITRx_SetConfig>
      break;
 800b1b0:	e000      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b1b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	fffeff88 	.word	0xfffeff88

0800b1d4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIM_SlaveConfigSynchro+0x18>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e031      	b.n	800b250 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fb50 	bl	800b8a4 <TIM_SlaveTimer_SetConfig>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d009      	beq.n	800b21e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e018      	b.n	800b250 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68da      	ldr	r2, [r3, #12]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b23c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a40      	ldr	r2, [pc, #256]	; (800b3bc <TIM_Base_SetConfig+0x114>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d013      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c6:	d00f      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a3d      	ldr	r2, [pc, #244]	; (800b3c0 <TIM_Base_SetConfig+0x118>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d00b      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a3c      	ldr	r2, [pc, #240]	; (800b3c4 <TIM_Base_SetConfig+0x11c>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d007      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a3b      	ldr	r2, [pc, #236]	; (800b3c8 <TIM_Base_SetConfig+0x120>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d003      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a3a      	ldr	r2, [pc, #232]	; (800b3cc <TIM_Base_SetConfig+0x124>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d108      	bne.n	800b2fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a2f      	ldr	r2, [pc, #188]	; (800b3bc <TIM_Base_SetConfig+0x114>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d02b      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b308:	d027      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a2c      	ldr	r2, [pc, #176]	; (800b3c0 <TIM_Base_SetConfig+0x118>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d023      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a2b      	ldr	r2, [pc, #172]	; (800b3c4 <TIM_Base_SetConfig+0x11c>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d01f      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a2a      	ldr	r2, [pc, #168]	; (800b3c8 <TIM_Base_SetConfig+0x120>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d01b      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a29      	ldr	r2, [pc, #164]	; (800b3cc <TIM_Base_SetConfig+0x124>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d017      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a28      	ldr	r2, [pc, #160]	; (800b3d0 <TIM_Base_SetConfig+0x128>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d013      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a27      	ldr	r2, [pc, #156]	; (800b3d4 <TIM_Base_SetConfig+0x12c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00f      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a26      	ldr	r2, [pc, #152]	; (800b3d8 <TIM_Base_SetConfig+0x130>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00b      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a25      	ldr	r2, [pc, #148]	; (800b3dc <TIM_Base_SetConfig+0x134>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d007      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a24      	ldr	r2, [pc, #144]	; (800b3e0 <TIM_Base_SetConfig+0x138>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d003      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a23      	ldr	r2, [pc, #140]	; (800b3e4 <TIM_Base_SetConfig+0x13c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d108      	bne.n	800b36c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	4313      	orrs	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <TIM_Base_SetConfig+0x114>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d003      	beq.n	800b3a0 <TIM_Base_SetConfig+0xf8>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a0c      	ldr	r2, [pc, #48]	; (800b3cc <TIM_Base_SetConfig+0x124>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d103      	bne.n	800b3a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	615a      	str	r2, [r3, #20]
}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40000400 	.word	0x40000400
 800b3c4:	40000800 	.word	0x40000800
 800b3c8:	40000c00 	.word	0x40000c00
 800b3cc:	40010400 	.word	0x40010400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	40014400 	.word	0x40014400
 800b3d8:	40014800 	.word	0x40014800
 800b3dc:	40001800 	.word	0x40001800
 800b3e0:	40001c00 	.word	0x40001c00
 800b3e4:	40002000 	.word	0x40002000

0800b3e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	f023 0201 	bic.w	r2, r3, #1
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <TIM_OC1_SetConfig+0xd8>)
 800b414:	4013      	ands	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f023 0302 	bic.w	r3, r3, #2
 800b430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	4313      	orrs	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a21      	ldr	r2, [pc, #132]	; (800b4c4 <TIM_OC1_SetConfig+0xdc>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d003      	beq.n	800b44c <TIM_OC1_SetConfig+0x64>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a20      	ldr	r2, [pc, #128]	; (800b4c8 <TIM_OC1_SetConfig+0xe0>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d10c      	bne.n	800b466 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f023 0308 	bic.w	r3, r3, #8
 800b452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f023 0304 	bic.w	r3, r3, #4
 800b464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a16      	ldr	r2, [pc, #88]	; (800b4c4 <TIM_OC1_SetConfig+0xdc>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d003      	beq.n	800b476 <TIM_OC1_SetConfig+0x8e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a15      	ldr	r2, [pc, #84]	; (800b4c8 <TIM_OC1_SetConfig+0xe0>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d111      	bne.n	800b49a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	fffeff8f 	.word	0xfffeff8f
 800b4c4:	40010000 	.word	0x40010000
 800b4c8:	40010400 	.word	0x40010400

0800b4cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f023 0210 	bic.w	r2, r3, #16
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <TIM_OC2_SetConfig+0xe4>)
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	021b      	lsls	r3, r3, #8
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f023 0320 	bic.w	r3, r3, #32
 800b516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	4313      	orrs	r3, r2
 800b522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a23      	ldr	r2, [pc, #140]	; (800b5b4 <TIM_OC2_SetConfig+0xe8>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d003      	beq.n	800b534 <TIM_OC2_SetConfig+0x68>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a22      	ldr	r2, [pc, #136]	; (800b5b8 <TIM_OC2_SetConfig+0xec>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d10d      	bne.n	800b550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b53a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	4313      	orrs	r3, r2
 800b546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b54e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a18      	ldr	r2, [pc, #96]	; (800b5b4 <TIM_OC2_SetConfig+0xe8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_OC2_SetConfig+0x94>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a17      	ldr	r2, [pc, #92]	; (800b5b8 <TIM_OC2_SetConfig+0xec>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d113      	bne.n	800b588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b56e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	4313      	orrs	r3, r2
 800b57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	621a      	str	r2, [r3, #32]
}
 800b5a2:	bf00      	nop
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	feff8fff 	.word	0xfeff8fff
 800b5b4:	40010000 	.word	0x40010000
 800b5b8:	40010400 	.word	0x40010400

0800b5bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <TIM_OC3_SetConfig+0xe0>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	4313      	orrs	r3, r2
 800b610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a22      	ldr	r2, [pc, #136]	; (800b6a0 <TIM_OC3_SetConfig+0xe4>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d003      	beq.n	800b622 <TIM_OC3_SetConfig+0x66>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a21      	ldr	r2, [pc, #132]	; (800b6a4 <TIM_OC3_SetConfig+0xe8>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d10d      	bne.n	800b63e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	4313      	orrs	r3, r2
 800b634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a17      	ldr	r2, [pc, #92]	; (800b6a0 <TIM_OC3_SetConfig+0xe4>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d003      	beq.n	800b64e <TIM_OC3_SetConfig+0x92>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a16      	ldr	r2, [pc, #88]	; (800b6a4 <TIM_OC3_SetConfig+0xe8>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d113      	bne.n	800b676 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b65c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	4313      	orrs	r3, r2
 800b668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	4313      	orrs	r3, r2
 800b674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	621a      	str	r2, [r3, #32]
}
 800b690:	bf00      	nop
 800b692:	371c      	adds	r7, #28
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	fffeff8f 	.word	0xfffeff8f
 800b6a0:	40010000 	.word	0x40010000
 800b6a4:	40010400 	.word	0x40010400

0800b6a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4b1e      	ldr	r3, [pc, #120]	; (800b74c <TIM_OC4_SetConfig+0xa4>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	021b      	lsls	r3, r3, #8
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	031b      	lsls	r3, r3, #12
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a13      	ldr	r2, [pc, #76]	; (800b750 <TIM_OC4_SetConfig+0xa8>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d003      	beq.n	800b710 <TIM_OC4_SetConfig+0x68>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a12      	ldr	r2, [pc, #72]	; (800b754 <TIM_OC4_SetConfig+0xac>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d109      	bne.n	800b724 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	019b      	lsls	r3, r3, #6
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	621a      	str	r2, [r3, #32]
}
 800b73e:	bf00      	nop
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	feff8fff 	.word	0xfeff8fff
 800b750:	40010000 	.word	0x40010000
 800b754:	40010400 	.word	0x40010400

0800b758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <TIM_OC5_SetConfig+0x98>)
 800b784:	4013      	ands	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	041b      	lsls	r3, r3, #16
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a12      	ldr	r2, [pc, #72]	; (800b7f4 <TIM_OC5_SetConfig+0x9c>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d003      	beq.n	800b7b6 <TIM_OC5_SetConfig+0x5e>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a11      	ldr	r2, [pc, #68]	; (800b7f8 <TIM_OC5_SetConfig+0xa0>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d109      	bne.n	800b7ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	621a      	str	r2, [r3, #32]
}
 800b7e4:	bf00      	nop
 800b7e6:	371c      	adds	r7, #28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	fffeff8f 	.word	0xfffeff8f
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40010400 	.word	0x40010400

0800b7fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <TIM_OC6_SetConfig+0x9c>)
 800b828:	4013      	ands	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	4313      	orrs	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b83e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	051b      	lsls	r3, r3, #20
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a13      	ldr	r2, [pc, #76]	; (800b89c <TIM_OC6_SetConfig+0xa0>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d003      	beq.n	800b85c <TIM_OC6_SetConfig+0x60>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a12      	ldr	r2, [pc, #72]	; (800b8a0 <TIM_OC6_SetConfig+0xa4>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d109      	bne.n	800b870 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	029b      	lsls	r3, r3, #10
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	621a      	str	r2, [r3, #32]
}
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	feff8fff 	.word	0xfeff8fff
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	40010400 	.word	0x40010400

0800b8a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8bc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4b39      	ldr	r3, [pc, #228]	; (800b9b0 <TIM_SlaveTimer_SetConfig+0x10c>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	2b30      	cmp	r3, #48	; 0x30
 800b8e8:	d05c      	beq.n	800b9a4 <TIM_SlaveTimer_SetConfig+0x100>
 800b8ea:	2b30      	cmp	r3, #48	; 0x30
 800b8ec:	d806      	bhi.n	800b8fc <TIM_SlaveTimer_SetConfig+0x58>
 800b8ee:	2b10      	cmp	r3, #16
 800b8f0:	d058      	beq.n	800b9a4 <TIM_SlaveTimer_SetConfig+0x100>
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d056      	beq.n	800b9a4 <TIM_SlaveTimer_SetConfig+0x100>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d054      	beq.n	800b9a4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800b8fa:	e054      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b8fc:	2b50      	cmp	r3, #80	; 0x50
 800b8fe:	d03d      	beq.n	800b97c <TIM_SlaveTimer_SetConfig+0xd8>
 800b900:	2b50      	cmp	r3, #80	; 0x50
 800b902:	d802      	bhi.n	800b90a <TIM_SlaveTimer_SetConfig+0x66>
 800b904:	2b40      	cmp	r3, #64	; 0x40
 800b906:	d010      	beq.n	800b92a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800b908:	e04d      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b90a:	2b60      	cmp	r3, #96	; 0x60
 800b90c:	d040      	beq.n	800b990 <TIM_SlaveTimer_SetConfig+0xec>
 800b90e:	2b70      	cmp	r3, #112	; 0x70
 800b910:	d000      	beq.n	800b914 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800b912:	e048      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6818      	ldr	r0, [r3, #0]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	68d9      	ldr	r1, [r3, #12]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	f000 f8c0 	bl	800baa8 <TIM_ETR_SetConfig>
      break;
 800b928:	e03d      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b05      	cmp	r3, #5
 800b930:	d101      	bne.n	800b936 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e038      	b.n	800b9a8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6a1a      	ldr	r2, [r3, #32]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 0201 	bic.w	r2, r2, #1
 800b94c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b95c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	4313      	orrs	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	621a      	str	r2, [r3, #32]
      break;
 800b97a:	e014      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	6899      	ldr	r1, [r3, #8]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	461a      	mov	r2, r3
 800b98a:	f000 f813 	bl	800b9b4 <TIM_TI1_ConfigInputStage>
      break;
 800b98e:	e00a      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	6899      	ldr	r1, [r3, #8]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	461a      	mov	r2, r3
 800b99e:	f000 f838 	bl	800ba12 <TIM_TI2_ConfigInputStage>
      break;
 800b9a2:	e000      	b.n	800b9a6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800b9a4:	bf00      	nop
  }
  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	fffefff8 	.word	0xfffefff8

0800b9b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
 800b9c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	f023 0201 	bic.w	r2, r3, #1
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f023 030a 	bic.w	r3, r3, #10
 800b9f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	621a      	str	r2, [r3, #32]
}
 800ba06:	bf00      	nop
 800ba08:	371c      	adds	r7, #28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b087      	sub	sp, #28
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	60b9      	str	r1, [r7, #8]
 800ba1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	f023 0210 	bic.w	r2, r3, #16
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6a1b      	ldr	r3, [r3, #32]
 800ba34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	031b      	lsls	r3, r3, #12
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	011b      	lsls	r3, r3, #4
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	621a      	str	r2, [r3, #32]
}
 800ba66:	bf00      	nop
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b085      	sub	sp, #20
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	f043 0307 	orr.w	r3, r3, #7
 800ba94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	609a      	str	r2, [r3, #8]
}
 800ba9c:	bf00      	nop
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b087      	sub	sp, #28
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	021a      	lsls	r2, r3, #8
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	431a      	orrs	r2, r3
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	4313      	orrs	r3, r2
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	609a      	str	r2, [r3, #8]
}
 800badc:	bf00      	nop
 800bade:	371c      	adds	r7, #28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e06d      	b.n	800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2202      	movs	r2, #2
 800bb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a30      	ldr	r2, [pc, #192]	; (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d004      	beq.n	800bb34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a2f      	ldr	r2, [pc, #188]	; (800bbec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d108      	bne.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a20      	ldr	r2, [pc, #128]	; (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d022      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb72:	d01d      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a1d      	ldr	r2, [pc, #116]	; (800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d018      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a1c      	ldr	r2, [pc, #112]	; (800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d013      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a1a      	ldr	r2, [pc, #104]	; (800bbf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d00e      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a15      	ldr	r2, [pc, #84]	; (800bbec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d009      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a16      	ldr	r2, [pc, #88]	; (800bbfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d004      	beq.n	800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a15      	ldr	r2, [pc, #84]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d10c      	bne.n	800bbca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	40010000 	.word	0x40010000
 800bbec:	40010400 	.word	0x40010400
 800bbf0:	40000400 	.word	0x40000400
 800bbf4:	40000800 	.word	0x40000800
 800bbf8:	40000c00 	.word	0x40000c00
 800bbfc:	40014000 	.word	0x40014000
 800bc00:	40001800 	.word	0x40001800

0800bc04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d101      	bne.n	800bc20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	e065      	b.n	800bcec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc86:	4313      	orrs	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	041b      	lsls	r3, r3, #16
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a16      	ldr	r2, [pc, #88]	; (800bcf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d004      	beq.n	800bcae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a14      	ldr	r2, [pc, #80]	; (800bcfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d115      	bne.n	800bcda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	051b      	lsls	r3, r3, #20
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	40010000 	.word	0x40010000
 800bcfc:	40010400 	.word	0x40010400

0800bd00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e040      	b.n	800bdd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d106      	bne.n	800bd64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7fa f80a 	bl	8005d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2224      	movs	r2, #36	; 0x24
 800bd68:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 0201 	bic.w	r2, r2, #1
 800bd78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f972 	bl	800c064 <UART_SetConfig>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d101      	bne.n	800bd8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e022      	b.n	800bdd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d002      	beq.n	800bd98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fc10 	bl	800c5b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bda6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689a      	ldr	r2, [r3, #8]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fc97 	bl	800c6fc <UART_CheckIdleState>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b088      	sub	sp, #32
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800bdfe:	4013      	ands	r3, r2
 800be00:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d113      	bne.n	800be30 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f003 0320 	and.w	r3, r3, #32
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00e      	beq.n	800be30 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d009      	beq.n	800be30 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8100 	beq.w	800c026 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	4798      	blx	r3
      }
      return;
 800be2e:	e0fa      	b.n	800c026 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 80d5 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d105      	bne.n	800be4e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 80ca 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00e      	beq.n	800be76 <HAL_UART_IRQHandler+0x9e>
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d009      	beq.n	800be76 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2201      	movs	r2, #1
 800be68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6e:	f043 0201 	orr.w	r2, r3, #1
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00e      	beq.n	800be9e <HAL_UART_IRQHandler+0xc6>
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d009      	beq.n	800be9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2202      	movs	r2, #2
 800be90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	f043 0204 	orr.w	r2, r3, #4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	f003 0304 	and.w	r3, r3, #4
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00e      	beq.n	800bec6 <HAL_UART_IRQHandler+0xee>
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d009      	beq.n	800bec6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2204      	movs	r2, #4
 800beb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bebe:	f043 0202 	orr.w	r2, r3, #2
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	f003 0308 	and.w	r3, r3, #8
 800becc:	2b00      	cmp	r3, #0
 800bece:	d013      	beq.n	800bef8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	f003 0320 	and.w	r3, r3, #32
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d104      	bne.n	800bee4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2208      	movs	r2, #8
 800beea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef0:	f043 0208 	orr.w	r2, r3, #8
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00f      	beq.n	800bf22 <HAL_UART_IRQHandler+0x14a>
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf1a:	f043 0220 	orr.w	r2, r3, #32
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d07f      	beq.n	800c02a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	f003 0320 	and.w	r3, r3, #32
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00c      	beq.n	800bf4e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	f003 0320 	and.w	r3, r3, #32
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d007      	beq.n	800bf4e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf52:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5e:	2b40      	cmp	r3, #64	; 0x40
 800bf60:	d004      	beq.n	800bf6c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d031      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fc6f 	bl	800c850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7c:	2b40      	cmp	r3, #64	; 0x40
 800bf7e:	d123      	bne.n	800bfc8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf8e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d013      	beq.n	800bfc0 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf9c:	4a26      	ldr	r2, [pc, #152]	; (800c038 <HAL_UART_IRQHandler+0x260>)
 800bf9e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fb f84d 	bl	8007044 <HAL_DMA_Abort_IT>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d016      	beq.n	800bfde <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bfba:	4610      	mov	r0, r2
 800bfbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfbe:	e00e      	b.n	800bfde <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f845 	bl	800c050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc6:	e00a      	b.n	800bfde <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f841 	bl	800c050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfce:	e006      	b.n	800bfde <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f83d 	bl	800c050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800bfdc:	e025      	b.n	800c02a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfde:	bf00      	nop
    return;
 800bfe0:	e023      	b.n	800c02a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00d      	beq.n	800c008 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d008      	beq.n	800c008 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d017      	beq.n	800c02e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	4798      	blx	r3
    }
    return;
 800c006:	e012      	b.n	800c02e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00e      	beq.n	800c030 <HAL_UART_IRQHandler+0x258>
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d009      	beq.n	800c030 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fc4d 	bl	800c8bc <UART_EndTransmit_IT>
    return;
 800c022:	bf00      	nop
 800c024:	e004      	b.n	800c030 <HAL_UART_IRQHandler+0x258>
      return;
 800c026:	bf00      	nop
 800c028:	e002      	b.n	800c030 <HAL_UART_IRQHandler+0x258>
    return;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <HAL_UART_IRQHandler+0x258>
    return;
 800c02e:	bf00      	nop
  }

}
 800c030:	3720      	adds	r7, #32
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0800c891 	.word	0x0800c891

0800c03c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	431a      	orrs	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	431a      	orrs	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	4313      	orrs	r3, r2
 800c08a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4bb1      	ldr	r3, [pc, #708]	; (800c358 <UART_SetConfig+0x2f4>)
 800c094:	4013      	ands	r3, r2
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	6812      	ldr	r2, [r2, #0]
 800c09a:	6939      	ldr	r1, [r7, #16]
 800c09c:	430b      	orrs	r3, r1
 800c09e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a1b      	ldr	r3, [r3, #32]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a9f      	ldr	r2, [pc, #636]	; (800c35c <UART_SetConfig+0x2f8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d121      	bne.n	800c128 <UART_SetConfig+0xc4>
 800c0e4:	4b9e      	ldr	r3, [pc, #632]	; (800c360 <UART_SetConfig+0x2fc>)
 800c0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ea:	f003 0303 	and.w	r3, r3, #3
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d816      	bhi.n	800c120 <UART_SetConfig+0xbc>
 800c0f2:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <UART_SetConfig+0x94>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c109 	.word	0x0800c109
 800c0fc:	0800c115 	.word	0x0800c115
 800c100:	0800c10f 	.word	0x0800c10f
 800c104:	0800c11b 	.word	0x0800c11b
 800c108:	2301      	movs	r3, #1
 800c10a:	77fb      	strb	r3, [r7, #31]
 800c10c:	e151      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c10e:	2302      	movs	r3, #2
 800c110:	77fb      	strb	r3, [r7, #31]
 800c112:	e14e      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c114:	2304      	movs	r3, #4
 800c116:	77fb      	strb	r3, [r7, #31]
 800c118:	e14b      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c11a:	2308      	movs	r3, #8
 800c11c:	77fb      	strb	r3, [r7, #31]
 800c11e:	e148      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c120:	2310      	movs	r3, #16
 800c122:	77fb      	strb	r3, [r7, #31]
 800c124:	bf00      	nop
 800c126:	e144      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a8d      	ldr	r2, [pc, #564]	; (800c364 <UART_SetConfig+0x300>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d134      	bne.n	800c19c <UART_SetConfig+0x138>
 800c132:	4b8b      	ldr	r3, [pc, #556]	; (800c360 <UART_SetConfig+0x2fc>)
 800c134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c138:	f003 030c 	and.w	r3, r3, #12
 800c13c:	2b0c      	cmp	r3, #12
 800c13e:	d829      	bhi.n	800c194 <UART_SetConfig+0x130>
 800c140:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <UART_SetConfig+0xe4>)
 800c142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c146:	bf00      	nop
 800c148:	0800c17d 	.word	0x0800c17d
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800c195 	.word	0x0800c195
 800c158:	0800c189 	.word	0x0800c189
 800c15c:	0800c195 	.word	0x0800c195
 800c160:	0800c195 	.word	0x0800c195
 800c164:	0800c195 	.word	0x0800c195
 800c168:	0800c183 	.word	0x0800c183
 800c16c:	0800c195 	.word	0x0800c195
 800c170:	0800c195 	.word	0x0800c195
 800c174:	0800c195 	.word	0x0800c195
 800c178:	0800c18f 	.word	0x0800c18f
 800c17c:	2300      	movs	r3, #0
 800c17e:	77fb      	strb	r3, [r7, #31]
 800c180:	e117      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c182:	2302      	movs	r3, #2
 800c184:	77fb      	strb	r3, [r7, #31]
 800c186:	e114      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c188:	2304      	movs	r3, #4
 800c18a:	77fb      	strb	r3, [r7, #31]
 800c18c:	e111      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c18e:	2308      	movs	r3, #8
 800c190:	77fb      	strb	r3, [r7, #31]
 800c192:	e10e      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c194:	2310      	movs	r3, #16
 800c196:	77fb      	strb	r3, [r7, #31]
 800c198:	bf00      	nop
 800c19a:	e10a      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a71      	ldr	r2, [pc, #452]	; (800c368 <UART_SetConfig+0x304>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d120      	bne.n	800c1e8 <UART_SetConfig+0x184>
 800c1a6:	4b6e      	ldr	r3, [pc, #440]	; (800c360 <UART_SetConfig+0x2fc>)
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	d00f      	beq.n	800c1d4 <UART_SetConfig+0x170>
 800c1b4:	2b10      	cmp	r3, #16
 800c1b6:	d802      	bhi.n	800c1be <UART_SetConfig+0x15a>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d005      	beq.n	800c1c8 <UART_SetConfig+0x164>
 800c1bc:	e010      	b.n	800c1e0 <UART_SetConfig+0x17c>
 800c1be:	2b20      	cmp	r3, #32
 800c1c0:	d005      	beq.n	800c1ce <UART_SetConfig+0x16a>
 800c1c2:	2b30      	cmp	r3, #48	; 0x30
 800c1c4:	d009      	beq.n	800c1da <UART_SetConfig+0x176>
 800c1c6:	e00b      	b.n	800c1e0 <UART_SetConfig+0x17c>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	77fb      	strb	r3, [r7, #31]
 800c1cc:	e0f1      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	77fb      	strb	r3, [r7, #31]
 800c1d2:	e0ee      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c1d4:	2304      	movs	r3, #4
 800c1d6:	77fb      	strb	r3, [r7, #31]
 800c1d8:	e0eb      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c1da:	2308      	movs	r3, #8
 800c1dc:	77fb      	strb	r3, [r7, #31]
 800c1de:	e0e8      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c1e0:	2310      	movs	r3, #16
 800c1e2:	77fb      	strb	r3, [r7, #31]
 800c1e4:	bf00      	nop
 800c1e6:	e0e4      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a5f      	ldr	r2, [pc, #380]	; (800c36c <UART_SetConfig+0x308>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d120      	bne.n	800c234 <UART_SetConfig+0x1d0>
 800c1f2:	4b5b      	ldr	r3, [pc, #364]	; (800c360 <UART_SetConfig+0x2fc>)
 800c1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d00f      	beq.n	800c220 <UART_SetConfig+0x1bc>
 800c200:	2b40      	cmp	r3, #64	; 0x40
 800c202:	d802      	bhi.n	800c20a <UART_SetConfig+0x1a6>
 800c204:	2b00      	cmp	r3, #0
 800c206:	d005      	beq.n	800c214 <UART_SetConfig+0x1b0>
 800c208:	e010      	b.n	800c22c <UART_SetConfig+0x1c8>
 800c20a:	2b80      	cmp	r3, #128	; 0x80
 800c20c:	d005      	beq.n	800c21a <UART_SetConfig+0x1b6>
 800c20e:	2bc0      	cmp	r3, #192	; 0xc0
 800c210:	d009      	beq.n	800c226 <UART_SetConfig+0x1c2>
 800c212:	e00b      	b.n	800c22c <UART_SetConfig+0x1c8>
 800c214:	2300      	movs	r3, #0
 800c216:	77fb      	strb	r3, [r7, #31]
 800c218:	e0cb      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c21a:	2302      	movs	r3, #2
 800c21c:	77fb      	strb	r3, [r7, #31]
 800c21e:	e0c8      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c220:	2304      	movs	r3, #4
 800c222:	77fb      	strb	r3, [r7, #31]
 800c224:	e0c5      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c226:	2308      	movs	r3, #8
 800c228:	77fb      	strb	r3, [r7, #31]
 800c22a:	e0c2      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c22c:	2310      	movs	r3, #16
 800c22e:	77fb      	strb	r3, [r7, #31]
 800c230:	bf00      	nop
 800c232:	e0be      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a4d      	ldr	r2, [pc, #308]	; (800c370 <UART_SetConfig+0x30c>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d124      	bne.n	800c288 <UART_SetConfig+0x224>
 800c23e:	4b48      	ldr	r3, [pc, #288]	; (800c360 <UART_SetConfig+0x2fc>)
 800c240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c24c:	d012      	beq.n	800c274 <UART_SetConfig+0x210>
 800c24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c252:	d802      	bhi.n	800c25a <UART_SetConfig+0x1f6>
 800c254:	2b00      	cmp	r3, #0
 800c256:	d007      	beq.n	800c268 <UART_SetConfig+0x204>
 800c258:	e012      	b.n	800c280 <UART_SetConfig+0x21c>
 800c25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c25e:	d006      	beq.n	800c26e <UART_SetConfig+0x20a>
 800c260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c264:	d009      	beq.n	800c27a <UART_SetConfig+0x216>
 800c266:	e00b      	b.n	800c280 <UART_SetConfig+0x21c>
 800c268:	2300      	movs	r3, #0
 800c26a:	77fb      	strb	r3, [r7, #31]
 800c26c:	e0a1      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c26e:	2302      	movs	r3, #2
 800c270:	77fb      	strb	r3, [r7, #31]
 800c272:	e09e      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c274:	2304      	movs	r3, #4
 800c276:	77fb      	strb	r3, [r7, #31]
 800c278:	e09b      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c27a:	2308      	movs	r3, #8
 800c27c:	77fb      	strb	r3, [r7, #31]
 800c27e:	e098      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c280:	2310      	movs	r3, #16
 800c282:	77fb      	strb	r3, [r7, #31]
 800c284:	bf00      	nop
 800c286:	e094      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a39      	ldr	r2, [pc, #228]	; (800c374 <UART_SetConfig+0x310>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d124      	bne.n	800c2dc <UART_SetConfig+0x278>
 800c292:	4b33      	ldr	r3, [pc, #204]	; (800c360 <UART_SetConfig+0x2fc>)
 800c294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a0:	d012      	beq.n	800c2c8 <UART_SetConfig+0x264>
 800c2a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a6:	d802      	bhi.n	800c2ae <UART_SetConfig+0x24a>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d007      	beq.n	800c2bc <UART_SetConfig+0x258>
 800c2ac:	e012      	b.n	800c2d4 <UART_SetConfig+0x270>
 800c2ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2b2:	d006      	beq.n	800c2c2 <UART_SetConfig+0x25e>
 800c2b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2b8:	d009      	beq.n	800c2ce <UART_SetConfig+0x26a>
 800c2ba:	e00b      	b.n	800c2d4 <UART_SetConfig+0x270>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	77fb      	strb	r3, [r7, #31]
 800c2c0:	e077      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	77fb      	strb	r3, [r7, #31]
 800c2c6:	e074      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c2c8:	2304      	movs	r3, #4
 800c2ca:	77fb      	strb	r3, [r7, #31]
 800c2cc:	e071      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c2ce:	2308      	movs	r3, #8
 800c2d0:	77fb      	strb	r3, [r7, #31]
 800c2d2:	e06e      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	77fb      	strb	r3, [r7, #31]
 800c2d8:	bf00      	nop
 800c2da:	e06a      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a25      	ldr	r2, [pc, #148]	; (800c378 <UART_SetConfig+0x314>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d124      	bne.n	800c330 <UART_SetConfig+0x2cc>
 800c2e6:	4b1e      	ldr	r3, [pc, #120]	; (800c360 <UART_SetConfig+0x2fc>)
 800c2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2f4:	d012      	beq.n	800c31c <UART_SetConfig+0x2b8>
 800c2f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2fa:	d802      	bhi.n	800c302 <UART_SetConfig+0x29e>
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <UART_SetConfig+0x2ac>
 800c300:	e012      	b.n	800c328 <UART_SetConfig+0x2c4>
 800c302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c306:	d006      	beq.n	800c316 <UART_SetConfig+0x2b2>
 800c308:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c30c:	d009      	beq.n	800c322 <UART_SetConfig+0x2be>
 800c30e:	e00b      	b.n	800c328 <UART_SetConfig+0x2c4>
 800c310:	2300      	movs	r3, #0
 800c312:	77fb      	strb	r3, [r7, #31]
 800c314:	e04d      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c316:	2302      	movs	r3, #2
 800c318:	77fb      	strb	r3, [r7, #31]
 800c31a:	e04a      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c31c:	2304      	movs	r3, #4
 800c31e:	77fb      	strb	r3, [r7, #31]
 800c320:	e047      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c322:	2308      	movs	r3, #8
 800c324:	77fb      	strb	r3, [r7, #31]
 800c326:	e044      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c328:	2310      	movs	r3, #16
 800c32a:	77fb      	strb	r3, [r7, #31]
 800c32c:	bf00      	nop
 800c32e:	e040      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a11      	ldr	r2, [pc, #68]	; (800c37c <UART_SetConfig+0x318>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d139      	bne.n	800c3ae <UART_SetConfig+0x34a>
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <UART_SetConfig+0x2fc>)
 800c33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c348:	d027      	beq.n	800c39a <UART_SetConfig+0x336>
 800c34a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c34e:	d817      	bhi.n	800c380 <UART_SetConfig+0x31c>
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01c      	beq.n	800c38e <UART_SetConfig+0x32a>
 800c354:	e027      	b.n	800c3a6 <UART_SetConfig+0x342>
 800c356:	bf00      	nop
 800c358:	efff69f3 	.word	0xefff69f3
 800c35c:	40011000 	.word	0x40011000
 800c360:	40023800 	.word	0x40023800
 800c364:	40004400 	.word	0x40004400
 800c368:	40004800 	.word	0x40004800
 800c36c:	40004c00 	.word	0x40004c00
 800c370:	40005000 	.word	0x40005000
 800c374:	40011400 	.word	0x40011400
 800c378:	40007800 	.word	0x40007800
 800c37c:	40007c00 	.word	0x40007c00
 800c380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c384:	d006      	beq.n	800c394 <UART_SetConfig+0x330>
 800c386:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c38a:	d009      	beq.n	800c3a0 <UART_SetConfig+0x33c>
 800c38c:	e00b      	b.n	800c3a6 <UART_SetConfig+0x342>
 800c38e:	2300      	movs	r3, #0
 800c390:	77fb      	strb	r3, [r7, #31]
 800c392:	e00e      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c394:	2302      	movs	r3, #2
 800c396:	77fb      	strb	r3, [r7, #31]
 800c398:	e00b      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c39a:	2304      	movs	r3, #4
 800c39c:	77fb      	strb	r3, [r7, #31]
 800c39e:	e008      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	77fb      	strb	r3, [r7, #31]
 800c3a4:	e005      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c3a6:	2310      	movs	r3, #16
 800c3a8:	77fb      	strb	r3, [r7, #31]
 800c3aa:	bf00      	nop
 800c3ac:	e001      	b.n	800c3b2 <UART_SetConfig+0x34e>
 800c3ae:	2310      	movs	r3, #16
 800c3b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3ba:	d17f      	bne.n	800c4bc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800c3bc:	7ffb      	ldrb	r3, [r7, #31]
 800c3be:	2b08      	cmp	r3, #8
 800c3c0:	d85c      	bhi.n	800c47c <UART_SetConfig+0x418>
 800c3c2:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <UART_SetConfig+0x364>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3ed 	.word	0x0800c3ed
 800c3cc:	0800c40d 	.word	0x0800c40d
 800c3d0:	0800c42d 	.word	0x0800c42d
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c445 	.word	0x0800c445
 800c3dc:	0800c47d 	.word	0x0800c47d
 800c3e0:	0800c47d 	.word	0x0800c47d
 800c3e4:	0800c47d 	.word	0x0800c47d
 800c3e8:	0800c465 	.word	0x0800c465
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3ec:	f7fd fa5c 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 800c3f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	005a      	lsls	r2, r3, #1
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	085b      	lsrs	r3, r3, #1
 800c3fc:	441a      	add	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	fbb2 f3f3 	udiv	r3, r2, r3
 800c406:	b29b      	uxth	r3, r3
 800c408:	61bb      	str	r3, [r7, #24]
        break;
 800c40a:	e03a      	b.n	800c482 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c40c:	f7fd fa60 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 800c410:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	005a      	lsls	r2, r3, #1
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	441a      	add	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	fbb2 f3f3 	udiv	r3, r2, r3
 800c426:	b29b      	uxth	r3, r3
 800c428:	61bb      	str	r3, [r7, #24]
        break;
 800c42a:	e02a      	b.n	800c482 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	085a      	lsrs	r2, r3, #1
 800c432:	4b5f      	ldr	r3, [pc, #380]	; (800c5b0 <UART_SetConfig+0x54c>)
 800c434:	4413      	add	r3, r2
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	6852      	ldr	r2, [r2, #4]
 800c43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c43e:	b29b      	uxth	r3, r3
 800c440:	61bb      	str	r3, [r7, #24]
        break;
 800c442:	e01e      	b.n	800c482 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c444:	f7fd f972 	bl	800972c <HAL_RCC_GetSysClockFreq>
 800c448:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	005a      	lsls	r2, r3, #1
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	085b      	lsrs	r3, r3, #1
 800c454:	441a      	add	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c45e:	b29b      	uxth	r3, r3
 800c460:	61bb      	str	r3, [r7, #24]
        break;
 800c462:	e00e      	b.n	800c482 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	085b      	lsrs	r3, r3, #1
 800c46a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	fbb2 f3f3 	udiv	r3, r2, r3
 800c476:	b29b      	uxth	r3, r3
 800c478:	61bb      	str	r3, [r7, #24]
        break;
 800c47a:	e002      	b.n	800c482 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	75fb      	strb	r3, [r7, #23]
        break;
 800c480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	2b0f      	cmp	r3, #15
 800c486:	d916      	bls.n	800c4b6 <UART_SetConfig+0x452>
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48e:	d212      	bcs.n	800c4b6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	b29b      	uxth	r3, r3
 800c494:	f023 030f 	bic.w	r3, r3, #15
 800c498:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	085b      	lsrs	r3, r3, #1
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	f003 0307 	and.w	r3, r3, #7
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	897b      	ldrh	r3, [r7, #10]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	897a      	ldrh	r2, [r7, #10]
 800c4b2:	60da      	str	r2, [r3, #12]
 800c4b4:	e070      	b.n	800c598 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	75fb      	strb	r3, [r7, #23]
 800c4ba:	e06d      	b.n	800c598 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800c4bc:	7ffb      	ldrb	r3, [r7, #31]
 800c4be:	2b08      	cmp	r3, #8
 800c4c0:	d859      	bhi.n	800c576 <UART_SetConfig+0x512>
 800c4c2:	a201      	add	r2, pc, #4	; (adr r2, 800c4c8 <UART_SetConfig+0x464>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c4ed 	.word	0x0800c4ed
 800c4cc:	0800c50b 	.word	0x0800c50b
 800c4d0:	0800c529 	.word	0x0800c529
 800c4d4:	0800c577 	.word	0x0800c577
 800c4d8:	0800c541 	.word	0x0800c541
 800c4dc:	0800c577 	.word	0x0800c577
 800c4e0:	0800c577 	.word	0x0800c577
 800c4e4:	0800c577 	.word	0x0800c577
 800c4e8:	0800c55f 	.word	0x0800c55f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4ec:	f7fd f9dc 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 800c4f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	085a      	lsrs	r2, r3, #1
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	441a      	add	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	fbb2 f3f3 	udiv	r3, r2, r3
 800c504:	b29b      	uxth	r3, r3
 800c506:	61bb      	str	r3, [r7, #24]
        break;
 800c508:	e038      	b.n	800c57c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c50a:	f7fd f9e1 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 800c50e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	085a      	lsrs	r2, r3, #1
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	441a      	add	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c522:	b29b      	uxth	r3, r3
 800c524:	61bb      	str	r3, [r7, #24]
        break;
 800c526:	e029      	b.n	800c57c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	085a      	lsrs	r2, r3, #1
 800c52e:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <UART_SetConfig+0x550>)
 800c530:	4413      	add	r3, r2
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	6852      	ldr	r2, [r2, #4]
 800c536:	fbb3 f3f2 	udiv	r3, r3, r2
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	61bb      	str	r3, [r7, #24]
        break;
 800c53e:	e01d      	b.n	800c57c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c540:	f7fd f8f4 	bl	800972c <HAL_RCC_GetSysClockFreq>
 800c544:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	085a      	lsrs	r2, r3, #1
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	441a      	add	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	fbb2 f3f3 	udiv	r3, r2, r3
 800c558:	b29b      	uxth	r3, r3
 800c55a:	61bb      	str	r3, [r7, #24]
        break;
 800c55c:	e00e      	b.n	800c57c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	085b      	lsrs	r3, r3, #1
 800c564:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c570:	b29b      	uxth	r3, r3
 800c572:	61bb      	str	r3, [r7, #24]
        break;
 800c574:	e002      	b.n	800c57c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	75fb      	strb	r3, [r7, #23]
        break;
 800c57a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	2b0f      	cmp	r3, #15
 800c580:	d908      	bls.n	800c594 <UART_SetConfig+0x530>
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c588:	d204      	bcs.n	800c594 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	69ba      	ldr	r2, [r7, #24]
 800c590:	60da      	str	r2, [r3, #12]
 800c592:	e001      	b.n	800c598 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3720      	adds	r7, #32
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	01e84800 	.word	0x01e84800
 800c5b4:	00f42400 	.word	0x00f42400

0800c5b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00a      	beq.n	800c5e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	430a      	orrs	r2, r1
 800c5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00a      	beq.n	800c604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	430a      	orrs	r2, r1
 800c602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00a      	beq.n	800c626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	430a      	orrs	r2, r1
 800c624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62a:	f003 0308 	and.w	r3, r3, #8
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00a      	beq.n	800c648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	430a      	orrs	r2, r1
 800c646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64c:	f003 0310 	and.w	r3, r3, #16
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00a      	beq.n	800c66a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	430a      	orrs	r2, r1
 800c668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66e:	f003 0320 	and.w	r3, r3, #32
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00a      	beq.n	800c68c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	430a      	orrs	r2, r1
 800c68a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c694:	2b00      	cmp	r3, #0
 800c696:	d01a      	beq.n	800c6ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	430a      	orrs	r2, r1
 800c6ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6b6:	d10a      	bne.n	800c6ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00a      	beq.n	800c6f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	430a      	orrs	r2, r1
 800c6ee:	605a      	str	r2, [r3, #4]
  }
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af02      	add	r7, sp, #8
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c70a:	f7f9 fdd7 	bl	80062bc <HAL_GetTick>
 800c70e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 0308 	and.w	r3, r3, #8
 800c71a:	2b08      	cmp	r3, #8
 800c71c:	d10e      	bne.n	800c73c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c71e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f814 	bl	800c75a <UART_WaitOnFlagUntilTimeout>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e00a      	b.n	800c752 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2220      	movs	r2, #32
 800c740:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2220      	movs	r2, #32
 800c746:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	603b      	str	r3, [r7, #0]
 800c766:	4613      	mov	r3, r2
 800c768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c76a:	e05d      	b.n	800c828 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c772:	d059      	beq.n	800c828 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c774:	f7f9 fda2 	bl	80062bc <HAL_GetTick>
 800c778:	4602      	mov	r2, r0
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	429a      	cmp	r2, r3
 800c782:	d302      	bcc.n	800c78a <UART_WaitOnFlagUntilTimeout+0x30>
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d11b      	bne.n	800c7c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c798:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689a      	ldr	r2, [r3, #8]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f022 0201 	bic.w	r2, r2, #1
 800c7a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2220      	movs	r2, #32
 800c7ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e042      	b.n	800c848 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f003 0304 	and.w	r3, r3, #4
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d02b      	beq.n	800c828 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7de:	d123      	bne.n	800c828 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c7f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689a      	ldr	r2, [r3, #8]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f022 0201 	bic.w	r2, r2, #1
 800c808:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2220      	movs	r2, #32
 800c80e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2220      	movs	r2, #32
 800c814:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2220      	movs	r2, #32
 800c81a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e00f      	b.n	800c848 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69da      	ldr	r2, [r3, #28]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	4013      	ands	r3, r2
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	429a      	cmp	r2, r3
 800c836:	bf0c      	ite	eq
 800c838:	2301      	moveq	r3, #1
 800c83a:	2300      	movne	r3, #0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	461a      	mov	r2, r3
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	429a      	cmp	r2, r3
 800c844:	d092      	beq.n	800c76c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c866:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0201 	bic.w	r2, r2, #1
 800c876:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2220      	movs	r2, #32
 800c87c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff fbce 	bl	800c050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff fbab 	bl	800c03c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8e6:	bf00      	nop
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d027      	beq.n	800c95a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4b2f      	ldr	r3, [pc, #188]	; (800c9d0 <FMC_SDRAM_Init+0xe0>)
 800c914:	4013      	ands	r3, r2
 800c916:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c920:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c926:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c92c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c932:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c938:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c93e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c944:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c94a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	4313      	orrs	r3, r2
 800c950:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	601a      	str	r2, [r3, #0]
 800c958:	e032      	b.n	800c9c0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c966:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c970:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c976:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	4b12      	ldr	r3, [pc, #72]	; (800c9d0 <FMC_SDRAM_Init+0xe0>)
 800c988:	4013      	ands	r3, r2
 800c98a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c994:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c99a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c9a0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c9a6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c9ac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	ffff8000 	.word	0xffff8000

0800c9d4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d02e      	beq.n	800ca4c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9fa:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ca0a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ca14:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ca1e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ca28:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ca32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	609a      	str	r2, [r3, #8]
 800ca4a:	e039      	b.n	800cac0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	4b1e      	ldr	r3, [pc, #120]	; (800cad0 <FMC_SDRAM_Timing_Init+0xfc>)
 800ca56:	4013      	ands	r3, r2
 800ca58:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	3b01      	subs	r3, #1
 800ca68:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca7e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ca8e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ca98:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800caa2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800caac:	4313      	orrs	r3, r2
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	ff0f0fff 	.word	0xff0f0fff

0800cad4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b087      	sub	sp, #28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800caec:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800caf6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800cafe:	4313      	orrs	r3, r2
 800cb00:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	371c      	adds	r7, #28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	695a      	ldr	r2, [r3, #20]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cb46:	2300      	movs	r3, #0
 800cb48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cb4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb4e:	2b84      	cmp	r3, #132	; 0x84
 800cb50:	d005      	beq.n	800cb5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cb52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	4413      	add	r3, r2
 800cb5a:	3303      	adds	r3, #3
 800cb5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cb70:	f001 f830 	bl	800dbd4 <vTaskStartScheduler>
  
  return osOK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cb7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7c:	b089      	sub	sp, #36	; 0x24
 800cb7e:	af04      	add	r7, sp, #16
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d020      	beq.n	800cbce <osThreadCreate+0x54>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d01c      	beq.n	800cbce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685c      	ldr	r4, [r3, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681d      	ldr	r5, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691e      	ldr	r6, [r3, #16]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7ff ffc8 	bl	800cb3c <makeFreeRtosPriority>
 800cbac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cbb6:	9202      	str	r2, [sp, #8]
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	9100      	str	r1, [sp, #0]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	4632      	mov	r2, r6
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f000 fdae 	bl	800d724 <xTaskCreateStatic>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	e01c      	b.n	800cc08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685c      	ldr	r4, [r3, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cbda:	b29e      	uxth	r6, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7ff ffaa 	bl	800cb3c <makeFreeRtosPriority>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	f107 030c 	add.w	r3, r7, #12
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	9200      	str	r2, [sp, #0]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 fdf3 	bl	800d7e4 <xTaskCreate>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d001      	beq.n	800cc08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e000      	b.n	800cc0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cc08:	68fb      	ldr	r3, [r7, #12]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b084      	sub	sp, #16
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <osDelay+0x16>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	e000      	b.n	800cc2a <osDelay+0x18>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 ff9c 	bl	800db68 <vTaskDelay>
  
  return osOK;
 800cc30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d007      	beq.n	800cc5a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	2001      	movs	r0, #1
 800cc52:	f000 fa38 	bl	800d0c6 <xQueueCreateMutexStatic>
 800cc56:	4603      	mov	r3, r0
 800cc58:	e003      	b.n	800cc62 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cc5a:	2001      	movs	r0, #1
 800cc5c:	f000 fa1b 	bl	800d096 <xQueueCreateMutex>
 800cc60:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f103 0208 	add.w	r2, r3, #8
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f103 0208 	add.w	r2, r3, #8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f103 0208 	add.w	r2, r3, #8
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689a      	ldr	r2, [r3, #8]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	683a      	ldr	r2, [r7, #0]
 800ccee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	601a      	str	r2, [r3, #0]
}
 800cd00:	bf00      	nop
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd22:	d103      	bne.n	800cd2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	e00c      	b.n	800cd46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	e002      	b.n	800cd3a <vListInsert+0x2e>
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d2f6      	bcs.n	800cd34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	601a      	str	r2, [r3, #0]
}
 800cd72:	bf00      	nop
 800cd74:	3714      	adds	r7, #20
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b085      	sub	sp, #20
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	6892      	ldr	r2, [r2, #8]
 800cd94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	6852      	ldr	r2, [r2, #4]
 800cd9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d103      	bne.n	800cdb2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	1e5a      	subs	r2, r3, #1
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
	...

0800cdd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10b      	bne.n	800ce00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdec:	b672      	cpsid	i
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	b662      	cpsie	i
 800cdfc:	60bb      	str	r3, [r7, #8]
 800cdfe:	e7fe      	b.n	800cdfe <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800ce00:	f001 fe6a 	bl	800ead8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0c:	68f9      	ldr	r1, [r7, #12]
 800ce0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce10:	fb01 f303 	mul.w	r3, r1, r3
 800ce14:	441a      	add	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce30:	3b01      	subs	r3, #1
 800ce32:	68f9      	ldr	r1, [r7, #12]
 800ce34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce36:	fb01 f303 	mul.w	r3, r1, r3
 800ce3a:	441a      	add	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	22ff      	movs	r2, #255	; 0xff
 800ce44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	22ff      	movs	r2, #255	; 0xff
 800ce4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d114      	bne.n	800ce80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d01a      	beq.n	800ce94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3310      	adds	r3, #16
 800ce62:	4618      	mov	r0, r3
 800ce64:	f001 f936 	bl	800e0d4 <xTaskRemoveFromEventList>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d012      	beq.n	800ce94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	; (800cea4 <xQueueGenericReset+0xd0>)
 800ce70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	e009      	b.n	800ce94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	3310      	adds	r3, #16
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7ff fef0 	bl	800cc6a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3324      	adds	r3, #36	; 0x24
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff feeb 	bl	800cc6a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce94:	f001 fe52 	bl	800eb3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce98:	2301      	movs	r3, #1
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	e000ed04 	.word	0xe000ed04

0800cea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08e      	sub	sp, #56	; 0x38
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <xQueueGenericCreateStatic+0x2c>
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	b672      	cpsid	i
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	b662      	cpsie	i
 800ced0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ced2:	e7fe      	b.n	800ced2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <xQueueGenericCreateStatic+0x4a>
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	b672      	cpsid	i
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	b662      	cpsie	i
 800ceee:	627b      	str	r3, [r7, #36]	; 0x24
 800cef0:	e7fe      	b.n	800cef0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <xQueueGenericCreateStatic+0x56>
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <xQueueGenericCreateStatic+0x5a>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e000      	b.n	800cf04 <xQueueGenericCreateStatic+0x5c>
 800cf02:	2300      	movs	r3, #0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10b      	bne.n	800cf20 <xQueueGenericCreateStatic+0x78>
 800cf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0c:	b672      	cpsid	i
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	b662      	cpsie	i
 800cf1c:	623b      	str	r3, [r7, #32]
 800cf1e:	e7fe      	b.n	800cf1e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <xQueueGenericCreateStatic+0x84>
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <xQueueGenericCreateStatic+0x88>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e000      	b.n	800cf32 <xQueueGenericCreateStatic+0x8a>
 800cf30:	2300      	movs	r3, #0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <xQueueGenericCreateStatic+0xa6>
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	b672      	cpsid	i
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	b662      	cpsie	i
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	e7fe      	b.n	800cf4c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf4e:	2348      	movs	r3, #72	; 0x48
 800cf50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2b48      	cmp	r3, #72	; 0x48
 800cf56:	d00b      	beq.n	800cf70 <xQueueGenericCreateStatic+0xc8>
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	b672      	cpsid	i
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	b662      	cpsie	i
 800cf6c:	61bb      	str	r3, [r7, #24]
 800cf6e:	e7fe      	b.n	800cf6e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00d      	beq.n	800cf98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 f846 	bl	800d024 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3730      	adds	r7, #48	; 0x30
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b08a      	sub	sp, #40	; 0x28
 800cfa6:	af02      	add	r7, sp, #8
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	4613      	mov	r3, r2
 800cfae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10b      	bne.n	800cfce <xQueueGenericCreate+0x2c>
 800cfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfba:	b672      	cpsid	i
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	b662      	cpsie	i
 800cfca:	613b      	str	r3, [r7, #16]
 800cfcc:	e7fe      	b.n	800cfcc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d102      	bne.n	800cfda <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61fb      	str	r3, [r7, #28]
 800cfd8:	e004      	b.n	800cfe4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
 800cfe2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	3348      	adds	r3, #72	; 0x48
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f001 fe55 	bl	800ec98 <pvPortMalloc>
 800cfee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d011      	beq.n	800d01a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	3348      	adds	r3, #72	; 0x48
 800cffe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d008:	79fa      	ldrb	r2, [r7, #7]
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	4613      	mov	r3, r2
 800d010:	697a      	ldr	r2, [r7, #20]
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 f805 	bl	800d024 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d01a:	69bb      	ldr	r3, [r7, #24]
	}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
 800d030:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d103      	bne.n	800d040 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	69ba      	ldr	r2, [r7, #24]
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	e002      	b.n	800d046 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d052:	2101      	movs	r1, #1
 800d054:	69b8      	ldr	r0, [r7, #24]
 800d056:	f7ff febd 	bl	800cdd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d05a:	bf00      	nop
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00e      	beq.n	800d08e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d082:	2300      	movs	r3, #0
 800d084:	2200      	movs	r2, #0
 800d086:	2100      	movs	r1, #0
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f837 	bl	800d0fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d08e:	bf00      	nop
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	4603      	mov	r3, r0
 800d09e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6939      	ldr	r1, [r7, #16]
 800d0ae:	6978      	ldr	r0, [r7, #20]
 800d0b0:	f7ff ff77 	bl	800cfa2 <xQueueGenericCreate>
 800d0b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f7ff ffd3 	bl	800d062 <prvInitialiseMutex>

		return xNewQueue;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
	}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b088      	sub	sp, #32
 800d0ca:	af02      	add	r7, sp, #8
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	6039      	str	r1, [r7, #0]
 800d0d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	617b      	str	r3, [r7, #20]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	6939      	ldr	r1, [r7, #16]
 800d0e4:	6978      	ldr	r0, [r7, #20]
 800d0e6:	f7ff fedf 	bl	800cea8 <xQueueGenericCreateStatic>
 800d0ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7ff ffb8 	bl	800d062 <prvInitialiseMutex>

		return xNewQueue;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
	}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3718      	adds	r7, #24
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08e      	sub	sp, #56	; 0x38
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d10a:	2300      	movs	r3, #0
 800d10c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10b      	bne.n	800d130 <xQueueGenericSend+0x34>
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	b672      	cpsid	i
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	b662      	cpsie	i
 800d12c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d12e:	e7fe      	b.n	800d12e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <xQueueGenericSend+0x42>
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <xQueueGenericSend+0x46>
 800d13e:	2301      	movs	r3, #1
 800d140:	e000      	b.n	800d144 <xQueueGenericSend+0x48>
 800d142:	2300      	movs	r3, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10b      	bne.n	800d160 <xQueueGenericSend+0x64>
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	b672      	cpsid	i
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	b662      	cpsie	i
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
 800d15e:	e7fe      	b.n	800d15e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d103      	bne.n	800d16e <xQueueGenericSend+0x72>
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d101      	bne.n	800d172 <xQueueGenericSend+0x76>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <xQueueGenericSend+0x78>
 800d172:	2300      	movs	r3, #0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10b      	bne.n	800d190 <xQueueGenericSend+0x94>
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	b672      	cpsid	i
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	b662      	cpsie	i
 800d18c:	623b      	str	r3, [r7, #32]
 800d18e:	e7fe      	b.n	800d18e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d190:	f001 f960 	bl	800e454 <xTaskGetSchedulerState>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d102      	bne.n	800d1a0 <xQueueGenericSend+0xa4>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <xQueueGenericSend+0xa8>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <xQueueGenericSend+0xaa>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10b      	bne.n	800d1c2 <xQueueGenericSend+0xc6>
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	b672      	cpsid	i
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	b662      	cpsie	i
 800d1be:	61fb      	str	r3, [r7, #28]
 800d1c0:	e7fe      	b.n	800d1c0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1c2:	f001 fc89 	bl	800ead8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d302      	bcc.n	800d1d8 <xQueueGenericSend+0xdc>
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d129      	bne.n	800d22c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	68b9      	ldr	r1, [r7, #8]
 800d1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1de:	f000 f9b7 	bl	800d550 <prvCopyDataToQueue>
 800d1e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d010      	beq.n	800d20e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	3324      	adds	r3, #36	; 0x24
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 ff6f 	bl	800e0d4 <xTaskRemoveFromEventList>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d013      	beq.n	800d224 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1fc:	4b3f      	ldr	r3, [pc, #252]	; (800d2fc <xQueueGenericSend+0x200>)
 800d1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	e00a      	b.n	800d224 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d007      	beq.n	800d224 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d214:	4b39      	ldr	r3, [pc, #228]	; (800d2fc <xQueueGenericSend+0x200>)
 800d216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d224:	f001 fc8a 	bl	800eb3c <vPortExitCritical>
				return pdPASS;
 800d228:	2301      	movs	r3, #1
 800d22a:	e063      	b.n	800d2f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d103      	bne.n	800d23a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d232:	f001 fc83 	bl	800eb3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d236:	2300      	movs	r3, #0
 800d238:	e05c      	b.n	800d2f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d240:	f107 0314 	add.w	r3, r7, #20
 800d244:	4618      	mov	r0, r3
 800d246:	f000 ffa9 	bl	800e19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d24a:	2301      	movs	r3, #1
 800d24c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d24e:	f001 fc75 	bl	800eb3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d252:	f000 fd21 	bl	800dc98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d256:	f001 fc3f 	bl	800ead8 <vPortEnterCritical>
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d260:	b25b      	sxtb	r3, r3
 800d262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d266:	d103      	bne.n	800d270 <xQueueGenericSend+0x174>
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d276:	b25b      	sxtb	r3, r3
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d103      	bne.n	800d286 <xQueueGenericSend+0x18a>
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d286:	f001 fc59 	bl	800eb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d28a:	1d3a      	adds	r2, r7, #4
 800d28c:	f107 0314 	add.w	r3, r7, #20
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f000 ff98 	bl	800e1c8 <xTaskCheckForTimeOut>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d124      	bne.n	800d2e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d29e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a0:	f000 fa28 	bl	800d6f4 <prvIsQueueFull>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d018      	beq.n	800d2dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	3310      	adds	r3, #16
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 fee8 	bl	800e088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ba:	f000 f9b3 	bl	800d624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2be:	f000 fcf9 	bl	800dcb4 <xTaskResumeAll>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f47f af7c 	bne.w	800d1c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d2ca:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <xQueueGenericSend+0x200>)
 800d2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d0:	601a      	str	r2, [r3, #0]
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	e772      	b.n	800d1c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2de:	f000 f9a1 	bl	800d624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2e2:	f000 fce7 	bl	800dcb4 <xTaskResumeAll>
 800d2e6:	e76c      	b.n	800d1c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ea:	f000 f99b 	bl	800d624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2ee:	f000 fce1 	bl	800dcb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3738      	adds	r7, #56	; 0x38
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	e000ed04 	.word	0xe000ed04

0800d300 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08e      	sub	sp, #56	; 0x38
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d30a:	2300      	movs	r3, #0
 800d30c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d312:	2300      	movs	r3, #0
 800d314:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10b      	bne.n	800d334 <xQueueSemaphoreTake+0x34>
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	b672      	cpsid	i
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	b662      	cpsie	i
 800d330:	623b      	str	r3, [r7, #32]
 800d332:	e7fe      	b.n	800d332 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <xQueueSemaphoreTake+0x54>
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	b672      	cpsid	i
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	b662      	cpsie	i
 800d350:	61fb      	str	r3, [r7, #28]
 800d352:	e7fe      	b.n	800d352 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d354:	f001 f87e 	bl	800e454 <xTaskGetSchedulerState>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d102      	bne.n	800d364 <xQueueSemaphoreTake+0x64>
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d101      	bne.n	800d368 <xQueueSemaphoreTake+0x68>
 800d364:	2301      	movs	r3, #1
 800d366:	e000      	b.n	800d36a <xQueueSemaphoreTake+0x6a>
 800d368:	2300      	movs	r3, #0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10b      	bne.n	800d386 <xQueueSemaphoreTake+0x86>
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	b672      	cpsid	i
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	b662      	cpsie	i
 800d382:	61bb      	str	r3, [r7, #24]
 800d384:	e7fe      	b.n	800d384 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d386:	f001 fba7 	bl	800ead8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d392:	2b00      	cmp	r3, #0
 800d394:	d024      	beq.n	800d3e0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d398:	1e5a      	subs	r2, r3, #1
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d104      	bne.n	800d3b0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d3a6:	f001 fa17 	bl	800e7d8 <pvTaskIncrementMutexHeldCount>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00f      	beq.n	800d3d8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	3310      	adds	r3, #16
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 fe89 	bl	800e0d4 <xTaskRemoveFromEventList>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d007      	beq.n	800d3d8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d3c8:	4b54      	ldr	r3, [pc, #336]	; (800d51c <xQueueSemaphoreTake+0x21c>)
 800d3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3d8:	f001 fbb0 	bl	800eb3c <vPortExitCritical>
				return pdPASS;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e098      	b.n	800d512 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d112      	bne.n	800d40c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00b      	beq.n	800d404 <xQueueSemaphoreTake+0x104>
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	b672      	cpsid	i
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	b662      	cpsie	i
 800d400:	617b      	str	r3, [r7, #20]
 800d402:	e7fe      	b.n	800d402 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d404:	f001 fb9a 	bl	800eb3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d408:	2300      	movs	r3, #0
 800d40a:	e082      	b.n	800d512 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d106      	bne.n	800d420 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d412:	f107 030c 	add.w	r3, r7, #12
 800d416:	4618      	mov	r0, r3
 800d418:	f000 fec0 	bl	800e19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d41c:	2301      	movs	r3, #1
 800d41e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d420:	f001 fb8c 	bl	800eb3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d424:	f000 fc38 	bl	800dc98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d428:	f001 fb56 	bl	800ead8 <vPortEnterCritical>
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d432:	b25b      	sxtb	r3, r3
 800d434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d438:	d103      	bne.n	800d442 <xQueueSemaphoreTake+0x142>
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d448:	b25b      	sxtb	r3, r3
 800d44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44e:	d103      	bne.n	800d458 <xQueueSemaphoreTake+0x158>
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	2200      	movs	r2, #0
 800d454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d458:	f001 fb70 	bl	800eb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d45c:	463a      	mov	r2, r7
 800d45e:	f107 030c 	add.w	r3, r7, #12
 800d462:	4611      	mov	r1, r2
 800d464:	4618      	mov	r0, r3
 800d466:	f000 feaf 	bl	800e1c8 <xTaskCheckForTimeOut>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d132      	bne.n	800d4d6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d472:	f000 f929 	bl	800d6c8 <prvIsQueueEmpty>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d026      	beq.n	800d4ca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d484:	f001 fb28 	bl	800ead8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 ffff 	bl	800e490 <xTaskPriorityInherit>
 800d492:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d494:	f001 fb52 	bl	800eb3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	3324      	adds	r3, #36	; 0x24
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fdf1 	bl	800e088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4a8:	f000 f8bc 	bl	800d624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4ac:	f000 fc02 	bl	800dcb4 <xTaskResumeAll>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f47f af67 	bne.w	800d386 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d4b8:	4b18      	ldr	r3, [pc, #96]	; (800d51c <xQueueSemaphoreTake+0x21c>)
 800d4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	e75d      	b.n	800d386 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4cc:	f000 f8aa 	bl	800d624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4d0:	f000 fbf0 	bl	800dcb4 <xTaskResumeAll>
 800d4d4:	e757      	b.n	800d386 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4d8:	f000 f8a4 	bl	800d624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4dc:	f000 fbea 	bl	800dcb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e2:	f000 f8f1 	bl	800d6c8 <prvIsQueueEmpty>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f43f af4c 	beq.w	800d386 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00d      	beq.n	800d510 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d4f4:	f001 faf0 	bl	800ead8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4fa:	f000 f811 	bl	800d520 <prvGetDisinheritPriorityAfterTimeout>
 800d4fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d506:	4618      	mov	r0, r3
 800d508:	f001 f8ca 	bl	800e6a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d50c:	f001 fb16 	bl	800eb3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d512:	4618      	mov	r0, r3
 800d514:	3738      	adds	r7, #56	; 0x38
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	e000ed04 	.word	0xe000ed04

0800d520 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d006      	beq.n	800d53e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f1c3 0307 	rsb	r3, r3, #7
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	e001      	b.n	800d542 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d53e:	2300      	movs	r3, #0
 800d540:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d542:	68fb      	ldr	r3, [r7, #12]
	}
 800d544:	4618      	mov	r0, r3
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10d      	bne.n	800d58a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d14d      	bne.n	800d612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f001 f808 	bl	800e590 <xTaskPriorityDisinherit>
 800d580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	609a      	str	r2, [r3, #8]
 800d588:	e043      	b.n	800d612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d119      	bne.n	800d5c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6858      	ldr	r0, [r3, #4]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d598:	461a      	mov	r2, r3
 800d59a:	68b9      	ldr	r1, [r7, #8]
 800d59c:	f001 fd8a 	bl	800f0b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	685a      	ldr	r2, [r3, #4]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a8:	441a      	add	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d32b      	bcc.n	800d612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	605a      	str	r2, [r3, #4]
 800d5c2:	e026      	b.n	800d612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68d8      	ldr	r0, [r3, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	f001 fd70 	bl	800f0b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	68da      	ldr	r2, [r3, #12]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5dc:	425b      	negs	r3, r3
 800d5de:	441a      	add	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	68da      	ldr	r2, [r3, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d207      	bcs.n	800d600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	689a      	ldr	r2, [r3, #8]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f8:	425b      	negs	r3, r3
 800d5fa:	441a      	add	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d105      	bne.n	800d612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	3b01      	subs	r3, #1
 800d610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d61a:	697b      	ldr	r3, [r7, #20]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d62c:	f001 fa54 	bl	800ead8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d638:	e011      	b.n	800d65e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d012      	beq.n	800d668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	3324      	adds	r3, #36	; 0x24
 800d646:	4618      	mov	r0, r3
 800d648:	f000 fd44 	bl	800e0d4 <xTaskRemoveFromEventList>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d652:	f000 fe1d 	bl	800e290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	3b01      	subs	r3, #1
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d662:	2b00      	cmp	r3, #0
 800d664:	dce9      	bgt.n	800d63a <prvUnlockQueue+0x16>
 800d666:	e000      	b.n	800d66a <prvUnlockQueue+0x46>
					break;
 800d668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	22ff      	movs	r2, #255	; 0xff
 800d66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d672:	f001 fa63 	bl	800eb3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d676:	f001 fa2f 	bl	800ead8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d682:	e011      	b.n	800d6a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d012      	beq.n	800d6b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3310      	adds	r3, #16
 800d690:	4618      	mov	r0, r3
 800d692:	f000 fd1f 	bl	800e0d4 <xTaskRemoveFromEventList>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d69c:	f000 fdf8 	bl	800e290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	dce9      	bgt.n	800d684 <prvUnlockQueue+0x60>
 800d6b0:	e000      	b.n	800d6b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	22ff      	movs	r2, #255	; 0xff
 800d6b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d6bc:	f001 fa3e 	bl	800eb3c <vPortExitCritical>
}
 800d6c0:	bf00      	nop
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6d0:	f001 fa02 	bl	800ead8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d102      	bne.n	800d6e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	60fb      	str	r3, [r7, #12]
 800d6e0:	e001      	b.n	800d6e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6e6:	f001 fa29 	bl	800eb3c <vPortExitCritical>

	return xReturn;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6fc:	f001 f9ec 	bl	800ead8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d708:	429a      	cmp	r2, r3
 800d70a:	d102      	bne.n	800d712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d70c:	2301      	movs	r3, #1
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	e001      	b.n	800d716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d712:	2300      	movs	r3, #0
 800d714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d716:	f001 fa11 	bl	800eb3c <vPortExitCritical>

	return xReturn;
 800d71a:	68fb      	ldr	r3, [r7, #12]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08e      	sub	sp, #56	; 0x38
 800d728:	af04      	add	r7, sp, #16
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10b      	bne.n	800d750 <xTaskCreateStatic+0x2c>
 800d738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73c:	b672      	cpsid	i
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	b662      	cpsie	i
 800d74c:	623b      	str	r3, [r7, #32]
 800d74e:	e7fe      	b.n	800d74e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10b      	bne.n	800d76e <xTaskCreateStatic+0x4a>
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	b672      	cpsid	i
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	b662      	cpsie	i
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	e7fe      	b.n	800d76c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d76e:	2358      	movs	r3, #88	; 0x58
 800d770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	2b58      	cmp	r3, #88	; 0x58
 800d776:	d00b      	beq.n	800d790 <xTaskCreateStatic+0x6c>
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	b672      	cpsid	i
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	b662      	cpsie	i
 800d78c:	61bb      	str	r3, [r7, #24]
 800d78e:	e7fe      	b.n	800d78e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d790:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	2b00      	cmp	r3, #0
 800d796:	d01e      	beq.n	800d7d6 <xTaskCreateStatic+0xb2>
 800d798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d01b      	beq.n	800d7d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9303      	str	r3, [sp, #12]
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	9302      	str	r3, [sp, #8]
 800d7b8:	f107 0314 	add.w	r3, r7, #20
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	68b9      	ldr	r1, [r7, #8]
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f000 f850 	bl	800d86e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7d0:	f000 f8e0 	bl	800d994 <prvAddNewTaskToReadyList>
 800d7d4:	e001      	b.n	800d7da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7da:	697b      	ldr	r3, [r7, #20]
	}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3728      	adds	r7, #40	; 0x28
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	; 0x30
 800d7e8:	af04      	add	r7, sp, #16
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	603b      	str	r3, [r7, #0]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7f4:	88fb      	ldrh	r3, [r7, #6]
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f001 fa4d 	bl	800ec98 <pvPortMalloc>
 800d7fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00e      	beq.n	800d824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d806:	2058      	movs	r0, #88	; 0x58
 800d808:	f001 fa46 	bl	800ec98 <pvPortMalloc>
 800d80c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d003      	beq.n	800d81c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	631a      	str	r2, [r3, #48]	; 0x30
 800d81a:	e005      	b.n	800d828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d81c:	6978      	ldr	r0, [r7, #20]
 800d81e:	f001 fb07 	bl	800ee30 <vPortFree>
 800d822:	e001      	b.n	800d828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d824:	2300      	movs	r3, #0
 800d826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d017      	beq.n	800d85e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d836:	88fa      	ldrh	r2, [r7, #6]
 800d838:	2300      	movs	r3, #0
 800d83a:	9303      	str	r3, [sp, #12]
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	9302      	str	r3, [sp, #8]
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	9301      	str	r3, [sp, #4]
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	68b9      	ldr	r1, [r7, #8]
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 f80e 	bl	800d86e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d852:	69f8      	ldr	r0, [r7, #28]
 800d854:	f000 f89e 	bl	800d994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d858:	2301      	movs	r3, #1
 800d85a:	61bb      	str	r3, [r7, #24]
 800d85c:	e002      	b.n	800d864 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d85e:	f04f 33ff 	mov.w	r3, #4294967295
 800d862:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d864:	69bb      	ldr	r3, [r7, #24]
	}
 800d866:	4618      	mov	r0, r3
 800d868:	3720      	adds	r7, #32
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b088      	sub	sp, #32
 800d872:	af00      	add	r7, sp, #0
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	607a      	str	r2, [r7, #4]
 800d87a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	461a      	mov	r2, r3
 800d886:	21a5      	movs	r1, #165	; 0xa5
 800d888:	f001 fc1f 	bl	800f0ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d890:	6879      	ldr	r1, [r7, #4]
 800d892:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d896:	440b      	add	r3, r1
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	f023 0307 	bic.w	r3, r3, #7
 800d8a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	f003 0307 	and.w	r3, r3, #7
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00b      	beq.n	800d8c8 <prvInitialiseNewTask+0x5a>
 800d8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b4:	b672      	cpsid	i
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	b662      	cpsie	i
 800d8c4:	617b      	str	r3, [r7, #20]
 800d8c6:	e7fe      	b.n	800d8c6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d01f      	beq.n	800d90e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	61fb      	str	r3, [r7, #28]
 800d8d2:	e012      	b.n	800d8fa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	4413      	add	r3, r2
 800d8da:	7819      	ldrb	r1, [r3, #0]
 800d8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	3334      	adds	r3, #52	; 0x34
 800d8e4:	460a      	mov	r2, r1
 800d8e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d006      	beq.n	800d902 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	2b0f      	cmp	r3, #15
 800d8fe:	d9e9      	bls.n	800d8d4 <prvInitialiseNewTask+0x66>
 800d900:	e000      	b.n	800d904 <prvInitialiseNewTask+0x96>
			{
				break;
 800d902:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d90c:	e003      	b.n	800d916 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	2b06      	cmp	r3, #6
 800d91a:	d901      	bls.n	800d920 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d91c:	2306      	movs	r3, #6
 800d91e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d924:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d92a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	2200      	movs	r2, #0
 800d930:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d934:	3304      	adds	r3, #4
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff f9b7 	bl	800ccaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	3318      	adds	r3, #24
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff f9b2 	bl	800ccaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d94a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94e:	f1c3 0207 	rsb	r2, r3, #7
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d95a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2200      	movs	r2, #0
 800d960:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	2200      	movs	r2, #0
 800d966:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	68f9      	ldr	r1, [r7, #12]
 800d974:	69b8      	ldr	r0, [r7, #24]
 800d976:	f000 ffa9 	bl	800e8cc <pxPortInitialiseStack>
 800d97a:	4602      	mov	r2, r0
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d98a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d98c:	bf00      	nop
 800d98e:	3720      	adds	r7, #32
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d99c:	f001 f89c 	bl	800ead8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9a0:	4b2a      	ldr	r3, [pc, #168]	; (800da4c <prvAddNewTaskToReadyList+0xb8>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	4a29      	ldr	r2, [pc, #164]	; (800da4c <prvAddNewTaskToReadyList+0xb8>)
 800d9a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9aa:	4b29      	ldr	r3, [pc, #164]	; (800da50 <prvAddNewTaskToReadyList+0xbc>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d109      	bne.n	800d9c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9b2:	4a27      	ldr	r2, [pc, #156]	; (800da50 <prvAddNewTaskToReadyList+0xbc>)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9b8:	4b24      	ldr	r3, [pc, #144]	; (800da4c <prvAddNewTaskToReadyList+0xb8>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d110      	bne.n	800d9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9c0:	f000 fc8c 	bl	800e2dc <prvInitialiseTaskLists>
 800d9c4:	e00d      	b.n	800d9e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9c6:	4b23      	ldr	r3, [pc, #140]	; (800da54 <prvAddNewTaskToReadyList+0xc0>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d109      	bne.n	800d9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9ce:	4b20      	ldr	r3, [pc, #128]	; (800da50 <prvAddNewTaskToReadyList+0xbc>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d802      	bhi.n	800d9e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9dc:	4a1c      	ldr	r2, [pc, #112]	; (800da50 <prvAddNewTaskToReadyList+0xbc>)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9e2:	4b1d      	ldr	r3, [pc, #116]	; (800da58 <prvAddNewTaskToReadyList+0xc4>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	4a1b      	ldr	r2, [pc, #108]	; (800da58 <prvAddNewTaskToReadyList+0xc4>)
 800d9ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	409a      	lsls	r2, r3
 800d9f4:	4b19      	ldr	r3, [pc, #100]	; (800da5c <prvAddNewTaskToReadyList+0xc8>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	4a18      	ldr	r2, [pc, #96]	; (800da5c <prvAddNewTaskToReadyList+0xc8>)
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da02:	4613      	mov	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4a15      	ldr	r2, [pc, #84]	; (800da60 <prvAddNewTaskToReadyList+0xcc>)
 800da0c:	441a      	add	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3304      	adds	r3, #4
 800da12:	4619      	mov	r1, r3
 800da14:	4610      	mov	r0, r2
 800da16:	f7ff f955 	bl	800ccc4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da1a:	f001 f88f 	bl	800eb3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da1e:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <prvAddNewTaskToReadyList+0xc0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00e      	beq.n	800da44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da26:	4b0a      	ldr	r3, [pc, #40]	; (800da50 <prvAddNewTaskToReadyList+0xbc>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da30:	429a      	cmp	r2, r3
 800da32:	d207      	bcs.n	800da44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da34:	4b0b      	ldr	r3, [pc, #44]	; (800da64 <prvAddNewTaskToReadyList+0xd0>)
 800da36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20001a1c 	.word	0x20001a1c
 800da50:	2000191c 	.word	0x2000191c
 800da54:	20001a28 	.word	0x20001a28
 800da58:	20001a38 	.word	0x20001a38
 800da5c:	20001a24 	.word	0x20001a24
 800da60:	20001920 	.word	0x20001920
 800da64:	e000ed04 	.word	0xe000ed04

0800da68 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08a      	sub	sp, #40	; 0x28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800da72:	2300      	movs	r3, #0
 800da74:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10b      	bne.n	800da94 <vTaskDelayUntil+0x2c>
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	b672      	cpsid	i
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	b662      	cpsie	i
 800da90:	617b      	str	r3, [r7, #20]
 800da92:	e7fe      	b.n	800da92 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10b      	bne.n	800dab2 <vTaskDelayUntil+0x4a>
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	b672      	cpsid	i
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	b662      	cpsie	i
 800daae:	613b      	str	r3, [r7, #16]
 800dab0:	e7fe      	b.n	800dab0 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800dab2:	4b2a      	ldr	r3, [pc, #168]	; (800db5c <vTaskDelayUntil+0xf4>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00b      	beq.n	800dad2 <vTaskDelayUntil+0x6a>
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	b672      	cpsid	i
 800dac0:	f383 8811 	msr	BASEPRI, r3
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	f3bf 8f4f 	dsb	sy
 800dacc:	b662      	cpsie	i
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	e7fe      	b.n	800dad0 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800dad2:	f000 f8e1 	bl	800dc98 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800dad6:	4b22      	ldr	r3, [pc, #136]	; (800db60 <vTaskDelayUntil+0xf8>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	4413      	add	r3, r2
 800dae4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6a3a      	ldr	r2, [r7, #32]
 800daec:	429a      	cmp	r2, r3
 800daee:	d20b      	bcs.n	800db08 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	69fa      	ldr	r2, [r7, #28]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d211      	bcs.n	800db1e <vTaskDelayUntil+0xb6>
 800dafa:	69fa      	ldr	r2, [r7, #28]
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d90d      	bls.n	800db1e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800db02:	2301      	movs	r3, #1
 800db04:	627b      	str	r3, [r7, #36]	; 0x24
 800db06:	e00a      	b.n	800db1e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	69fa      	ldr	r2, [r7, #28]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d303      	bcc.n	800db1a <vTaskDelayUntil+0xb2>
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	429a      	cmp	r2, r3
 800db18:	d901      	bls.n	800db1e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800db1a:	2301      	movs	r3, #1
 800db1c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	2b00      	cmp	r3, #0
 800db28:	d006      	beq.n	800db38 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800db2a:	69fa      	ldr	r2, [r7, #28]
 800db2c:	6a3b      	ldr	r3, [r7, #32]
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	2100      	movs	r1, #0
 800db32:	4618      	mov	r0, r3
 800db34:	f000 fe64 	bl	800e800 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800db38:	f000 f8bc 	bl	800dcb4 <xTaskResumeAll>
 800db3c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d107      	bne.n	800db54 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800db44:	4b07      	ldr	r3, [pc, #28]	; (800db64 <vTaskDelayUntil+0xfc>)
 800db46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db54:	bf00      	nop
 800db56:	3728      	adds	r7, #40	; 0x28
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	20001a44 	.word	0x20001a44
 800db60:	20001a20 	.word	0x20001a20
 800db64:	e000ed04 	.word	0xe000ed04

0800db68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d018      	beq.n	800dbac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db7a:	4b14      	ldr	r3, [pc, #80]	; (800dbcc <vTaskDelay+0x64>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00b      	beq.n	800db9a <vTaskDelay+0x32>
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	b672      	cpsid	i
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	b662      	cpsie	i
 800db96:	60bb      	str	r3, [r7, #8]
 800db98:	e7fe      	b.n	800db98 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800db9a:	f000 f87d 	bl	800dc98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db9e:	2100      	movs	r1, #0
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 fe2d 	bl	800e800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dba6:	f000 f885 	bl	800dcb4 <xTaskResumeAll>
 800dbaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d107      	bne.n	800dbc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dbb2:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <vTaskDelay+0x68>)
 800dbb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb8:	601a      	str	r2, [r3, #0]
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbc2:	bf00      	nop
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	20001a44 	.word	0x20001a44
 800dbd0:	e000ed04 	.word	0xe000ed04

0800dbd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	1d39      	adds	r1, r7, #4
 800dbe6:	f107 0308 	add.w	r3, r7, #8
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f2 fcfa 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	9202      	str	r2, [sp, #8]
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	460a      	mov	r2, r1
 800dc02:	491f      	ldr	r1, [pc, #124]	; (800dc80 <vTaskStartScheduler+0xac>)
 800dc04:	481f      	ldr	r0, [pc, #124]	; (800dc84 <vTaskStartScheduler+0xb0>)
 800dc06:	f7ff fd8d 	bl	800d724 <xTaskCreateStatic>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	4b1e      	ldr	r3, [pc, #120]	; (800dc88 <vTaskStartScheduler+0xb4>)
 800dc0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc10:	4b1d      	ldr	r3, [pc, #116]	; (800dc88 <vTaskStartScheduler+0xb4>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	e001      	b.n	800dc22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d117      	bne.n	800dc58 <vTaskStartScheduler+0x84>
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	b672      	cpsid	i
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	b662      	cpsie	i
 800dc3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc3e:	4b13      	ldr	r3, [pc, #76]	; (800dc8c <vTaskStartScheduler+0xb8>)
 800dc40:	f04f 32ff 	mov.w	r2, #4294967295
 800dc44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc46:	4b12      	ldr	r3, [pc, #72]	; (800dc90 <vTaskStartScheduler+0xbc>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc4c:	4b11      	ldr	r3, [pc, #68]	; (800dc94 <vTaskStartScheduler+0xc0>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc52:	f000 fec5 	bl	800e9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc56:	e00f      	b.n	800dc78 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5e:	d10b      	bne.n	800dc78 <vTaskStartScheduler+0xa4>
 800dc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc64:	b672      	cpsid	i
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	b662      	cpsie	i
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	e7fe      	b.n	800dc76 <vTaskStartScheduler+0xa2>
}
 800dc78:	bf00      	nop
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0800fabc 	.word	0x0800fabc
 800dc84:	0800e2a9 	.word	0x0800e2a9
 800dc88:	20001a40 	.word	0x20001a40
 800dc8c:	20001a3c 	.word	0x20001a3c
 800dc90:	20001a28 	.word	0x20001a28
 800dc94:	20001a20 	.word	0x20001a20

0800dc98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc98:	b480      	push	{r7}
 800dc9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dc9c:	4b04      	ldr	r3, [pc, #16]	; (800dcb0 <vTaskSuspendAll+0x18>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3301      	adds	r3, #1
 800dca2:	4a03      	ldr	r2, [pc, #12]	; (800dcb0 <vTaskSuspendAll+0x18>)
 800dca4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dca6:	bf00      	nop
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	20001a44 	.word	0x20001a44

0800dcb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dcc2:	4b42      	ldr	r3, [pc, #264]	; (800ddcc <xTaskResumeAll+0x118>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10b      	bne.n	800dce2 <xTaskResumeAll+0x2e>
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	b672      	cpsid	i
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	b662      	cpsie	i
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	e7fe      	b.n	800dce0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dce2:	f000 fef9 	bl	800ead8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dce6:	4b39      	ldr	r3, [pc, #228]	; (800ddcc <xTaskResumeAll+0x118>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4a37      	ldr	r2, [pc, #220]	; (800ddcc <xTaskResumeAll+0x118>)
 800dcee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcf0:	4b36      	ldr	r3, [pc, #216]	; (800ddcc <xTaskResumeAll+0x118>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d161      	bne.n	800ddbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcf8:	4b35      	ldr	r3, [pc, #212]	; (800ddd0 <xTaskResumeAll+0x11c>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d05d      	beq.n	800ddbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd00:	e02e      	b.n	800dd60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd02:	4b34      	ldr	r3, [pc, #208]	; (800ddd4 <xTaskResumeAll+0x120>)
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3318      	adds	r3, #24
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff f835 	bl	800cd7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3304      	adds	r3, #4
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7ff f830 	bl	800cd7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd22:	2201      	movs	r2, #1
 800dd24:	409a      	lsls	r2, r3
 800dd26:	4b2c      	ldr	r3, [pc, #176]	; (800ddd8 <xTaskResumeAll+0x124>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	4a2a      	ldr	r2, [pc, #168]	; (800ddd8 <xTaskResumeAll+0x124>)
 800dd2e:	6013      	str	r3, [r2, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd34:	4613      	mov	r3, r2
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4a27      	ldr	r2, [pc, #156]	; (800dddc <xTaskResumeAll+0x128>)
 800dd3e:	441a      	add	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	3304      	adds	r3, #4
 800dd44:	4619      	mov	r1, r3
 800dd46:	4610      	mov	r0, r2
 800dd48:	f7fe ffbc 	bl	800ccc4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd50:	4b23      	ldr	r3, [pc, #140]	; (800dde0 <xTaskResumeAll+0x12c>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d302      	bcc.n	800dd60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dd5a:	4b22      	ldr	r3, [pc, #136]	; (800dde4 <xTaskResumeAll+0x130>)
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd60:	4b1c      	ldr	r3, [pc, #112]	; (800ddd4 <xTaskResumeAll+0x120>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1cc      	bne.n	800dd02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd6e:	f000 fb51 	bl	800e414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd72:	4b1d      	ldr	r3, [pc, #116]	; (800dde8 <xTaskResumeAll+0x134>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d010      	beq.n	800dda0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd7e:	f000 f847 	bl	800de10 <xTaskIncrementTick>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dd88:	4b16      	ldr	r3, [pc, #88]	; (800dde4 <xTaskResumeAll+0x130>)
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1f1      	bne.n	800dd7e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dd9a:	4b13      	ldr	r3, [pc, #76]	; (800dde8 <xTaskResumeAll+0x134>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dda0:	4b10      	ldr	r3, [pc, #64]	; (800dde4 <xTaskResumeAll+0x130>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d009      	beq.n	800ddbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddac:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <xTaskResumeAll+0x138>)
 800ddae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddbc:	f000 febe 	bl	800eb3c <vPortExitCritical>

	return xAlreadyYielded;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20001a44 	.word	0x20001a44
 800ddd0:	20001a1c 	.word	0x20001a1c
 800ddd4:	200019dc 	.word	0x200019dc
 800ddd8:	20001a24 	.word	0x20001a24
 800dddc:	20001920 	.word	0x20001920
 800dde0:	2000191c 	.word	0x2000191c
 800dde4:	20001a30 	.word	0x20001a30
 800dde8:	20001a2c 	.word	0x20001a2c
 800ddec:	e000ed04 	.word	0xe000ed04

0800ddf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ddf6:	4b05      	ldr	r3, [pc, #20]	; (800de0c <xTaskGetTickCount+0x1c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ddfc:	687b      	ldr	r3, [r7, #4]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	20001a20 	.word	0x20001a20

0800de10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de16:	2300      	movs	r3, #0
 800de18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de1a:	4b4f      	ldr	r3, [pc, #316]	; (800df58 <xTaskIncrementTick+0x148>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f040 8089 	bne.w	800df36 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de24:	4b4d      	ldr	r3, [pc, #308]	; (800df5c <xTaskIncrementTick+0x14c>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3301      	adds	r3, #1
 800de2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de2c:	4a4b      	ldr	r2, [pc, #300]	; (800df5c <xTaskIncrementTick+0x14c>)
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d121      	bne.n	800de7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800de38:	4b49      	ldr	r3, [pc, #292]	; (800df60 <xTaskIncrementTick+0x150>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00b      	beq.n	800de5a <xTaskIncrementTick+0x4a>
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	b672      	cpsid	i
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	b662      	cpsie	i
 800de56:	603b      	str	r3, [r7, #0]
 800de58:	e7fe      	b.n	800de58 <xTaskIncrementTick+0x48>
 800de5a:	4b41      	ldr	r3, [pc, #260]	; (800df60 <xTaskIncrementTick+0x150>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	4b40      	ldr	r3, [pc, #256]	; (800df64 <xTaskIncrementTick+0x154>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a3e      	ldr	r2, [pc, #248]	; (800df60 <xTaskIncrementTick+0x150>)
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	4a3e      	ldr	r2, [pc, #248]	; (800df64 <xTaskIncrementTick+0x154>)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	4b3e      	ldr	r3, [pc, #248]	; (800df68 <xTaskIncrementTick+0x158>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3301      	adds	r3, #1
 800de74:	4a3c      	ldr	r2, [pc, #240]	; (800df68 <xTaskIncrementTick+0x158>)
 800de76:	6013      	str	r3, [r2, #0]
 800de78:	f000 facc 	bl	800e414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de7c:	4b3b      	ldr	r3, [pc, #236]	; (800df6c <xTaskIncrementTick+0x15c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	429a      	cmp	r2, r3
 800de84:	d348      	bcc.n	800df18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de86:	4b36      	ldr	r3, [pc, #216]	; (800df60 <xTaskIncrementTick+0x150>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d104      	bne.n	800de9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de90:	4b36      	ldr	r3, [pc, #216]	; (800df6c <xTaskIncrementTick+0x15c>)
 800de92:	f04f 32ff 	mov.w	r2, #4294967295
 800de96:	601a      	str	r2, [r3, #0]
					break;
 800de98:	e03e      	b.n	800df18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de9a:	4b31      	ldr	r3, [pc, #196]	; (800df60 <xTaskIncrementTick+0x150>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d203      	bcs.n	800deba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800deb2:	4a2e      	ldr	r2, [pc, #184]	; (800df6c <xTaskIncrementTick+0x15c>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800deb8:	e02e      	b.n	800df18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe ff5d 	bl	800cd7e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d004      	beq.n	800ded6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	3318      	adds	r3, #24
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe ff54 	bl	800cd7e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deda:	2201      	movs	r2, #1
 800dedc:	409a      	lsls	r2, r3
 800dede:	4b24      	ldr	r3, [pc, #144]	; (800df70 <xTaskIncrementTick+0x160>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4313      	orrs	r3, r2
 800dee4:	4a22      	ldr	r2, [pc, #136]	; (800df70 <xTaskIncrementTick+0x160>)
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deec:	4613      	mov	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4a1f      	ldr	r2, [pc, #124]	; (800df74 <xTaskIncrementTick+0x164>)
 800def6:	441a      	add	r2, r3
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	3304      	adds	r3, #4
 800defc:	4619      	mov	r1, r3
 800defe:	4610      	mov	r0, r2
 800df00:	f7fe fee0 	bl	800ccc4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df08:	4b1b      	ldr	r3, [pc, #108]	; (800df78 <xTaskIncrementTick+0x168>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0e:	429a      	cmp	r2, r3
 800df10:	d3b9      	bcc.n	800de86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800df12:	2301      	movs	r3, #1
 800df14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df16:	e7b6      	b.n	800de86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df18:	4b17      	ldr	r3, [pc, #92]	; (800df78 <xTaskIncrementTick+0x168>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	4915      	ldr	r1, [pc, #84]	; (800df74 <xTaskIncrementTick+0x164>)
 800df20:	4613      	mov	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	440b      	add	r3, r1
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d907      	bls.n	800df40 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800df30:	2301      	movs	r3, #1
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	e004      	b.n	800df40 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800df36:	4b11      	ldr	r3, [pc, #68]	; (800df7c <xTaskIncrementTick+0x16c>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3301      	adds	r3, #1
 800df3c:	4a0f      	ldr	r2, [pc, #60]	; (800df7c <xTaskIncrementTick+0x16c>)
 800df3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800df40:	4b0f      	ldr	r3, [pc, #60]	; (800df80 <xTaskIncrementTick+0x170>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800df48:	2301      	movs	r3, #1
 800df4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800df4c:	697b      	ldr	r3, [r7, #20]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20001a44 	.word	0x20001a44
 800df5c:	20001a20 	.word	0x20001a20
 800df60:	200019d4 	.word	0x200019d4
 800df64:	200019d8 	.word	0x200019d8
 800df68:	20001a34 	.word	0x20001a34
 800df6c:	20001a3c 	.word	0x20001a3c
 800df70:	20001a24 	.word	0x20001a24
 800df74:	20001920 	.word	0x20001920
 800df78:	2000191c 	.word	0x2000191c
 800df7c:	20001a2c 	.word	0x20001a2c
 800df80:	20001a30 	.word	0x20001a30

0800df84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b088      	sub	sp, #32
 800df88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df8a:	4b3a      	ldr	r3, [pc, #232]	; (800e074 <vTaskSwitchContext+0xf0>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d003      	beq.n	800df9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df92:	4b39      	ldr	r3, [pc, #228]	; (800e078 <vTaskSwitchContext+0xf4>)
 800df94:	2201      	movs	r2, #1
 800df96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df98:	e067      	b.n	800e06a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800df9a:	4b37      	ldr	r3, [pc, #220]	; (800e078 <vTaskSwitchContext+0xf4>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dfa0:	4b36      	ldr	r3, [pc, #216]	; (800e07c <vTaskSwitchContext+0xf8>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa6:	61fb      	str	r3, [r7, #28]
 800dfa8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dfac:	61bb      	str	r3, [r7, #24]
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	69ba      	ldr	r2, [r7, #24]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d111      	bne.n	800dfdc <vTaskSwitchContext+0x58>
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	69ba      	ldr	r2, [r7, #24]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d10b      	bne.n	800dfdc <vTaskSwitchContext+0x58>
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	69ba      	ldr	r2, [r7, #24]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d105      	bne.n	800dfdc <vTaskSwitchContext+0x58>
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	330c      	adds	r3, #12
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	69ba      	ldr	r2, [r7, #24]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d008      	beq.n	800dfee <vTaskSwitchContext+0x6a>
 800dfdc:	4b27      	ldr	r3, [pc, #156]	; (800e07c <vTaskSwitchContext+0xf8>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	4b26      	ldr	r3, [pc, #152]	; (800e07c <vTaskSwitchContext+0xf8>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3334      	adds	r3, #52	; 0x34
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7f2 fae8 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfee:	4b24      	ldr	r3, [pc, #144]	; (800e080 <vTaskSwitchContext+0xfc>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	fab3 f383 	clz	r3, r3
 800dffa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dffc:	7afb      	ldrb	r3, [r7, #11]
 800dffe:	f1c3 031f 	rsb	r3, r3, #31
 800e002:	617b      	str	r3, [r7, #20]
 800e004:	491f      	ldr	r1, [pc, #124]	; (800e084 <vTaskSwitchContext+0x100>)
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	4613      	mov	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	440b      	add	r3, r1
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10b      	bne.n	800e030 <vTaskSwitchContext+0xac>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	b672      	cpsid	i
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	b662      	cpsie	i
 800e02c:	607b      	str	r3, [r7, #4]
 800e02e:	e7fe      	b.n	800e02e <vTaskSwitchContext+0xaa>
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4a12      	ldr	r2, [pc, #72]	; (800e084 <vTaskSwitchContext+0x100>)
 800e03c:	4413      	add	r3, r2
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	605a      	str	r2, [r3, #4]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	685a      	ldr	r2, [r3, #4]
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	3308      	adds	r3, #8
 800e052:	429a      	cmp	r2, r3
 800e054:	d104      	bne.n	800e060 <vTaskSwitchContext+0xdc>
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	605a      	str	r2, [r3, #4]
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	4a05      	ldr	r2, [pc, #20]	; (800e07c <vTaskSwitchContext+0xf8>)
 800e068:	6013      	str	r3, [r2, #0]
}
 800e06a:	bf00      	nop
 800e06c:	3720      	adds	r7, #32
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20001a44 	.word	0x20001a44
 800e078:	20001a30 	.word	0x20001a30
 800e07c:	2000191c 	.word	0x2000191c
 800e080:	20001a24 	.word	0x20001a24
 800e084:	20001920 	.word	0x20001920

0800e088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10b      	bne.n	800e0b0 <vTaskPlaceOnEventList+0x28>
 800e098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09c:	b672      	cpsid	i
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	b662      	cpsie	i
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e7fe      	b.n	800e0ae <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0b0:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <vTaskPlaceOnEventList+0x48>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3318      	adds	r3, #24
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7fe fe27 	bl	800cd0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0be:	2101      	movs	r1, #1
 800e0c0:	6838      	ldr	r0, [r7, #0]
 800e0c2:	f000 fb9d 	bl	800e800 <prvAddCurrentTaskToDelayedList>
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	2000191c 	.word	0x2000191c

0800e0d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10b      	bne.n	800e102 <xTaskRemoveFromEventList+0x2e>
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	b672      	cpsid	i
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	b662      	cpsie	i
 800e0fe:	60fb      	str	r3, [r7, #12]
 800e100:	e7fe      	b.n	800e100 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	3318      	adds	r3, #24
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fe39 	bl	800cd7e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e10c:	4b1d      	ldr	r3, [pc, #116]	; (800e184 <xTaskRemoveFromEventList+0xb0>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d11c      	bne.n	800e14e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	3304      	adds	r3, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe fe30 	bl	800cd7e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e122:	2201      	movs	r2, #1
 800e124:	409a      	lsls	r2, r3
 800e126:	4b18      	ldr	r3, [pc, #96]	; (800e188 <xTaskRemoveFromEventList+0xb4>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4313      	orrs	r3, r2
 800e12c:	4a16      	ldr	r2, [pc, #88]	; (800e188 <xTaskRemoveFromEventList+0xb4>)
 800e12e:	6013      	str	r3, [r2, #0]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e134:	4613      	mov	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4a13      	ldr	r2, [pc, #76]	; (800e18c <xTaskRemoveFromEventList+0xb8>)
 800e13e:	441a      	add	r2, r3
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	3304      	adds	r3, #4
 800e144:	4619      	mov	r1, r3
 800e146:	4610      	mov	r0, r2
 800e148:	f7fe fdbc 	bl	800ccc4 <vListInsertEnd>
 800e14c:	e005      	b.n	800e15a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	3318      	adds	r3, #24
 800e152:	4619      	mov	r1, r3
 800e154:	480e      	ldr	r0, [pc, #56]	; (800e190 <xTaskRemoveFromEventList+0xbc>)
 800e156:	f7fe fdb5 	bl	800ccc4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <xTaskRemoveFromEventList+0xc0>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	429a      	cmp	r2, r3
 800e166:	d905      	bls.n	800e174 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e168:	2301      	movs	r3, #1
 800e16a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e16c:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <xTaskRemoveFromEventList+0xc4>)
 800e16e:	2201      	movs	r2, #1
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	e001      	b.n	800e178 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e174:	2300      	movs	r3, #0
 800e176:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e178:	697b      	ldr	r3, [r7, #20]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	20001a44 	.word	0x20001a44
 800e188:	20001a24 	.word	0x20001a24
 800e18c:	20001920 	.word	0x20001920
 800e190:	200019dc 	.word	0x200019dc
 800e194:	2000191c 	.word	0x2000191c
 800e198:	20001a30 	.word	0x20001a30

0800e19c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1a4:	4b06      	ldr	r3, [pc, #24]	; (800e1c0 <vTaskInternalSetTimeOutState+0x24>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1ac:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <vTaskInternalSetTimeOutState+0x28>)
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	605a      	str	r2, [r3, #4]
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	20001a34 	.word	0x20001a34
 800e1c4:	20001a20 	.word	0x20001a20

0800e1c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10b      	bne.n	800e1f0 <xTaskCheckForTimeOut+0x28>
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	b672      	cpsid	i
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	b662      	cpsie	i
 800e1ec:	613b      	str	r3, [r7, #16]
 800e1ee:	e7fe      	b.n	800e1ee <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10b      	bne.n	800e20e <xTaskCheckForTimeOut+0x46>
 800e1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fa:	b672      	cpsid	i
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	b662      	cpsie	i
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	e7fe      	b.n	800e20c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e20e:	f000 fc63 	bl	800ead8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e212:	4b1d      	ldr	r3, [pc, #116]	; (800e288 <xTaskCheckForTimeOut+0xc0>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22a:	d102      	bne.n	800e232 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e22c:	2300      	movs	r3, #0
 800e22e:	61fb      	str	r3, [r7, #28]
 800e230:	e023      	b.n	800e27a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	4b15      	ldr	r3, [pc, #84]	; (800e28c <xTaskCheckForTimeOut+0xc4>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d007      	beq.n	800e24e <xTaskCheckForTimeOut+0x86>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	69ba      	ldr	r2, [r7, #24]
 800e244:	429a      	cmp	r2, r3
 800e246:	d302      	bcc.n	800e24e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e248:	2301      	movs	r3, #1
 800e24a:	61fb      	str	r3, [r7, #28]
 800e24c:	e015      	b.n	800e27a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	429a      	cmp	r2, r3
 800e256:	d20b      	bcs.n	800e270 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	1ad2      	subs	r2, r2, r3
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff ff99 	bl	800e19c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e26a:	2300      	movs	r3, #0
 800e26c:	61fb      	str	r3, [r7, #28]
 800e26e:	e004      	b.n	800e27a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e276:	2301      	movs	r3, #1
 800e278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e27a:	f000 fc5f 	bl	800eb3c <vPortExitCritical>

	return xReturn;
 800e27e:	69fb      	ldr	r3, [r7, #28]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3720      	adds	r7, #32
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	20001a20 	.word	0x20001a20
 800e28c:	20001a34 	.word	0x20001a34

0800e290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e290:	b480      	push	{r7}
 800e292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e294:	4b03      	ldr	r3, [pc, #12]	; (800e2a4 <vTaskMissedYield+0x14>)
 800e296:	2201      	movs	r2, #1
 800e298:	601a      	str	r2, [r3, #0]
}
 800e29a:	bf00      	nop
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	20001a30 	.word	0x20001a30

0800e2a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2b0:	f000 f854 	bl	800e35c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2b4:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <prvIdleTask+0x2c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d907      	bls.n	800e2cc <prvIdleTask+0x24>
			{
				taskYIELD();
 800e2bc:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <prvIdleTask+0x30>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e2cc:	f7f2 f970 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e2d0:	e7ee      	b.n	800e2b0 <prvIdleTask+0x8>
 800e2d2:	bf00      	nop
 800e2d4:	20001920 	.word	0x20001920
 800e2d8:	e000ed04 	.word	0xe000ed04

0800e2dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	607b      	str	r3, [r7, #4]
 800e2e6:	e00c      	b.n	800e302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4a12      	ldr	r2, [pc, #72]	; (800e33c <prvInitialiseTaskLists+0x60>)
 800e2f4:	4413      	add	r3, r2
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe fcb7 	bl	800cc6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	3301      	adds	r3, #1
 800e300:	607b      	str	r3, [r7, #4]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b06      	cmp	r3, #6
 800e306:	d9ef      	bls.n	800e2e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e308:	480d      	ldr	r0, [pc, #52]	; (800e340 <prvInitialiseTaskLists+0x64>)
 800e30a:	f7fe fcae 	bl	800cc6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e30e:	480d      	ldr	r0, [pc, #52]	; (800e344 <prvInitialiseTaskLists+0x68>)
 800e310:	f7fe fcab 	bl	800cc6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e314:	480c      	ldr	r0, [pc, #48]	; (800e348 <prvInitialiseTaskLists+0x6c>)
 800e316:	f7fe fca8 	bl	800cc6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e31a:	480c      	ldr	r0, [pc, #48]	; (800e34c <prvInitialiseTaskLists+0x70>)
 800e31c:	f7fe fca5 	bl	800cc6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e320:	480b      	ldr	r0, [pc, #44]	; (800e350 <prvInitialiseTaskLists+0x74>)
 800e322:	f7fe fca2 	bl	800cc6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e326:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <prvInitialiseTaskLists+0x78>)
 800e328:	4a05      	ldr	r2, [pc, #20]	; (800e340 <prvInitialiseTaskLists+0x64>)
 800e32a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <prvInitialiseTaskLists+0x7c>)
 800e32e:	4a05      	ldr	r2, [pc, #20]	; (800e344 <prvInitialiseTaskLists+0x68>)
 800e330:	601a      	str	r2, [r3, #0]
}
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20001920 	.word	0x20001920
 800e340:	200019ac 	.word	0x200019ac
 800e344:	200019c0 	.word	0x200019c0
 800e348:	200019dc 	.word	0x200019dc
 800e34c:	200019f0 	.word	0x200019f0
 800e350:	20001a08 	.word	0x20001a08
 800e354:	200019d4 	.word	0x200019d4
 800e358:	200019d8 	.word	0x200019d8

0800e35c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e362:	e019      	b.n	800e398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e364:	f000 fbb8 	bl	800ead8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e368:	4b0f      	ldr	r3, [pc, #60]	; (800e3a8 <prvCheckTasksWaitingTermination+0x4c>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3304      	adds	r3, #4
 800e374:	4618      	mov	r0, r3
 800e376:	f7fe fd02 	bl	800cd7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e37a:	4b0c      	ldr	r3, [pc, #48]	; (800e3ac <prvCheckTasksWaitingTermination+0x50>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3b01      	subs	r3, #1
 800e380:	4a0a      	ldr	r2, [pc, #40]	; (800e3ac <prvCheckTasksWaitingTermination+0x50>)
 800e382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <prvCheckTasksWaitingTermination+0x54>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3b01      	subs	r3, #1
 800e38a:	4a09      	ldr	r2, [pc, #36]	; (800e3b0 <prvCheckTasksWaitingTermination+0x54>)
 800e38c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e38e:	f000 fbd5 	bl	800eb3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f80e 	bl	800e3b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e398:	4b05      	ldr	r3, [pc, #20]	; (800e3b0 <prvCheckTasksWaitingTermination+0x54>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1e1      	bne.n	800e364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3a0:	bf00      	nop
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	200019f0 	.word	0x200019f0
 800e3ac:	20001a1c 	.word	0x20001a1c
 800e3b0:	20001a04 	.word	0x20001a04

0800e3b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d108      	bne.n	800e3d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 fd30 	bl	800ee30 <vPortFree>
				vPortFree( pxTCB );
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fd2d 	bl	800ee30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3d6:	e019      	b.n	800e40c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d103      	bne.n	800e3ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fd24 	bl	800ee30 <vPortFree>
	}
 800e3e8:	e010      	b.n	800e40c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d00b      	beq.n	800e40c <prvDeleteTCB+0x58>
 800e3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f8:	b672      	cpsid	i
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	b662      	cpsie	i
 800e408:	60fb      	str	r3, [r7, #12]
 800e40a:	e7fe      	b.n	800e40a <prvDeleteTCB+0x56>
	}
 800e40c:	bf00      	nop
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e41a:	4b0c      	ldr	r3, [pc, #48]	; (800e44c <prvResetNextTaskUnblockTime+0x38>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d104      	bne.n	800e42e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e424:	4b0a      	ldr	r3, [pc, #40]	; (800e450 <prvResetNextTaskUnblockTime+0x3c>)
 800e426:	f04f 32ff 	mov.w	r2, #4294967295
 800e42a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e42c:	e008      	b.n	800e440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e42e:	4b07      	ldr	r3, [pc, #28]	; (800e44c <prvResetNextTaskUnblockTime+0x38>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	4a04      	ldr	r2, [pc, #16]	; (800e450 <prvResetNextTaskUnblockTime+0x3c>)
 800e43e:	6013      	str	r3, [r2, #0]
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	200019d4 	.word	0x200019d4
 800e450:	20001a3c 	.word	0x20001a3c

0800e454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e45a:	4b0b      	ldr	r3, [pc, #44]	; (800e488 <xTaskGetSchedulerState+0x34>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d102      	bne.n	800e468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e462:	2301      	movs	r3, #1
 800e464:	607b      	str	r3, [r7, #4]
 800e466:	e008      	b.n	800e47a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e468:	4b08      	ldr	r3, [pc, #32]	; (800e48c <xTaskGetSchedulerState+0x38>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d102      	bne.n	800e476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e470:	2302      	movs	r3, #2
 800e472:	607b      	str	r3, [r7, #4]
 800e474:	e001      	b.n	800e47a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e476:	2300      	movs	r3, #0
 800e478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e47a:	687b      	ldr	r3, [r7, #4]
	}
 800e47c:	4618      	mov	r0, r3
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	20001a28 	.word	0x20001a28
 800e48c:	20001a44 	.word	0x20001a44

0800e490 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e49c:	2300      	movs	r3, #0
 800e49e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d069      	beq.n	800e57a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4aa:	4b36      	ldr	r3, [pc, #216]	; (800e584 <xTaskPriorityInherit+0xf4>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d259      	bcs.n	800e568 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	db06      	blt.n	800e4ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4bc:	4b31      	ldr	r3, [pc, #196]	; (800e584 <xTaskPriorityInherit+0xf4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c2:	f1c3 0207 	rsb	r2, r3, #7
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	6959      	ldr	r1, [r3, #20]
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4a2b      	ldr	r2, [pc, #172]	; (800e588 <xTaskPriorityInherit+0xf8>)
 800e4dc:	4413      	add	r3, r2
 800e4de:	4299      	cmp	r1, r3
 800e4e0:	d13a      	bne.n	800e558 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	3304      	adds	r3, #4
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fc49 	bl	800cd7e <uxListRemove>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d115      	bne.n	800e51e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f6:	4924      	ldr	r1, [pc, #144]	; (800e588 <xTaskPriorityInherit+0xf8>)
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	440b      	add	r3, r1
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10a      	bne.n	800e51e <xTaskPriorityInherit+0x8e>
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50c:	2201      	movs	r2, #1
 800e50e:	fa02 f303 	lsl.w	r3, r2, r3
 800e512:	43da      	mvns	r2, r3
 800e514:	4b1d      	ldr	r3, [pc, #116]	; (800e58c <xTaskPriorityInherit+0xfc>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4013      	ands	r3, r2
 800e51a:	4a1c      	ldr	r2, [pc, #112]	; (800e58c <xTaskPriorityInherit+0xfc>)
 800e51c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e51e:	4b19      	ldr	r3, [pc, #100]	; (800e584 <xTaskPriorityInherit+0xf4>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	2201      	movs	r2, #1
 800e52e:	409a      	lsls	r2, r3
 800e530:	4b16      	ldr	r3, [pc, #88]	; (800e58c <xTaskPriorityInherit+0xfc>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4313      	orrs	r3, r2
 800e536:	4a15      	ldr	r2, [pc, #84]	; (800e58c <xTaskPriorityInherit+0xfc>)
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53e:	4613      	mov	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4a10      	ldr	r2, [pc, #64]	; (800e588 <xTaskPriorityInherit+0xf8>)
 800e548:	441a      	add	r2, r3
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	3304      	adds	r3, #4
 800e54e:	4619      	mov	r1, r3
 800e550:	4610      	mov	r0, r2
 800e552:	f7fe fbb7 	bl	800ccc4 <vListInsertEnd>
 800e556:	e004      	b.n	800e562 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <xTaskPriorityInherit+0xf4>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e562:	2301      	movs	r3, #1
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	e008      	b.n	800e57a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e56c:	4b05      	ldr	r3, [pc, #20]	; (800e584 <xTaskPriorityInherit+0xf4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e572:	429a      	cmp	r2, r3
 800e574:	d201      	bcs.n	800e57a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e576:	2301      	movs	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e57a:	68fb      	ldr	r3, [r7, #12]
	}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	2000191c 	.word	0x2000191c
 800e588:	20001920 	.word	0x20001920
 800e58c:	20001a24 	.word	0x20001a24

0800e590 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e59c:	2300      	movs	r3, #0
 800e59e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d070      	beq.n	800e688 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5a6:	4b3b      	ldr	r3, [pc, #236]	; (800e694 <xTaskPriorityDisinherit+0x104>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	693a      	ldr	r2, [r7, #16]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d00b      	beq.n	800e5c8 <xTaskPriorityDisinherit+0x38>
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	b672      	cpsid	i
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	b662      	cpsie	i
 800e5c4:	60fb      	str	r3, [r7, #12]
 800e5c6:	e7fe      	b.n	800e5c6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10b      	bne.n	800e5e8 <xTaskPriorityDisinherit+0x58>
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	b672      	cpsid	i
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	b662      	cpsie	i
 800e5e4:	60bb      	str	r3, [r7, #8]
 800e5e6:	e7fe      	b.n	800e5e6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ec:	1e5a      	subs	r2, r3, #1
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d044      	beq.n	800e688 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e602:	2b00      	cmp	r3, #0
 800e604:	d140      	bne.n	800e688 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	3304      	adds	r3, #4
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fbb7 	bl	800cd7e <uxListRemove>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d115      	bne.n	800e642 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61a:	491f      	ldr	r1, [pc, #124]	; (800e698 <xTaskPriorityDisinherit+0x108>)
 800e61c:	4613      	mov	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	440b      	add	r3, r1
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10a      	bne.n	800e642 <xTaskPriorityDisinherit+0xb2>
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e630:	2201      	movs	r2, #1
 800e632:	fa02 f303 	lsl.w	r3, r2, r3
 800e636:	43da      	mvns	r2, r3
 800e638:	4b18      	ldr	r3, [pc, #96]	; (800e69c <xTaskPriorityDisinherit+0x10c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4013      	ands	r3, r2
 800e63e:	4a17      	ldr	r2, [pc, #92]	; (800e69c <xTaskPriorityDisinherit+0x10c>)
 800e640:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64e:	f1c3 0207 	rsb	r2, r3, #7
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65a:	2201      	movs	r2, #1
 800e65c:	409a      	lsls	r2, r3
 800e65e:	4b0f      	ldr	r3, [pc, #60]	; (800e69c <xTaskPriorityDisinherit+0x10c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4313      	orrs	r3, r2
 800e664:	4a0d      	ldr	r2, [pc, #52]	; (800e69c <xTaskPriorityDisinherit+0x10c>)
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e66c:	4613      	mov	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	4a08      	ldr	r2, [pc, #32]	; (800e698 <xTaskPriorityDisinherit+0x108>)
 800e676:	441a      	add	r2, r3
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	3304      	adds	r3, #4
 800e67c:	4619      	mov	r1, r3
 800e67e:	4610      	mov	r0, r2
 800e680:	f7fe fb20 	bl	800ccc4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e684:	2301      	movs	r3, #1
 800e686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e688:	697b      	ldr	r3, [r7, #20]
	}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	2000191c 	.word	0x2000191c
 800e698:	20001920 	.word	0x20001920
 800e69c:	20001a24 	.word	0x20001a24

0800e6a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 8085 	beq.w	800e7c4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10b      	bne.n	800e6da <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	b672      	cpsid	i
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	b662      	cpsie	i
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e7fe      	b.n	800e6d8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d902      	bls.n	800e6ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	61fb      	str	r3, [r7, #28]
 800e6e8:	e002      	b.n	800e6f0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f4:	69fa      	ldr	r2, [r7, #28]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d064      	beq.n	800e7c4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	429a      	cmp	r2, r3
 800e702:	d15f      	bne.n	800e7c4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e704:	4b31      	ldr	r3, [pc, #196]	; (800e7cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d10b      	bne.n	800e726 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e712:	b672      	cpsid	i
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	b662      	cpsie	i
 800e722:	60bb      	str	r3, [r7, #8]
 800e724:	e7fe      	b.n	800e724 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	69fa      	ldr	r2, [r7, #28]
 800e730:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	2b00      	cmp	r3, #0
 800e738:	db04      	blt.n	800e744 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	f1c3 0207 	rsb	r2, r3, #7
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	6959      	ldr	r1, [r3, #20]
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	4613      	mov	r3, r2
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4413      	add	r3, r2
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4a1f      	ldr	r2, [pc, #124]	; (800e7d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e754:	4413      	add	r3, r2
 800e756:	4299      	cmp	r1, r3
 800e758:	d134      	bne.n	800e7c4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	3304      	adds	r3, #4
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fe fb0d 	bl	800cd7e <uxListRemove>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d115      	bne.n	800e796 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76e:	4918      	ldr	r1, [pc, #96]	; (800e7d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e770:	4613      	mov	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	440b      	add	r3, r1
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10a      	bne.n	800e796 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e784:	2201      	movs	r2, #1
 800e786:	fa02 f303 	lsl.w	r3, r2, r3
 800e78a:	43da      	mvns	r2, r3
 800e78c:	4b11      	ldr	r3, [pc, #68]	; (800e7d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4013      	ands	r3, r2
 800e792:	4a10      	ldr	r2, [pc, #64]	; (800e7d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e794:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79a:	2201      	movs	r2, #1
 800e79c:	409a      	lsls	r2, r3
 800e79e:	4b0d      	ldr	r3, [pc, #52]	; (800e7d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	4a0b      	ldr	r2, [pc, #44]	; (800e7d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4413      	add	r3, r2
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	4a06      	ldr	r2, [pc, #24]	; (800e7d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e7b6:	441a      	add	r2, r3
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	4619      	mov	r1, r3
 800e7be:	4610      	mov	r0, r2
 800e7c0:	f7fe fa80 	bl	800ccc4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7c4:	bf00      	nop
 800e7c6:	3720      	adds	r7, #32
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	2000191c 	.word	0x2000191c
 800e7d0:	20001920 	.word	0x20001920
 800e7d4:	20001a24 	.word	0x20001a24

0800e7d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e7d8:	b480      	push	{r7}
 800e7da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e7dc:	4b07      	ldr	r3, [pc, #28]	; (800e7fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d004      	beq.n	800e7ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7ea:	3201      	adds	r2, #1
 800e7ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e7ee:	4b03      	ldr	r3, [pc, #12]	; (800e7fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
	}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	2000191c 	.word	0x2000191c

0800e800 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e80a:	4b29      	ldr	r3, [pc, #164]	; (800e8b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e810:	4b28      	ldr	r3, [pc, #160]	; (800e8b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3304      	adds	r3, #4
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fab1 	bl	800cd7e <uxListRemove>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10b      	bne.n	800e83a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e822:	4b24      	ldr	r3, [pc, #144]	; (800e8b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e828:	2201      	movs	r2, #1
 800e82a:	fa02 f303 	lsl.w	r3, r2, r3
 800e82e:	43da      	mvns	r2, r3
 800e830:	4b21      	ldr	r3, [pc, #132]	; (800e8b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4013      	ands	r3, r2
 800e836:	4a20      	ldr	r2, [pc, #128]	; (800e8b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e838:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e840:	d10a      	bne.n	800e858 <prvAddCurrentTaskToDelayedList+0x58>
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d007      	beq.n	800e858 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e848:	4b1a      	ldr	r3, [pc, #104]	; (800e8b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3304      	adds	r3, #4
 800e84e:	4619      	mov	r1, r3
 800e850:	481a      	ldr	r0, [pc, #104]	; (800e8bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800e852:	f7fe fa37 	bl	800ccc4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e856:	e026      	b.n	800e8a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4413      	add	r3, r2
 800e85e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e860:	4b14      	ldr	r3, [pc, #80]	; (800e8b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d209      	bcs.n	800e884 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e870:	4b13      	ldr	r3, [pc, #76]	; (800e8c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	3304      	adds	r3, #4
 800e87a:	4619      	mov	r1, r3
 800e87c:	4610      	mov	r0, r2
 800e87e:	f7fe fa45 	bl	800cd0c <vListInsert>
}
 800e882:	e010      	b.n	800e8a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e884:	4b0f      	ldr	r3, [pc, #60]	; (800e8c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	3304      	adds	r3, #4
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f7fe fa3b 	bl	800cd0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e896:	4b0c      	ldr	r3, [pc, #48]	; (800e8c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d202      	bcs.n	800e8a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e8a0:	4a09      	ldr	r2, [pc, #36]	; (800e8c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	6013      	str	r3, [r2, #0]
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20001a20 	.word	0x20001a20
 800e8b4:	2000191c 	.word	0x2000191c
 800e8b8:	20001a24 	.word	0x20001a24
 800e8bc:	20001a08 	.word	0x20001a08
 800e8c0:	200019d8 	.word	0x200019d8
 800e8c4:	200019d4 	.word	0x200019d4
 800e8c8:	20001a3c 	.word	0x20001a3c

0800e8cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	3b04      	subs	r3, #4
 800e8dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e8e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3b04      	subs	r3, #4
 800e8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	f023 0201 	bic.w	r2, r3, #1
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	3b04      	subs	r3, #4
 800e8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e8fc:	4a0c      	ldr	r2, [pc, #48]	; (800e930 <pxPortInitialiseStack+0x64>)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	3b14      	subs	r3, #20
 800e906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3b04      	subs	r3, #4
 800e912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f06f 0202 	mvn.w	r2, #2
 800e91a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	3b20      	subs	r3, #32
 800e920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e922:	68fb      	ldr	r3, [r7, #12]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3714      	adds	r7, #20
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr
 800e930:	0800e935 	.word	0x0800e935

0800e934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e93e:	4b13      	ldr	r3, [pc, #76]	; (800e98c <prvTaskExitError+0x58>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e946:	d00b      	beq.n	800e960 <prvTaskExitError+0x2c>
 800e948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94c:	b672      	cpsid	i
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	b662      	cpsie	i
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	e7fe      	b.n	800e95e <prvTaskExitError+0x2a>
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	b672      	cpsid	i
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	b662      	cpsie	i
 800e974:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e976:	bf00      	nop
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d0fc      	beq.n	800e978 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e97e:	bf00      	nop
 800e980:	3714      	adds	r7, #20
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	200013c0 	.word	0x200013c0

0800e990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e990:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <pxCurrentTCBConst2>)
 800e992:	6819      	ldr	r1, [r3, #0]
 800e994:	6808      	ldr	r0, [r1, #0]
 800e996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	f380 8809 	msr	PSP, r0
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f04f 0000 	mov.w	r0, #0
 800e9a6:	f380 8811 	msr	BASEPRI, r0
 800e9aa:	4770      	bx	lr
 800e9ac:	f3af 8000 	nop.w

0800e9b0 <pxCurrentTCBConst2>:
 800e9b0:	2000191c 	.word	0x2000191c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e9b4:	bf00      	nop
 800e9b6:	bf00      	nop

0800e9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e9b8:	4808      	ldr	r0, [pc, #32]	; (800e9dc <prvPortStartFirstTask+0x24>)
 800e9ba:	6800      	ldr	r0, [r0, #0]
 800e9bc:	6800      	ldr	r0, [r0, #0]
 800e9be:	f380 8808 	msr	MSP, r0
 800e9c2:	f04f 0000 	mov.w	r0, #0
 800e9c6:	f380 8814 	msr	CONTROL, r0
 800e9ca:	b662      	cpsie	i
 800e9cc:	b661      	cpsie	f
 800e9ce:	f3bf 8f4f 	dsb	sy
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	df00      	svc	0
 800e9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e9da:	bf00      	nop
 800e9dc:	e000ed08 	.word	0xe000ed08

0800e9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e9e6:	4b36      	ldr	r3, [pc, #216]	; (800eac0 <xPortStartScheduler+0xe0>)
 800e9e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	22ff      	movs	r2, #255	; 0xff
 800e9f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea00:	78fb      	ldrb	r3, [r7, #3]
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	4b2e      	ldr	r3, [pc, #184]	; (800eac4 <xPortStartScheduler+0xe4>)
 800ea0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ea0e:	4b2e      	ldr	r3, [pc, #184]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea10:	2207      	movs	r2, #7
 800ea12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea14:	e009      	b.n	800ea2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ea16:	4b2c      	ldr	r3, [pc, #176]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	4a2a      	ldr	r2, [pc, #168]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ea20:	78fb      	ldrb	r3, [r7, #3]
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea2a:	78fb      	ldrb	r3, [r7, #3]
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea32:	2b80      	cmp	r3, #128	; 0x80
 800ea34:	d0ef      	beq.n	800ea16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ea36:	4b24      	ldr	r3, [pc, #144]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f1c3 0307 	rsb	r3, r3, #7
 800ea3e:	2b04      	cmp	r3, #4
 800ea40:	d00b      	beq.n	800ea5a <xPortStartScheduler+0x7a>
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	b672      	cpsid	i
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	b662      	cpsie	i
 800ea56:	60bb      	str	r3, [r7, #8]
 800ea58:	e7fe      	b.n	800ea58 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea5a:	4b1b      	ldr	r3, [pc, #108]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	021b      	lsls	r3, r3, #8
 800ea60:	4a19      	ldr	r2, [pc, #100]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea64:	4b18      	ldr	r3, [pc, #96]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea6c:	4a16      	ldr	r2, [pc, #88]	; (800eac8 <xPortStartScheduler+0xe8>)
 800ea6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea78:	4b14      	ldr	r3, [pc, #80]	; (800eacc <xPortStartScheduler+0xec>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a13      	ldr	r2, [pc, #76]	; (800eacc <xPortStartScheduler+0xec>)
 800ea7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea84:	4b11      	ldr	r3, [pc, #68]	; (800eacc <xPortStartScheduler+0xec>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a10      	ldr	r2, [pc, #64]	; (800eacc <xPortStartScheduler+0xec>)
 800ea8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea90:	f000 f8d4 	bl	800ec3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea94:	4b0e      	ldr	r3, [pc, #56]	; (800ead0 <xPortStartScheduler+0xf0>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea9a:	f000 f8f3 	bl	800ec84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea9e:	4b0d      	ldr	r3, [pc, #52]	; (800ead4 <xPortStartScheduler+0xf4>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a0c      	ldr	r2, [pc, #48]	; (800ead4 <xPortStartScheduler+0xf4>)
 800eaa4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eaa8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eaaa:	f7ff ff85 	bl	800e9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eaae:	f7ff fa69 	bl	800df84 <vTaskSwitchContext>
	prvTaskExitError();
 800eab2:	f7ff ff3f 	bl	800e934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	e000e400 	.word	0xe000e400
 800eac4:	20001a48 	.word	0x20001a48
 800eac8:	20001a4c 	.word	0x20001a4c
 800eacc:	e000ed20 	.word	0xe000ed20
 800ead0:	200013c0 	.word	0x200013c0
 800ead4:	e000ef34 	.word	0xe000ef34

0800ead8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae2:	b672      	cpsid	i
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	b662      	cpsie	i
 800eaf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eaf4:	4b0f      	ldr	r3, [pc, #60]	; (800eb34 <vPortEnterCritical+0x5c>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	4a0e      	ldr	r2, [pc, #56]	; (800eb34 <vPortEnterCritical+0x5c>)
 800eafc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eafe:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <vPortEnterCritical+0x5c>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d110      	bne.n	800eb28 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb06:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <vPortEnterCritical+0x60>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00b      	beq.n	800eb28 <vPortEnterCritical+0x50>
 800eb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb14:	b672      	cpsid	i
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	b662      	cpsie	i
 800eb24:	603b      	str	r3, [r7, #0]
 800eb26:	e7fe      	b.n	800eb26 <vPortEnterCritical+0x4e>
	}
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	200013c0 	.word	0x200013c0
 800eb38:	e000ed04 	.word	0xe000ed04

0800eb3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eb42:	4b12      	ldr	r3, [pc, #72]	; (800eb8c <vPortExitCritical+0x50>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d10b      	bne.n	800eb62 <vPortExitCritical+0x26>
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	b672      	cpsid	i
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	b662      	cpsie	i
 800eb5e:	607b      	str	r3, [r7, #4]
 800eb60:	e7fe      	b.n	800eb60 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800eb62:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <vPortExitCritical+0x50>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	4a08      	ldr	r2, [pc, #32]	; (800eb8c <vPortExitCritical+0x50>)
 800eb6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb6c:	4b07      	ldr	r3, [pc, #28]	; (800eb8c <vPortExitCritical+0x50>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d104      	bne.n	800eb7e <vPortExitCritical+0x42>
 800eb74:	2300      	movs	r3, #0
 800eb76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb7e:	bf00      	nop
 800eb80:	370c      	adds	r7, #12
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	200013c0 	.word	0x200013c0

0800eb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb90:	f3ef 8009 	mrs	r0, PSP
 800eb94:	f3bf 8f6f 	isb	sy
 800eb98:	4b15      	ldr	r3, [pc, #84]	; (800ebf0 <pxCurrentTCBConst>)
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	f01e 0f10 	tst.w	lr, #16
 800eba0:	bf08      	it	eq
 800eba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebaa:	6010      	str	r0, [r2, #0]
 800ebac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ebb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ebb4:	b672      	cpsid	i
 800ebb6:	f380 8811 	msr	BASEPRI, r0
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	b662      	cpsie	i
 800ebc4:	f7ff f9de 	bl	800df84 <vTaskSwitchContext>
 800ebc8:	f04f 0000 	mov.w	r0, #0
 800ebcc:	f380 8811 	msr	BASEPRI, r0
 800ebd0:	bc09      	pop	{r0, r3}
 800ebd2:	6819      	ldr	r1, [r3, #0]
 800ebd4:	6808      	ldr	r0, [r1, #0]
 800ebd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebda:	f01e 0f10 	tst.w	lr, #16
 800ebde:	bf08      	it	eq
 800ebe0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ebe4:	f380 8809 	msr	PSP, r0
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop

0800ebf0 <pxCurrentTCBConst>:
 800ebf0:	2000191c 	.word	0x2000191c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ebf4:	bf00      	nop
 800ebf6:	bf00      	nop

0800ebf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec02:	b672      	cpsid	i
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	b662      	cpsie	i
 800ec12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ec14:	f7ff f8fc 	bl	800de10 <xTaskIncrementTick>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d003      	beq.n	800ec26 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec1e:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <SysTick_Handler+0x40>)
 800ec20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	2300      	movs	r3, #0
 800ec28:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	e000ed04 	.word	0xe000ed04

0800ec3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec40:	4b0b      	ldr	r3, [pc, #44]	; (800ec70 <vPortSetupTimerInterrupt+0x34>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec46:	4b0b      	ldr	r3, [pc, #44]	; (800ec74 <vPortSetupTimerInterrupt+0x38>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec4c:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <vPortSetupTimerInterrupt+0x3c>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a0a      	ldr	r2, [pc, #40]	; (800ec7c <vPortSetupTimerInterrupt+0x40>)
 800ec52:	fba2 2303 	umull	r2, r3, r2, r3
 800ec56:	099b      	lsrs	r3, r3, #6
 800ec58:	4a09      	ldr	r2, [pc, #36]	; (800ec80 <vPortSetupTimerInterrupt+0x44>)
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <vPortSetupTimerInterrupt+0x34>)
 800ec60:	2207      	movs	r2, #7
 800ec62:	601a      	str	r2, [r3, #0]
}
 800ec64:	bf00      	nop
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	e000e010 	.word	0xe000e010
 800ec74:	e000e018 	.word	0xe000e018
 800ec78:	200013b4 	.word	0x200013b4
 800ec7c:	10624dd3 	.word	0x10624dd3
 800ec80:	e000e014 	.word	0xe000e014

0800ec84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec94 <vPortEnableVFP+0x10>
 800ec88:	6801      	ldr	r1, [r0, #0]
 800ec8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec8e:	6001      	str	r1, [r0, #0]
 800ec90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec92:	bf00      	nop
 800ec94:	e000ed88 	.word	0xe000ed88

0800ec98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08a      	sub	sp, #40	; 0x28
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eca4:	f7fe fff8 	bl	800dc98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eca8:	4b5c      	ldr	r3, [pc, #368]	; (800ee1c <pvPortMalloc+0x184>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ecb0:	f000 f91a 	bl	800eee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecb4:	4b5a      	ldr	r3, [pc, #360]	; (800ee20 <pvPortMalloc+0x188>)
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f040 8090 	bne.w	800ede2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d01e      	beq.n	800ed06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ecc8:	2208      	movs	r2, #8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4413      	add	r3, r2
 800ecce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d015      	beq.n	800ed06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f023 0307 	bic.w	r3, r3, #7
 800ece0:	3308      	adds	r3, #8
 800ece2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f003 0307 	and.w	r3, r3, #7
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00b      	beq.n	800ed06 <pvPortMalloc+0x6e>
	__asm volatile
 800ecee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf2:	b672      	cpsid	i
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	b662      	cpsie	i
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	e7fe      	b.n	800ed04 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d06a      	beq.n	800ede2 <pvPortMalloc+0x14a>
 800ed0c:	4b45      	ldr	r3, [pc, #276]	; (800ee24 <pvPortMalloc+0x18c>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d865      	bhi.n	800ede2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed16:	4b44      	ldr	r3, [pc, #272]	; (800ee28 <pvPortMalloc+0x190>)
 800ed18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed1a:	4b43      	ldr	r3, [pc, #268]	; (800ee28 <pvPortMalloc+0x190>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed20:	e004      	b.n	800ed2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ed22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d903      	bls.n	800ed3e <pvPortMalloc+0xa6>
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1f1      	bne.n	800ed22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed3e:	4b37      	ldr	r3, [pc, #220]	; (800ee1c <pvPortMalloc+0x184>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d04c      	beq.n	800ede2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2208      	movs	r2, #8
 800ed4e:	4413      	add	r3, r2
 800ed50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	685a      	ldr	r2, [r3, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	1ad2      	subs	r2, r2, r3
 800ed62:	2308      	movs	r3, #8
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d920      	bls.n	800edac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4413      	add	r3, r2
 800ed70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	f003 0307 	and.w	r3, r3, #7
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00b      	beq.n	800ed94 <pvPortMalloc+0xfc>
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	b672      	cpsid	i
 800ed82:	f383 8811 	msr	BASEPRI, r3
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	f3bf 8f4f 	dsb	sy
 800ed8e:	b662      	cpsie	i
 800ed90:	613b      	str	r3, [r7, #16]
 800ed92:	e7fe      	b.n	800ed92 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	1ad2      	subs	r2, r2, r3
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eda6:	69b8      	ldr	r0, [r7, #24]
 800eda8:	f000 f900 	bl	800efac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edac:	4b1d      	ldr	r3, [pc, #116]	; (800ee24 <pvPortMalloc+0x18c>)
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	4a1b      	ldr	r2, [pc, #108]	; (800ee24 <pvPortMalloc+0x18c>)
 800edb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edba:	4b1a      	ldr	r3, [pc, #104]	; (800ee24 <pvPortMalloc+0x18c>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	4b1b      	ldr	r3, [pc, #108]	; (800ee2c <pvPortMalloc+0x194>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d203      	bcs.n	800edce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edc6:	4b17      	ldr	r3, [pc, #92]	; (800ee24 <pvPortMalloc+0x18c>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a18      	ldr	r2, [pc, #96]	; (800ee2c <pvPortMalloc+0x194>)
 800edcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	4b13      	ldr	r3, [pc, #76]	; (800ee20 <pvPortMalloc+0x188>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	431a      	orrs	r2, r3
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	2200      	movs	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ede2:	f7fe ff67 	bl	800dcb4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800edec:	f7f1 fbf2 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	f003 0307 	and.w	r3, r3, #7
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00b      	beq.n	800ee12 <pvPortMalloc+0x17a>
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	b672      	cpsid	i
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	b662      	cpsie	i
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	e7fe      	b.n	800ee10 <pvPortMalloc+0x178>
	return pvReturn;
 800ee12:	69fb      	ldr	r3, [r7, #28]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3728      	adds	r7, #40	; 0x28
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20009a58 	.word	0x20009a58
 800ee20:	20009a64 	.word	0x20009a64
 800ee24:	20009a5c 	.word	0x20009a5c
 800ee28:	20009a50 	.word	0x20009a50
 800ee2c:	20009a60 	.word	0x20009a60

0800ee30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b086      	sub	sp, #24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d04a      	beq.n	800eed8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee42:	2308      	movs	r3, #8
 800ee44:	425b      	negs	r3, r3
 800ee46:	697a      	ldr	r2, [r7, #20]
 800ee48:	4413      	add	r3, r2
 800ee4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	685a      	ldr	r2, [r3, #4]
 800ee54:	4b22      	ldr	r3, [pc, #136]	; (800eee0 <vPortFree+0xb0>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4013      	ands	r3, r2
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10b      	bne.n	800ee76 <vPortFree+0x46>
 800ee5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee62:	b672      	cpsid	i
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	b662      	cpsie	i
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	e7fe      	b.n	800ee74 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00b      	beq.n	800ee96 <vPortFree+0x66>
 800ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee82:	b672      	cpsid	i
 800ee84:	f383 8811 	msr	BASEPRI, r3
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	f3bf 8f4f 	dsb	sy
 800ee90:	b662      	cpsie	i
 800ee92:	60bb      	str	r3, [r7, #8]
 800ee94:	e7fe      	b.n	800ee94 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	685a      	ldr	r2, [r3, #4]
 800ee9a:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <vPortFree+0xb0>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4013      	ands	r3, r2
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d019      	beq.n	800eed8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d115      	bne.n	800eed8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	685a      	ldr	r2, [r3, #4]
 800eeb0:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <vPortFree+0xb0>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	43db      	mvns	r3, r3
 800eeb6:	401a      	ands	r2, r3
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eebc:	f7fe feec 	bl	800dc98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	685a      	ldr	r2, [r3, #4]
 800eec4:	4b07      	ldr	r3, [pc, #28]	; (800eee4 <vPortFree+0xb4>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4413      	add	r3, r2
 800eeca:	4a06      	ldr	r2, [pc, #24]	; (800eee4 <vPortFree+0xb4>)
 800eecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eece:	6938      	ldr	r0, [r7, #16]
 800eed0:	f000 f86c 	bl	800efac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eed4:	f7fe feee 	bl	800dcb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eed8:	bf00      	nop
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20009a64 	.word	0x20009a64
 800eee4:	20009a5c 	.word	0x20009a5c

0800eee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eeee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eef4:	4b27      	ldr	r3, [pc, #156]	; (800ef94 <prvHeapInit+0xac>)
 800eef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f003 0307 	and.w	r3, r3, #7
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00c      	beq.n	800ef1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3307      	adds	r3, #7
 800ef06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f023 0307 	bic.w	r3, r3, #7
 800ef0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	4a1f      	ldr	r2, [pc, #124]	; (800ef94 <prvHeapInit+0xac>)
 800ef18:	4413      	add	r3, r2
 800ef1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef20:	4a1d      	ldr	r2, [pc, #116]	; (800ef98 <prvHeapInit+0xb0>)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef26:	4b1c      	ldr	r3, [pc, #112]	; (800ef98 <prvHeapInit+0xb0>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	4413      	add	r3, r2
 800ef32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef34:	2208      	movs	r2, #8
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	1a9b      	subs	r3, r3, r2
 800ef3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f023 0307 	bic.w	r3, r3, #7
 800ef42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4a15      	ldr	r2, [pc, #84]	; (800ef9c <prvHeapInit+0xb4>)
 800ef48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <prvHeapInit+0xb4>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef52:	4b12      	ldr	r3, [pc, #72]	; (800ef9c <prvHeapInit+0xb4>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2200      	movs	r2, #0
 800ef58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	1ad2      	subs	r2, r2, r3
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef68:	4b0c      	ldr	r3, [pc, #48]	; (800ef9c <prvHeapInit+0xb4>)
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	4a0a      	ldr	r2, [pc, #40]	; (800efa0 <prvHeapInit+0xb8>)
 800ef76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	4a09      	ldr	r2, [pc, #36]	; (800efa4 <prvHeapInit+0xbc>)
 800ef7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef80:	4b09      	ldr	r3, [pc, #36]	; (800efa8 <prvHeapInit+0xc0>)
 800ef82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef86:	601a      	str	r2, [r3, #0]
}
 800ef88:	bf00      	nop
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	20001a50 	.word	0x20001a50
 800ef98:	20009a50 	.word	0x20009a50
 800ef9c:	20009a58 	.word	0x20009a58
 800efa0:	20009a60 	.word	0x20009a60
 800efa4:	20009a5c 	.word	0x20009a5c
 800efa8:	20009a64 	.word	0x20009a64

0800efac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efb4:	4b28      	ldr	r3, [pc, #160]	; (800f058 <prvInsertBlockIntoFreeList+0xac>)
 800efb6:	60fb      	str	r3, [r7, #12]
 800efb8:	e002      	b.n	800efc0 <prvInsertBlockIntoFreeList+0x14>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d8f7      	bhi.n	800efba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	4413      	add	r3, r2
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d108      	bne.n	800efee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	685a      	ldr	r2, [r3, #4]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	441a      	add	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	441a      	add	r2, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	429a      	cmp	r2, r3
 800f000:	d118      	bne.n	800f034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	4b15      	ldr	r3, [pc, #84]	; (800f05c <prvInsertBlockIntoFreeList+0xb0>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d00d      	beq.n	800f02a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	441a      	add	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	e008      	b.n	800f03c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f02a:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <prvInsertBlockIntoFreeList+0xb0>)
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	e003      	b.n	800f03c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	429a      	cmp	r2, r3
 800f042:	d002      	beq.n	800f04a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f04a:	bf00      	nop
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	20009a50 	.word	0x20009a50
 800f05c:	20009a58 	.word	0x20009a58

0800f060 <__errno>:
 800f060:	4b01      	ldr	r3, [pc, #4]	; (800f068 <__errno+0x8>)
 800f062:	6818      	ldr	r0, [r3, #0]
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop
 800f068:	200013c4 	.word	0x200013c4

0800f06c <__libc_init_array>:
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	4e0d      	ldr	r6, [pc, #52]	; (800f0a4 <__libc_init_array+0x38>)
 800f070:	4c0d      	ldr	r4, [pc, #52]	; (800f0a8 <__libc_init_array+0x3c>)
 800f072:	1ba4      	subs	r4, r4, r6
 800f074:	10a4      	asrs	r4, r4, #2
 800f076:	2500      	movs	r5, #0
 800f078:	42a5      	cmp	r5, r4
 800f07a:	d109      	bne.n	800f090 <__libc_init_array+0x24>
 800f07c:	4e0b      	ldr	r6, [pc, #44]	; (800f0ac <__libc_init_array+0x40>)
 800f07e:	4c0c      	ldr	r4, [pc, #48]	; (800f0b0 <__libc_init_array+0x44>)
 800f080:	f000 fc28 	bl	800f8d4 <_init>
 800f084:	1ba4      	subs	r4, r4, r6
 800f086:	10a4      	asrs	r4, r4, #2
 800f088:	2500      	movs	r5, #0
 800f08a:	42a5      	cmp	r5, r4
 800f08c:	d105      	bne.n	800f09a <__libc_init_array+0x2e>
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f094:	4798      	blx	r3
 800f096:	3501      	adds	r5, #1
 800f098:	e7ee      	b.n	800f078 <__libc_init_array+0xc>
 800f09a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f09e:	4798      	blx	r3
 800f0a0:	3501      	adds	r5, #1
 800f0a2:	e7f2      	b.n	800f08a <__libc_init_array+0x1e>
 800f0a4:	08011a4c 	.word	0x08011a4c
 800f0a8:	08011a4c 	.word	0x08011a4c
 800f0ac:	08011a4c 	.word	0x08011a4c
 800f0b0:	08011a50 	.word	0x08011a50

0800f0b4 <memcpy>:
 800f0b4:	b510      	push	{r4, lr}
 800f0b6:	1e43      	subs	r3, r0, #1
 800f0b8:	440a      	add	r2, r1
 800f0ba:	4291      	cmp	r1, r2
 800f0bc:	d100      	bne.n	800f0c0 <memcpy+0xc>
 800f0be:	bd10      	pop	{r4, pc}
 800f0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0c8:	e7f7      	b.n	800f0ba <memcpy+0x6>

0800f0ca <memset>:
 800f0ca:	4402      	add	r2, r0
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d100      	bne.n	800f0d4 <memset+0xa>
 800f0d2:	4770      	bx	lr
 800f0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800f0d8:	e7f9      	b.n	800f0ce <memset+0x4>
	...

0800f0dc <siprintf>:
 800f0dc:	b40e      	push	{r1, r2, r3}
 800f0de:	b500      	push	{lr}
 800f0e0:	b09c      	sub	sp, #112	; 0x70
 800f0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800f0e4:	9002      	str	r0, [sp, #8]
 800f0e6:	9006      	str	r0, [sp, #24]
 800f0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0ec:	4809      	ldr	r0, [pc, #36]	; (800f114 <siprintf+0x38>)
 800f0ee:	9107      	str	r1, [sp, #28]
 800f0f0:	9104      	str	r1, [sp, #16]
 800f0f2:	4909      	ldr	r1, [pc, #36]	; (800f118 <siprintf+0x3c>)
 800f0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f8:	9105      	str	r1, [sp, #20]
 800f0fa:	6800      	ldr	r0, [r0, #0]
 800f0fc:	9301      	str	r3, [sp, #4]
 800f0fe:	a902      	add	r1, sp, #8
 800f100:	f000 f866 	bl	800f1d0 <_svfiprintf_r>
 800f104:	9b02      	ldr	r3, [sp, #8]
 800f106:	2200      	movs	r2, #0
 800f108:	701a      	strb	r2, [r3, #0]
 800f10a:	b01c      	add	sp, #112	; 0x70
 800f10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f110:	b003      	add	sp, #12
 800f112:	4770      	bx	lr
 800f114:	200013c4 	.word	0x200013c4
 800f118:	ffff0208 	.word	0xffff0208

0800f11c <__ssputs_r>:
 800f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	688e      	ldr	r6, [r1, #8]
 800f122:	429e      	cmp	r6, r3
 800f124:	4682      	mov	sl, r0
 800f126:	460c      	mov	r4, r1
 800f128:	4690      	mov	r8, r2
 800f12a:	4699      	mov	r9, r3
 800f12c:	d837      	bhi.n	800f19e <__ssputs_r+0x82>
 800f12e:	898a      	ldrh	r2, [r1, #12]
 800f130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f134:	d031      	beq.n	800f19a <__ssputs_r+0x7e>
 800f136:	6825      	ldr	r5, [r4, #0]
 800f138:	6909      	ldr	r1, [r1, #16]
 800f13a:	1a6f      	subs	r7, r5, r1
 800f13c:	6965      	ldr	r5, [r4, #20]
 800f13e:	2302      	movs	r3, #2
 800f140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f144:	fb95 f5f3 	sdiv	r5, r5, r3
 800f148:	f109 0301 	add.w	r3, r9, #1
 800f14c:	443b      	add	r3, r7
 800f14e:	429d      	cmp	r5, r3
 800f150:	bf38      	it	cc
 800f152:	461d      	movcc	r5, r3
 800f154:	0553      	lsls	r3, r2, #21
 800f156:	d530      	bpl.n	800f1ba <__ssputs_r+0x9e>
 800f158:	4629      	mov	r1, r5
 800f15a:	f000 fb21 	bl	800f7a0 <_malloc_r>
 800f15e:	4606      	mov	r6, r0
 800f160:	b950      	cbnz	r0, 800f178 <__ssputs_r+0x5c>
 800f162:	230c      	movs	r3, #12
 800f164:	f8ca 3000 	str.w	r3, [sl]
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f16e:	81a3      	strh	r3, [r4, #12]
 800f170:	f04f 30ff 	mov.w	r0, #4294967295
 800f174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f178:	463a      	mov	r2, r7
 800f17a:	6921      	ldr	r1, [r4, #16]
 800f17c:	f7ff ff9a 	bl	800f0b4 <memcpy>
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f18a:	81a3      	strh	r3, [r4, #12]
 800f18c:	6126      	str	r6, [r4, #16]
 800f18e:	6165      	str	r5, [r4, #20]
 800f190:	443e      	add	r6, r7
 800f192:	1bed      	subs	r5, r5, r7
 800f194:	6026      	str	r6, [r4, #0]
 800f196:	60a5      	str	r5, [r4, #8]
 800f198:	464e      	mov	r6, r9
 800f19a:	454e      	cmp	r6, r9
 800f19c:	d900      	bls.n	800f1a0 <__ssputs_r+0x84>
 800f19e:	464e      	mov	r6, r9
 800f1a0:	4632      	mov	r2, r6
 800f1a2:	4641      	mov	r1, r8
 800f1a4:	6820      	ldr	r0, [r4, #0]
 800f1a6:	f000 fa93 	bl	800f6d0 <memmove>
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	1b9b      	subs	r3, r3, r6
 800f1ae:	60a3      	str	r3, [r4, #8]
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	441e      	add	r6, r3
 800f1b4:	6026      	str	r6, [r4, #0]
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	e7dc      	b.n	800f174 <__ssputs_r+0x58>
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	f000 fb4a 	bl	800f854 <_realloc_r>
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d1e2      	bne.n	800f18c <__ssputs_r+0x70>
 800f1c6:	6921      	ldr	r1, [r4, #16]
 800f1c8:	4650      	mov	r0, sl
 800f1ca:	f000 fa9b 	bl	800f704 <_free_r>
 800f1ce:	e7c8      	b.n	800f162 <__ssputs_r+0x46>

0800f1d0 <_svfiprintf_r>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	461d      	mov	r5, r3
 800f1d6:	898b      	ldrh	r3, [r1, #12]
 800f1d8:	061f      	lsls	r7, r3, #24
 800f1da:	b09d      	sub	sp, #116	; 0x74
 800f1dc:	4680      	mov	r8, r0
 800f1de:	460c      	mov	r4, r1
 800f1e0:	4616      	mov	r6, r2
 800f1e2:	d50f      	bpl.n	800f204 <_svfiprintf_r+0x34>
 800f1e4:	690b      	ldr	r3, [r1, #16]
 800f1e6:	b96b      	cbnz	r3, 800f204 <_svfiprintf_r+0x34>
 800f1e8:	2140      	movs	r1, #64	; 0x40
 800f1ea:	f000 fad9 	bl	800f7a0 <_malloc_r>
 800f1ee:	6020      	str	r0, [r4, #0]
 800f1f0:	6120      	str	r0, [r4, #16]
 800f1f2:	b928      	cbnz	r0, 800f200 <_svfiprintf_r+0x30>
 800f1f4:	230c      	movs	r3, #12
 800f1f6:	f8c8 3000 	str.w	r3, [r8]
 800f1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fe:	e0c8      	b.n	800f392 <_svfiprintf_r+0x1c2>
 800f200:	2340      	movs	r3, #64	; 0x40
 800f202:	6163      	str	r3, [r4, #20]
 800f204:	2300      	movs	r3, #0
 800f206:	9309      	str	r3, [sp, #36]	; 0x24
 800f208:	2320      	movs	r3, #32
 800f20a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f20e:	2330      	movs	r3, #48	; 0x30
 800f210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f214:	9503      	str	r5, [sp, #12]
 800f216:	f04f 0b01 	mov.w	fp, #1
 800f21a:	4637      	mov	r7, r6
 800f21c:	463d      	mov	r5, r7
 800f21e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f222:	b10b      	cbz	r3, 800f228 <_svfiprintf_r+0x58>
 800f224:	2b25      	cmp	r3, #37	; 0x25
 800f226:	d13e      	bne.n	800f2a6 <_svfiprintf_r+0xd6>
 800f228:	ebb7 0a06 	subs.w	sl, r7, r6
 800f22c:	d00b      	beq.n	800f246 <_svfiprintf_r+0x76>
 800f22e:	4653      	mov	r3, sl
 800f230:	4632      	mov	r2, r6
 800f232:	4621      	mov	r1, r4
 800f234:	4640      	mov	r0, r8
 800f236:	f7ff ff71 	bl	800f11c <__ssputs_r>
 800f23a:	3001      	adds	r0, #1
 800f23c:	f000 80a4 	beq.w	800f388 <_svfiprintf_r+0x1b8>
 800f240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f242:	4453      	add	r3, sl
 800f244:	9309      	str	r3, [sp, #36]	; 0x24
 800f246:	783b      	ldrb	r3, [r7, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f000 809d 	beq.w	800f388 <_svfiprintf_r+0x1b8>
 800f24e:	2300      	movs	r3, #0
 800f250:	f04f 32ff 	mov.w	r2, #4294967295
 800f254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	9307      	str	r3, [sp, #28]
 800f25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f260:	931a      	str	r3, [sp, #104]	; 0x68
 800f262:	462f      	mov	r7, r5
 800f264:	2205      	movs	r2, #5
 800f266:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f26a:	4850      	ldr	r0, [pc, #320]	; (800f3ac <_svfiprintf_r+0x1dc>)
 800f26c:	f7f0 ffd0 	bl	8000210 <memchr>
 800f270:	9b04      	ldr	r3, [sp, #16]
 800f272:	b9d0      	cbnz	r0, 800f2aa <_svfiprintf_r+0xda>
 800f274:	06d9      	lsls	r1, r3, #27
 800f276:	bf44      	itt	mi
 800f278:	2220      	movmi	r2, #32
 800f27a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f27e:	071a      	lsls	r2, r3, #28
 800f280:	bf44      	itt	mi
 800f282:	222b      	movmi	r2, #43	; 0x2b
 800f284:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f288:	782a      	ldrb	r2, [r5, #0]
 800f28a:	2a2a      	cmp	r2, #42	; 0x2a
 800f28c:	d015      	beq.n	800f2ba <_svfiprintf_r+0xea>
 800f28e:	9a07      	ldr	r2, [sp, #28]
 800f290:	462f      	mov	r7, r5
 800f292:	2000      	movs	r0, #0
 800f294:	250a      	movs	r5, #10
 800f296:	4639      	mov	r1, r7
 800f298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f29c:	3b30      	subs	r3, #48	; 0x30
 800f29e:	2b09      	cmp	r3, #9
 800f2a0:	d94d      	bls.n	800f33e <_svfiprintf_r+0x16e>
 800f2a2:	b1b8      	cbz	r0, 800f2d4 <_svfiprintf_r+0x104>
 800f2a4:	e00f      	b.n	800f2c6 <_svfiprintf_r+0xf6>
 800f2a6:	462f      	mov	r7, r5
 800f2a8:	e7b8      	b.n	800f21c <_svfiprintf_r+0x4c>
 800f2aa:	4a40      	ldr	r2, [pc, #256]	; (800f3ac <_svfiprintf_r+0x1dc>)
 800f2ac:	1a80      	subs	r0, r0, r2
 800f2ae:	fa0b f000 	lsl.w	r0, fp, r0
 800f2b2:	4318      	orrs	r0, r3
 800f2b4:	9004      	str	r0, [sp, #16]
 800f2b6:	463d      	mov	r5, r7
 800f2b8:	e7d3      	b.n	800f262 <_svfiprintf_r+0x92>
 800f2ba:	9a03      	ldr	r2, [sp, #12]
 800f2bc:	1d11      	adds	r1, r2, #4
 800f2be:	6812      	ldr	r2, [r2, #0]
 800f2c0:	9103      	str	r1, [sp, #12]
 800f2c2:	2a00      	cmp	r2, #0
 800f2c4:	db01      	blt.n	800f2ca <_svfiprintf_r+0xfa>
 800f2c6:	9207      	str	r2, [sp, #28]
 800f2c8:	e004      	b.n	800f2d4 <_svfiprintf_r+0x104>
 800f2ca:	4252      	negs	r2, r2
 800f2cc:	f043 0302 	orr.w	r3, r3, #2
 800f2d0:	9207      	str	r2, [sp, #28]
 800f2d2:	9304      	str	r3, [sp, #16]
 800f2d4:	783b      	ldrb	r3, [r7, #0]
 800f2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800f2d8:	d10c      	bne.n	800f2f4 <_svfiprintf_r+0x124>
 800f2da:	787b      	ldrb	r3, [r7, #1]
 800f2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800f2de:	d133      	bne.n	800f348 <_svfiprintf_r+0x178>
 800f2e0:	9b03      	ldr	r3, [sp, #12]
 800f2e2:	1d1a      	adds	r2, r3, #4
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	9203      	str	r2, [sp, #12]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bfb8      	it	lt
 800f2ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2f0:	3702      	adds	r7, #2
 800f2f2:	9305      	str	r3, [sp, #20]
 800f2f4:	4d2e      	ldr	r5, [pc, #184]	; (800f3b0 <_svfiprintf_r+0x1e0>)
 800f2f6:	7839      	ldrb	r1, [r7, #0]
 800f2f8:	2203      	movs	r2, #3
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f7f0 ff88 	bl	8000210 <memchr>
 800f300:	b138      	cbz	r0, 800f312 <_svfiprintf_r+0x142>
 800f302:	2340      	movs	r3, #64	; 0x40
 800f304:	1b40      	subs	r0, r0, r5
 800f306:	fa03 f000 	lsl.w	r0, r3, r0
 800f30a:	9b04      	ldr	r3, [sp, #16]
 800f30c:	4303      	orrs	r3, r0
 800f30e:	3701      	adds	r7, #1
 800f310:	9304      	str	r3, [sp, #16]
 800f312:	7839      	ldrb	r1, [r7, #0]
 800f314:	4827      	ldr	r0, [pc, #156]	; (800f3b4 <_svfiprintf_r+0x1e4>)
 800f316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f31a:	2206      	movs	r2, #6
 800f31c:	1c7e      	adds	r6, r7, #1
 800f31e:	f7f0 ff77 	bl	8000210 <memchr>
 800f322:	2800      	cmp	r0, #0
 800f324:	d038      	beq.n	800f398 <_svfiprintf_r+0x1c8>
 800f326:	4b24      	ldr	r3, [pc, #144]	; (800f3b8 <_svfiprintf_r+0x1e8>)
 800f328:	bb13      	cbnz	r3, 800f370 <_svfiprintf_r+0x1a0>
 800f32a:	9b03      	ldr	r3, [sp, #12]
 800f32c:	3307      	adds	r3, #7
 800f32e:	f023 0307 	bic.w	r3, r3, #7
 800f332:	3308      	adds	r3, #8
 800f334:	9303      	str	r3, [sp, #12]
 800f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f338:	444b      	add	r3, r9
 800f33a:	9309      	str	r3, [sp, #36]	; 0x24
 800f33c:	e76d      	b.n	800f21a <_svfiprintf_r+0x4a>
 800f33e:	fb05 3202 	mla	r2, r5, r2, r3
 800f342:	2001      	movs	r0, #1
 800f344:	460f      	mov	r7, r1
 800f346:	e7a6      	b.n	800f296 <_svfiprintf_r+0xc6>
 800f348:	2300      	movs	r3, #0
 800f34a:	3701      	adds	r7, #1
 800f34c:	9305      	str	r3, [sp, #20]
 800f34e:	4619      	mov	r1, r3
 800f350:	250a      	movs	r5, #10
 800f352:	4638      	mov	r0, r7
 800f354:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f358:	3a30      	subs	r2, #48	; 0x30
 800f35a:	2a09      	cmp	r2, #9
 800f35c:	d903      	bls.n	800f366 <_svfiprintf_r+0x196>
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d0c8      	beq.n	800f2f4 <_svfiprintf_r+0x124>
 800f362:	9105      	str	r1, [sp, #20]
 800f364:	e7c6      	b.n	800f2f4 <_svfiprintf_r+0x124>
 800f366:	fb05 2101 	mla	r1, r5, r1, r2
 800f36a:	2301      	movs	r3, #1
 800f36c:	4607      	mov	r7, r0
 800f36e:	e7f0      	b.n	800f352 <_svfiprintf_r+0x182>
 800f370:	ab03      	add	r3, sp, #12
 800f372:	9300      	str	r3, [sp, #0]
 800f374:	4622      	mov	r2, r4
 800f376:	4b11      	ldr	r3, [pc, #68]	; (800f3bc <_svfiprintf_r+0x1ec>)
 800f378:	a904      	add	r1, sp, #16
 800f37a:	4640      	mov	r0, r8
 800f37c:	f3af 8000 	nop.w
 800f380:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f384:	4681      	mov	r9, r0
 800f386:	d1d6      	bne.n	800f336 <_svfiprintf_r+0x166>
 800f388:	89a3      	ldrh	r3, [r4, #12]
 800f38a:	065b      	lsls	r3, r3, #25
 800f38c:	f53f af35 	bmi.w	800f1fa <_svfiprintf_r+0x2a>
 800f390:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f392:	b01d      	add	sp, #116	; 0x74
 800f394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f398:	ab03      	add	r3, sp, #12
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	4622      	mov	r2, r4
 800f39e:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <_svfiprintf_r+0x1ec>)
 800f3a0:	a904      	add	r1, sp, #16
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	f000 f882 	bl	800f4ac <_printf_i>
 800f3a8:	e7ea      	b.n	800f380 <_svfiprintf_r+0x1b0>
 800f3aa:	bf00      	nop
 800f3ac:	08011a10 	.word	0x08011a10
 800f3b0:	08011a16 	.word	0x08011a16
 800f3b4:	08011a1a 	.word	0x08011a1a
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	0800f11d 	.word	0x0800f11d

0800f3c0 <_printf_common>:
 800f3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c4:	4691      	mov	r9, r2
 800f3c6:	461f      	mov	r7, r3
 800f3c8:	688a      	ldr	r2, [r1, #8]
 800f3ca:	690b      	ldr	r3, [r1, #16]
 800f3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	bfb8      	it	lt
 800f3d4:	4613      	movlt	r3, r2
 800f3d6:	f8c9 3000 	str.w	r3, [r9]
 800f3da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3de:	4606      	mov	r6, r0
 800f3e0:	460c      	mov	r4, r1
 800f3e2:	b112      	cbz	r2, 800f3ea <_printf_common+0x2a>
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	f8c9 3000 	str.w	r3, [r9]
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	0699      	lsls	r1, r3, #26
 800f3ee:	bf42      	ittt	mi
 800f3f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f3f4:	3302      	addmi	r3, #2
 800f3f6:	f8c9 3000 	strmi.w	r3, [r9]
 800f3fa:	6825      	ldr	r5, [r4, #0]
 800f3fc:	f015 0506 	ands.w	r5, r5, #6
 800f400:	d107      	bne.n	800f412 <_printf_common+0x52>
 800f402:	f104 0a19 	add.w	sl, r4, #25
 800f406:	68e3      	ldr	r3, [r4, #12]
 800f408:	f8d9 2000 	ldr.w	r2, [r9]
 800f40c:	1a9b      	subs	r3, r3, r2
 800f40e:	42ab      	cmp	r3, r5
 800f410:	dc28      	bgt.n	800f464 <_printf_common+0xa4>
 800f412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f416:	6822      	ldr	r2, [r4, #0]
 800f418:	3300      	adds	r3, #0
 800f41a:	bf18      	it	ne
 800f41c:	2301      	movne	r3, #1
 800f41e:	0692      	lsls	r2, r2, #26
 800f420:	d42d      	bmi.n	800f47e <_printf_common+0xbe>
 800f422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f426:	4639      	mov	r1, r7
 800f428:	4630      	mov	r0, r6
 800f42a:	47c0      	blx	r8
 800f42c:	3001      	adds	r0, #1
 800f42e:	d020      	beq.n	800f472 <_printf_common+0xb2>
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	68e5      	ldr	r5, [r4, #12]
 800f434:	f8d9 2000 	ldr.w	r2, [r9]
 800f438:	f003 0306 	and.w	r3, r3, #6
 800f43c:	2b04      	cmp	r3, #4
 800f43e:	bf08      	it	eq
 800f440:	1aad      	subeq	r5, r5, r2
 800f442:	68a3      	ldr	r3, [r4, #8]
 800f444:	6922      	ldr	r2, [r4, #16]
 800f446:	bf0c      	ite	eq
 800f448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f44c:	2500      	movne	r5, #0
 800f44e:	4293      	cmp	r3, r2
 800f450:	bfc4      	itt	gt
 800f452:	1a9b      	subgt	r3, r3, r2
 800f454:	18ed      	addgt	r5, r5, r3
 800f456:	f04f 0900 	mov.w	r9, #0
 800f45a:	341a      	adds	r4, #26
 800f45c:	454d      	cmp	r5, r9
 800f45e:	d11a      	bne.n	800f496 <_printf_common+0xd6>
 800f460:	2000      	movs	r0, #0
 800f462:	e008      	b.n	800f476 <_printf_common+0xb6>
 800f464:	2301      	movs	r3, #1
 800f466:	4652      	mov	r2, sl
 800f468:	4639      	mov	r1, r7
 800f46a:	4630      	mov	r0, r6
 800f46c:	47c0      	blx	r8
 800f46e:	3001      	adds	r0, #1
 800f470:	d103      	bne.n	800f47a <_printf_common+0xba>
 800f472:	f04f 30ff 	mov.w	r0, #4294967295
 800f476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f47a:	3501      	adds	r5, #1
 800f47c:	e7c3      	b.n	800f406 <_printf_common+0x46>
 800f47e:	18e1      	adds	r1, r4, r3
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	2030      	movs	r0, #48	; 0x30
 800f484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f488:	4422      	add	r2, r4
 800f48a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f48e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f492:	3302      	adds	r3, #2
 800f494:	e7c5      	b.n	800f422 <_printf_common+0x62>
 800f496:	2301      	movs	r3, #1
 800f498:	4622      	mov	r2, r4
 800f49a:	4639      	mov	r1, r7
 800f49c:	4630      	mov	r0, r6
 800f49e:	47c0      	blx	r8
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d0e6      	beq.n	800f472 <_printf_common+0xb2>
 800f4a4:	f109 0901 	add.w	r9, r9, #1
 800f4a8:	e7d8      	b.n	800f45c <_printf_common+0x9c>
	...

0800f4ac <_printf_i>:
 800f4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f4b4:	460c      	mov	r4, r1
 800f4b6:	7e09      	ldrb	r1, [r1, #24]
 800f4b8:	b085      	sub	sp, #20
 800f4ba:	296e      	cmp	r1, #110	; 0x6e
 800f4bc:	4617      	mov	r7, r2
 800f4be:	4606      	mov	r6, r0
 800f4c0:	4698      	mov	r8, r3
 800f4c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4c4:	f000 80b3 	beq.w	800f62e <_printf_i+0x182>
 800f4c8:	d822      	bhi.n	800f510 <_printf_i+0x64>
 800f4ca:	2963      	cmp	r1, #99	; 0x63
 800f4cc:	d036      	beq.n	800f53c <_printf_i+0x90>
 800f4ce:	d80a      	bhi.n	800f4e6 <_printf_i+0x3a>
 800f4d0:	2900      	cmp	r1, #0
 800f4d2:	f000 80b9 	beq.w	800f648 <_printf_i+0x19c>
 800f4d6:	2958      	cmp	r1, #88	; 0x58
 800f4d8:	f000 8083 	beq.w	800f5e2 <_printf_i+0x136>
 800f4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f4e4:	e032      	b.n	800f54c <_printf_i+0xa0>
 800f4e6:	2964      	cmp	r1, #100	; 0x64
 800f4e8:	d001      	beq.n	800f4ee <_printf_i+0x42>
 800f4ea:	2969      	cmp	r1, #105	; 0x69
 800f4ec:	d1f6      	bne.n	800f4dc <_printf_i+0x30>
 800f4ee:	6820      	ldr	r0, [r4, #0]
 800f4f0:	6813      	ldr	r3, [r2, #0]
 800f4f2:	0605      	lsls	r5, r0, #24
 800f4f4:	f103 0104 	add.w	r1, r3, #4
 800f4f8:	d52a      	bpl.n	800f550 <_printf_i+0xa4>
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	6011      	str	r1, [r2, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	da03      	bge.n	800f50a <_printf_i+0x5e>
 800f502:	222d      	movs	r2, #45	; 0x2d
 800f504:	425b      	negs	r3, r3
 800f506:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f50a:	486f      	ldr	r0, [pc, #444]	; (800f6c8 <_printf_i+0x21c>)
 800f50c:	220a      	movs	r2, #10
 800f50e:	e039      	b.n	800f584 <_printf_i+0xd8>
 800f510:	2973      	cmp	r1, #115	; 0x73
 800f512:	f000 809d 	beq.w	800f650 <_printf_i+0x1a4>
 800f516:	d808      	bhi.n	800f52a <_printf_i+0x7e>
 800f518:	296f      	cmp	r1, #111	; 0x6f
 800f51a:	d020      	beq.n	800f55e <_printf_i+0xb2>
 800f51c:	2970      	cmp	r1, #112	; 0x70
 800f51e:	d1dd      	bne.n	800f4dc <_printf_i+0x30>
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	f043 0320 	orr.w	r3, r3, #32
 800f526:	6023      	str	r3, [r4, #0]
 800f528:	e003      	b.n	800f532 <_printf_i+0x86>
 800f52a:	2975      	cmp	r1, #117	; 0x75
 800f52c:	d017      	beq.n	800f55e <_printf_i+0xb2>
 800f52e:	2978      	cmp	r1, #120	; 0x78
 800f530:	d1d4      	bne.n	800f4dc <_printf_i+0x30>
 800f532:	2378      	movs	r3, #120	; 0x78
 800f534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f538:	4864      	ldr	r0, [pc, #400]	; (800f6cc <_printf_i+0x220>)
 800f53a:	e055      	b.n	800f5e8 <_printf_i+0x13c>
 800f53c:	6813      	ldr	r3, [r2, #0]
 800f53e:	1d19      	adds	r1, r3, #4
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	6011      	str	r1, [r2, #0]
 800f544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f54c:	2301      	movs	r3, #1
 800f54e:	e08c      	b.n	800f66a <_printf_i+0x1be>
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	6011      	str	r1, [r2, #0]
 800f554:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f558:	bf18      	it	ne
 800f55a:	b21b      	sxthne	r3, r3
 800f55c:	e7cf      	b.n	800f4fe <_printf_i+0x52>
 800f55e:	6813      	ldr	r3, [r2, #0]
 800f560:	6825      	ldr	r5, [r4, #0]
 800f562:	1d18      	adds	r0, r3, #4
 800f564:	6010      	str	r0, [r2, #0]
 800f566:	0628      	lsls	r0, r5, #24
 800f568:	d501      	bpl.n	800f56e <_printf_i+0xc2>
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	e002      	b.n	800f574 <_printf_i+0xc8>
 800f56e:	0668      	lsls	r0, r5, #25
 800f570:	d5fb      	bpl.n	800f56a <_printf_i+0xbe>
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	4854      	ldr	r0, [pc, #336]	; (800f6c8 <_printf_i+0x21c>)
 800f576:	296f      	cmp	r1, #111	; 0x6f
 800f578:	bf14      	ite	ne
 800f57a:	220a      	movne	r2, #10
 800f57c:	2208      	moveq	r2, #8
 800f57e:	2100      	movs	r1, #0
 800f580:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f584:	6865      	ldr	r5, [r4, #4]
 800f586:	60a5      	str	r5, [r4, #8]
 800f588:	2d00      	cmp	r5, #0
 800f58a:	f2c0 8095 	blt.w	800f6b8 <_printf_i+0x20c>
 800f58e:	6821      	ldr	r1, [r4, #0]
 800f590:	f021 0104 	bic.w	r1, r1, #4
 800f594:	6021      	str	r1, [r4, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d13d      	bne.n	800f616 <_printf_i+0x16a>
 800f59a:	2d00      	cmp	r5, #0
 800f59c:	f040 808e 	bne.w	800f6bc <_printf_i+0x210>
 800f5a0:	4665      	mov	r5, ip
 800f5a2:	2a08      	cmp	r2, #8
 800f5a4:	d10b      	bne.n	800f5be <_printf_i+0x112>
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	07db      	lsls	r3, r3, #31
 800f5aa:	d508      	bpl.n	800f5be <_printf_i+0x112>
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	6862      	ldr	r2, [r4, #4]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	bfde      	ittt	le
 800f5b4:	2330      	movle	r3, #48	; 0x30
 800f5b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5be:	ebac 0305 	sub.w	r3, ip, r5
 800f5c2:	6123      	str	r3, [r4, #16]
 800f5c4:	f8cd 8000 	str.w	r8, [sp]
 800f5c8:	463b      	mov	r3, r7
 800f5ca:	aa03      	add	r2, sp, #12
 800f5cc:	4621      	mov	r1, r4
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f7ff fef6 	bl	800f3c0 <_printf_common>
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	d14d      	bne.n	800f674 <_printf_i+0x1c8>
 800f5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5dc:	b005      	add	sp, #20
 800f5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5e2:	4839      	ldr	r0, [pc, #228]	; (800f6c8 <_printf_i+0x21c>)
 800f5e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f5e8:	6813      	ldr	r3, [r2, #0]
 800f5ea:	6821      	ldr	r1, [r4, #0]
 800f5ec:	1d1d      	adds	r5, r3, #4
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6015      	str	r5, [r2, #0]
 800f5f2:	060a      	lsls	r2, r1, #24
 800f5f4:	d50b      	bpl.n	800f60e <_printf_i+0x162>
 800f5f6:	07ca      	lsls	r2, r1, #31
 800f5f8:	bf44      	itt	mi
 800f5fa:	f041 0120 	orrmi.w	r1, r1, #32
 800f5fe:	6021      	strmi	r1, [r4, #0]
 800f600:	b91b      	cbnz	r3, 800f60a <_printf_i+0x15e>
 800f602:	6822      	ldr	r2, [r4, #0]
 800f604:	f022 0220 	bic.w	r2, r2, #32
 800f608:	6022      	str	r2, [r4, #0]
 800f60a:	2210      	movs	r2, #16
 800f60c:	e7b7      	b.n	800f57e <_printf_i+0xd2>
 800f60e:	064d      	lsls	r5, r1, #25
 800f610:	bf48      	it	mi
 800f612:	b29b      	uxthmi	r3, r3
 800f614:	e7ef      	b.n	800f5f6 <_printf_i+0x14a>
 800f616:	4665      	mov	r5, ip
 800f618:	fbb3 f1f2 	udiv	r1, r3, r2
 800f61c:	fb02 3311 	mls	r3, r2, r1, r3
 800f620:	5cc3      	ldrb	r3, [r0, r3]
 800f622:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f626:	460b      	mov	r3, r1
 800f628:	2900      	cmp	r1, #0
 800f62a:	d1f5      	bne.n	800f618 <_printf_i+0x16c>
 800f62c:	e7b9      	b.n	800f5a2 <_printf_i+0xf6>
 800f62e:	6813      	ldr	r3, [r2, #0]
 800f630:	6825      	ldr	r5, [r4, #0]
 800f632:	6961      	ldr	r1, [r4, #20]
 800f634:	1d18      	adds	r0, r3, #4
 800f636:	6010      	str	r0, [r2, #0]
 800f638:	0628      	lsls	r0, r5, #24
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	d501      	bpl.n	800f642 <_printf_i+0x196>
 800f63e:	6019      	str	r1, [r3, #0]
 800f640:	e002      	b.n	800f648 <_printf_i+0x19c>
 800f642:	066a      	lsls	r2, r5, #25
 800f644:	d5fb      	bpl.n	800f63e <_printf_i+0x192>
 800f646:	8019      	strh	r1, [r3, #0]
 800f648:	2300      	movs	r3, #0
 800f64a:	6123      	str	r3, [r4, #16]
 800f64c:	4665      	mov	r5, ip
 800f64e:	e7b9      	b.n	800f5c4 <_printf_i+0x118>
 800f650:	6813      	ldr	r3, [r2, #0]
 800f652:	1d19      	adds	r1, r3, #4
 800f654:	6011      	str	r1, [r2, #0]
 800f656:	681d      	ldr	r5, [r3, #0]
 800f658:	6862      	ldr	r2, [r4, #4]
 800f65a:	2100      	movs	r1, #0
 800f65c:	4628      	mov	r0, r5
 800f65e:	f7f0 fdd7 	bl	8000210 <memchr>
 800f662:	b108      	cbz	r0, 800f668 <_printf_i+0x1bc>
 800f664:	1b40      	subs	r0, r0, r5
 800f666:	6060      	str	r0, [r4, #4]
 800f668:	6863      	ldr	r3, [r4, #4]
 800f66a:	6123      	str	r3, [r4, #16]
 800f66c:	2300      	movs	r3, #0
 800f66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f672:	e7a7      	b.n	800f5c4 <_printf_i+0x118>
 800f674:	6923      	ldr	r3, [r4, #16]
 800f676:	462a      	mov	r2, r5
 800f678:	4639      	mov	r1, r7
 800f67a:	4630      	mov	r0, r6
 800f67c:	47c0      	blx	r8
 800f67e:	3001      	adds	r0, #1
 800f680:	d0aa      	beq.n	800f5d8 <_printf_i+0x12c>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	079b      	lsls	r3, r3, #30
 800f686:	d413      	bmi.n	800f6b0 <_printf_i+0x204>
 800f688:	68e0      	ldr	r0, [r4, #12]
 800f68a:	9b03      	ldr	r3, [sp, #12]
 800f68c:	4298      	cmp	r0, r3
 800f68e:	bfb8      	it	lt
 800f690:	4618      	movlt	r0, r3
 800f692:	e7a3      	b.n	800f5dc <_printf_i+0x130>
 800f694:	2301      	movs	r3, #1
 800f696:	464a      	mov	r2, r9
 800f698:	4639      	mov	r1, r7
 800f69a:	4630      	mov	r0, r6
 800f69c:	47c0      	blx	r8
 800f69e:	3001      	adds	r0, #1
 800f6a0:	d09a      	beq.n	800f5d8 <_printf_i+0x12c>
 800f6a2:	3501      	adds	r5, #1
 800f6a4:	68e3      	ldr	r3, [r4, #12]
 800f6a6:	9a03      	ldr	r2, [sp, #12]
 800f6a8:	1a9b      	subs	r3, r3, r2
 800f6aa:	42ab      	cmp	r3, r5
 800f6ac:	dcf2      	bgt.n	800f694 <_printf_i+0x1e8>
 800f6ae:	e7eb      	b.n	800f688 <_printf_i+0x1dc>
 800f6b0:	2500      	movs	r5, #0
 800f6b2:	f104 0919 	add.w	r9, r4, #25
 800f6b6:	e7f5      	b.n	800f6a4 <_printf_i+0x1f8>
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1ac      	bne.n	800f616 <_printf_i+0x16a>
 800f6bc:	7803      	ldrb	r3, [r0, #0]
 800f6be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6c6:	e76c      	b.n	800f5a2 <_printf_i+0xf6>
 800f6c8:	08011a21 	.word	0x08011a21
 800f6cc:	08011a32 	.word	0x08011a32

0800f6d0 <memmove>:
 800f6d0:	4288      	cmp	r0, r1
 800f6d2:	b510      	push	{r4, lr}
 800f6d4:	eb01 0302 	add.w	r3, r1, r2
 800f6d8:	d807      	bhi.n	800f6ea <memmove+0x1a>
 800f6da:	1e42      	subs	r2, r0, #1
 800f6dc:	4299      	cmp	r1, r3
 800f6de:	d00a      	beq.n	800f6f6 <memmove+0x26>
 800f6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f6e8:	e7f8      	b.n	800f6dc <memmove+0xc>
 800f6ea:	4283      	cmp	r3, r0
 800f6ec:	d9f5      	bls.n	800f6da <memmove+0xa>
 800f6ee:	1881      	adds	r1, r0, r2
 800f6f0:	1ad2      	subs	r2, r2, r3
 800f6f2:	42d3      	cmn	r3, r2
 800f6f4:	d100      	bne.n	800f6f8 <memmove+0x28>
 800f6f6:	bd10      	pop	{r4, pc}
 800f6f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f700:	e7f7      	b.n	800f6f2 <memmove+0x22>
	...

0800f704 <_free_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4605      	mov	r5, r0
 800f708:	2900      	cmp	r1, #0
 800f70a:	d045      	beq.n	800f798 <_free_r+0x94>
 800f70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f710:	1f0c      	subs	r4, r1, #4
 800f712:	2b00      	cmp	r3, #0
 800f714:	bfb8      	it	lt
 800f716:	18e4      	addlt	r4, r4, r3
 800f718:	f000 f8d2 	bl	800f8c0 <__malloc_lock>
 800f71c:	4a1f      	ldr	r2, [pc, #124]	; (800f79c <_free_r+0x98>)
 800f71e:	6813      	ldr	r3, [r2, #0]
 800f720:	4610      	mov	r0, r2
 800f722:	b933      	cbnz	r3, 800f732 <_free_r+0x2e>
 800f724:	6063      	str	r3, [r4, #4]
 800f726:	6014      	str	r4, [r2, #0]
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72e:	f000 b8c8 	b.w	800f8c2 <__malloc_unlock>
 800f732:	42a3      	cmp	r3, r4
 800f734:	d90c      	bls.n	800f750 <_free_r+0x4c>
 800f736:	6821      	ldr	r1, [r4, #0]
 800f738:	1862      	adds	r2, r4, r1
 800f73a:	4293      	cmp	r3, r2
 800f73c:	bf04      	itt	eq
 800f73e:	681a      	ldreq	r2, [r3, #0]
 800f740:	685b      	ldreq	r3, [r3, #4]
 800f742:	6063      	str	r3, [r4, #4]
 800f744:	bf04      	itt	eq
 800f746:	1852      	addeq	r2, r2, r1
 800f748:	6022      	streq	r2, [r4, #0]
 800f74a:	6004      	str	r4, [r0, #0]
 800f74c:	e7ec      	b.n	800f728 <_free_r+0x24>
 800f74e:	4613      	mov	r3, r2
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	b10a      	cbz	r2, 800f758 <_free_r+0x54>
 800f754:	42a2      	cmp	r2, r4
 800f756:	d9fa      	bls.n	800f74e <_free_r+0x4a>
 800f758:	6819      	ldr	r1, [r3, #0]
 800f75a:	1858      	adds	r0, r3, r1
 800f75c:	42a0      	cmp	r0, r4
 800f75e:	d10b      	bne.n	800f778 <_free_r+0x74>
 800f760:	6820      	ldr	r0, [r4, #0]
 800f762:	4401      	add	r1, r0
 800f764:	1858      	adds	r0, r3, r1
 800f766:	4282      	cmp	r2, r0
 800f768:	6019      	str	r1, [r3, #0]
 800f76a:	d1dd      	bne.n	800f728 <_free_r+0x24>
 800f76c:	6810      	ldr	r0, [r2, #0]
 800f76e:	6852      	ldr	r2, [r2, #4]
 800f770:	605a      	str	r2, [r3, #4]
 800f772:	4401      	add	r1, r0
 800f774:	6019      	str	r1, [r3, #0]
 800f776:	e7d7      	b.n	800f728 <_free_r+0x24>
 800f778:	d902      	bls.n	800f780 <_free_r+0x7c>
 800f77a:	230c      	movs	r3, #12
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	e7d3      	b.n	800f728 <_free_r+0x24>
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	1821      	adds	r1, r4, r0
 800f784:	428a      	cmp	r2, r1
 800f786:	bf04      	itt	eq
 800f788:	6811      	ldreq	r1, [r2, #0]
 800f78a:	6852      	ldreq	r2, [r2, #4]
 800f78c:	6062      	str	r2, [r4, #4]
 800f78e:	bf04      	itt	eq
 800f790:	1809      	addeq	r1, r1, r0
 800f792:	6021      	streq	r1, [r4, #0]
 800f794:	605c      	str	r4, [r3, #4]
 800f796:	e7c7      	b.n	800f728 <_free_r+0x24>
 800f798:	bd38      	pop	{r3, r4, r5, pc}
 800f79a:	bf00      	nop
 800f79c:	20009a68 	.word	0x20009a68

0800f7a0 <_malloc_r>:
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	1ccd      	adds	r5, r1, #3
 800f7a4:	f025 0503 	bic.w	r5, r5, #3
 800f7a8:	3508      	adds	r5, #8
 800f7aa:	2d0c      	cmp	r5, #12
 800f7ac:	bf38      	it	cc
 800f7ae:	250c      	movcc	r5, #12
 800f7b0:	2d00      	cmp	r5, #0
 800f7b2:	4606      	mov	r6, r0
 800f7b4:	db01      	blt.n	800f7ba <_malloc_r+0x1a>
 800f7b6:	42a9      	cmp	r1, r5
 800f7b8:	d903      	bls.n	800f7c2 <_malloc_r+0x22>
 800f7ba:	230c      	movs	r3, #12
 800f7bc:	6033      	str	r3, [r6, #0]
 800f7be:	2000      	movs	r0, #0
 800f7c0:	bd70      	pop	{r4, r5, r6, pc}
 800f7c2:	f000 f87d 	bl	800f8c0 <__malloc_lock>
 800f7c6:	4a21      	ldr	r2, [pc, #132]	; (800f84c <_malloc_r+0xac>)
 800f7c8:	6814      	ldr	r4, [r2, #0]
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	b991      	cbnz	r1, 800f7f4 <_malloc_r+0x54>
 800f7ce:	4c20      	ldr	r4, [pc, #128]	; (800f850 <_malloc_r+0xb0>)
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	b91b      	cbnz	r3, 800f7dc <_malloc_r+0x3c>
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f000 f863 	bl	800f8a0 <_sbrk_r>
 800f7da:	6020      	str	r0, [r4, #0]
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f000 f85e 	bl	800f8a0 <_sbrk_r>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d124      	bne.n	800f832 <_malloc_r+0x92>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	6033      	str	r3, [r6, #0]
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f000 f868 	bl	800f8c2 <__malloc_unlock>
 800f7f2:	e7e4      	b.n	800f7be <_malloc_r+0x1e>
 800f7f4:	680b      	ldr	r3, [r1, #0]
 800f7f6:	1b5b      	subs	r3, r3, r5
 800f7f8:	d418      	bmi.n	800f82c <_malloc_r+0x8c>
 800f7fa:	2b0b      	cmp	r3, #11
 800f7fc:	d90f      	bls.n	800f81e <_malloc_r+0x7e>
 800f7fe:	600b      	str	r3, [r1, #0]
 800f800:	50cd      	str	r5, [r1, r3]
 800f802:	18cc      	adds	r4, r1, r3
 800f804:	4630      	mov	r0, r6
 800f806:	f000 f85c 	bl	800f8c2 <__malloc_unlock>
 800f80a:	f104 000b 	add.w	r0, r4, #11
 800f80e:	1d23      	adds	r3, r4, #4
 800f810:	f020 0007 	bic.w	r0, r0, #7
 800f814:	1ac3      	subs	r3, r0, r3
 800f816:	d0d3      	beq.n	800f7c0 <_malloc_r+0x20>
 800f818:	425a      	negs	r2, r3
 800f81a:	50e2      	str	r2, [r4, r3]
 800f81c:	e7d0      	b.n	800f7c0 <_malloc_r+0x20>
 800f81e:	428c      	cmp	r4, r1
 800f820:	684b      	ldr	r3, [r1, #4]
 800f822:	bf16      	itet	ne
 800f824:	6063      	strne	r3, [r4, #4]
 800f826:	6013      	streq	r3, [r2, #0]
 800f828:	460c      	movne	r4, r1
 800f82a:	e7eb      	b.n	800f804 <_malloc_r+0x64>
 800f82c:	460c      	mov	r4, r1
 800f82e:	6849      	ldr	r1, [r1, #4]
 800f830:	e7cc      	b.n	800f7cc <_malloc_r+0x2c>
 800f832:	1cc4      	adds	r4, r0, #3
 800f834:	f024 0403 	bic.w	r4, r4, #3
 800f838:	42a0      	cmp	r0, r4
 800f83a:	d005      	beq.n	800f848 <_malloc_r+0xa8>
 800f83c:	1a21      	subs	r1, r4, r0
 800f83e:	4630      	mov	r0, r6
 800f840:	f000 f82e 	bl	800f8a0 <_sbrk_r>
 800f844:	3001      	adds	r0, #1
 800f846:	d0cf      	beq.n	800f7e8 <_malloc_r+0x48>
 800f848:	6025      	str	r5, [r4, #0]
 800f84a:	e7db      	b.n	800f804 <_malloc_r+0x64>
 800f84c:	20009a68 	.word	0x20009a68
 800f850:	20009a6c 	.word	0x20009a6c

0800f854 <_realloc_r>:
 800f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f856:	4607      	mov	r7, r0
 800f858:	4614      	mov	r4, r2
 800f85a:	460e      	mov	r6, r1
 800f85c:	b921      	cbnz	r1, 800f868 <_realloc_r+0x14>
 800f85e:	4611      	mov	r1, r2
 800f860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f864:	f7ff bf9c 	b.w	800f7a0 <_malloc_r>
 800f868:	b922      	cbnz	r2, 800f874 <_realloc_r+0x20>
 800f86a:	f7ff ff4b 	bl	800f704 <_free_r>
 800f86e:	4625      	mov	r5, r4
 800f870:	4628      	mov	r0, r5
 800f872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f874:	f000 f826 	bl	800f8c4 <_malloc_usable_size_r>
 800f878:	42a0      	cmp	r0, r4
 800f87a:	d20f      	bcs.n	800f89c <_realloc_r+0x48>
 800f87c:	4621      	mov	r1, r4
 800f87e:	4638      	mov	r0, r7
 800f880:	f7ff ff8e 	bl	800f7a0 <_malloc_r>
 800f884:	4605      	mov	r5, r0
 800f886:	2800      	cmp	r0, #0
 800f888:	d0f2      	beq.n	800f870 <_realloc_r+0x1c>
 800f88a:	4631      	mov	r1, r6
 800f88c:	4622      	mov	r2, r4
 800f88e:	f7ff fc11 	bl	800f0b4 <memcpy>
 800f892:	4631      	mov	r1, r6
 800f894:	4638      	mov	r0, r7
 800f896:	f7ff ff35 	bl	800f704 <_free_r>
 800f89a:	e7e9      	b.n	800f870 <_realloc_r+0x1c>
 800f89c:	4635      	mov	r5, r6
 800f89e:	e7e7      	b.n	800f870 <_realloc_r+0x1c>

0800f8a0 <_sbrk_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4c06      	ldr	r4, [pc, #24]	; (800f8bc <_sbrk_r+0x1c>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	6023      	str	r3, [r4, #0]
 800f8ac:	f7f6 fc70 	bl	8006190 <_sbrk>
 800f8b0:	1c43      	adds	r3, r0, #1
 800f8b2:	d102      	bne.n	800f8ba <_sbrk_r+0x1a>
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	b103      	cbz	r3, 800f8ba <_sbrk_r+0x1a>
 800f8b8:	602b      	str	r3, [r5, #0]
 800f8ba:	bd38      	pop	{r3, r4, r5, pc}
 800f8bc:	2000a150 	.word	0x2000a150

0800f8c0 <__malloc_lock>:
 800f8c0:	4770      	bx	lr

0800f8c2 <__malloc_unlock>:
 800f8c2:	4770      	bx	lr

0800f8c4 <_malloc_usable_size_r>:
 800f8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8c8:	1f18      	subs	r0, r3, #4
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfbc      	itt	lt
 800f8ce:	580b      	ldrlt	r3, [r1, r0]
 800f8d0:	18c0      	addlt	r0, r0, r3
 800f8d2:	4770      	bx	lr

0800f8d4 <_init>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	bf00      	nop
 800f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8da:	bc08      	pop	{r3}
 800f8dc:	469e      	mov	lr, r3
 800f8de:	4770      	bx	lr

0800f8e0 <_fini>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	bf00      	nop
 800f8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8e6:	bc08      	pop	{r3}
 800f8e8:	469e      	mov	lr, r3
 800f8ea:	4770      	bx	lr
