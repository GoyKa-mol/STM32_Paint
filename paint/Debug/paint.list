
paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efdc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002158  0800f1ac  0800f1ac  0001f1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011304  08011304  000310a4  2**0
                  CONTENTS
  4 .ARM          00000008  08011304  08011304  00021304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801130c  0801130c  000310a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801130c  0801130c  0002130c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011310  08011310  00021310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a4  20000000  08011314  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d2c  200010a4  080123b8  000310a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009dd0  080123b8  00039dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000310a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ceb0  00000000  00000000  000310d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055a5  00000000  00000000  0005df84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002650  00000000  00000000  00063530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023b8  00000000  00000000  00065b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3f2  00000000  00000000  00067f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f8de  00000000  00000000  0009632a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115371  00000000  00000000  000b5c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001caf79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a554  00000000  00000000  001caff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200010a4 	.word	0x200010a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f194 	.word	0x0800f194

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200010a8 	.word	0x200010a8
 800020c:	0800f194 	.word	0x0800f194

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200010c0 	.word	0x200010c0
 8000614:	20001118 	.word	0x20001118

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f003 fa0e 	bl	8003a44 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f9c9 	bl	8003a08 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f993 	bl	8003a08 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20001318 	.word	0x20001318

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f003 f8e0 	bl	8003a08 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f8d2 	bl	8003a08 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f003 f8b7 	bl	8003a08 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f8a9 	bl	8003a08 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20001318 	.word	0x20001318
 80008f8:	2000131c 	.word	0x2000131c

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f85c 	bl	80039d4 <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f003 f848 	bl	80039d4 <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f839 	bl	8003a08 <TS_IO_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
      break;
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
      break;
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
      break;
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
      break;
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 ffae 	bl	8003a08 <TS_IO_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 ff9e 	bl	8003a08 <TS_IO_Read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 ff90 	bl	8003a08 <TS_IO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20001318 	.word	0x20001318

08000b08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20001318 	.word	0x20001318

08000b20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b2e:	f002 ff47 	bl	80039c0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20001318 	.word	0x20001318

08000b40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0b6      	sub	sp, #216	; 0xd8
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50]={};
 8000b62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00d ff0d 	bl	800e98a <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f005 f98e 	bl	8005eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f999 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f001 f833 	bl	8001bfc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b96:	f000 fa97 	bl	80010c8 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b9a:	f000 fb43 	bl	8001224 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b9e:	f000 fb81 	bl	80012a4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000ba2:	f000 fbbf 	bl	8001324 <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba6:	f000 fc3f 	bl	8001428 <MX_RTC_Init>
  MX_SPI2_Init();
 8000baa:	f000 fce3 	bl	8001574 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bae:	f000 fd1f 	bl	80015f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bb2:	f000 fd71 	bl	8001698 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb6:	f000 fdbd 	bl	8001734 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bba:	f000 fe49 	bl	8001850 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bbe:	f000 fe95 	bl	80018ec <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bc2:	f000 ff6d 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc6:	f000 ff9b 	bl	8001b00 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bca:	f000 fa2b 	bl	8001024 <MX_ADC1_Init>
  MX_DAC_Init();
 8000bce:	f000 facd 	bl	800116c <MX_DAC_Init>
  MX_UART7_Init();
 8000bd2:	f000 ff35 	bl	8001a40 <MX_UART7_Init>
  MX_FMC_Init();
 8000bd6:	f000 ffc3 	bl	8001b60 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000bda:	f000 faf1 	bl	80011c0 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000bde:	f002 ff3d 	bl	8003a5c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000be2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be6:	2000      	movs	r0, #0
 8000be8:	f002 ffd0 	bl	8003b8c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bec:	f002 ffa6 	bl	8003b3c <BSP_LCD_GetXSize>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	f002 ffb7 	bl	8003b64 <BSP_LCD_GetYSize>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	fb03 f304 	mul.w	r3, r3, r4
 8000bfc:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4619      	mov	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f002 ffc1 	bl	8003b8c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c0a:	f003 fceb 	bl	80045e4 <BSP_LCD_DisplayOn>
  BSP_LCD_SetFont(&Font12);
 8000c0e:	489a      	ldr	r0, [pc, #616]	; (8000e78 <main+0x31c>)
 8000c10:	f003 f85e 	bl	8003cd0 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f003 f840 	bl	8003c9c <BSP_LCD_SetBackColor>
  BSP_LCD_SelectLayer(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f003 f815 	bl	8003c4c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f003 f884 	bl	8003d30 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c2c:	f003 f81e 	bl	8003c6c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 245, 480, 5);
 8000c30:	2305      	movs	r3, #5
 8000c32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c36:	21f5      	movs	r1, #245	; 0xf5
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f003 fbb9 	bl	80043b0 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(480-5-taille_menu, 0, 5, 245);
 8000c3e:	23f5      	movs	r3, #245	; 0xf5
 8000c40:	2205      	movs	r2, #5
 8000c42:	2100      	movs	r1, #0
 8000c44:	f240 10a9 	movw	r0, #425	; 0x1a9
 8000c48:	f003 fbb2 	bl	80043b0 <BSP_LCD_FillRect>
  BSP_LCD_SelectLayer(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f002 fffd 	bl	8003c4c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	f003 f86b 	bl	8003d30 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c5a:	4888      	ldr	r0, [pc, #544]	; (8000e7c <main+0x320>)
 8000c5c:	f003 f806 	bl	8003c6c <BSP_LCD_SetTextColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c60:	f002 ff6c 	bl	8003b3c <BSP_LCD_GetXSize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29c      	uxth	r4, r3
 8000c68:	f002 ff7c 	bl	8003b64 <BSP_LCD_GetYSize>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4620      	mov	r0, r4
 8000c74:	f004 f884 	bl	8004d80 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	677b      	str	r3, [r7, #116]	; 0x74
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	67bb      	str	r3, [r7, #120]	; 0x78
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
 8000c80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c84:	4618      	mov	r0, r3
 8000c86:	f00b fc38 	bl	800c4fa <osMutexCreate>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b7c      	ldr	r3, [pc, #496]	; (8000e80 <main+0x324>)
 8000c8e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000c90:	4b7c      	ldr	r3, [pc, #496]	; (8000e84 <main+0x328>)
 8000c92:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ca4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00b fbc5 	bl	800c43a <osThreadCreate>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	4b75      	ldr	r3, [pc, #468]	; (8000e88 <main+0x32c>)
 8000cb4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mode */
  osThreadDef(Mode, StartMode, osPriorityAboveNormal, 0, 4096);
 8000cb6:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <main+0x330>)
 8000cb8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cbc:	461d      	mov	r5, r3
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModeHandle = osThreadCreate(osThread(Mode), NULL);
 8000cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00b fbb2 	bl	800c43a <osThreadCreate>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <main+0x334>)
 8000cda:	601a      	str	r2, [r3, #0]

  /* definition and creation of Peindre */
  osThreadDef(Peindre, StartPeindre, osPriorityNormal, 0, 1024);
 8000cdc:	4b6d      	ldr	r3, [pc, #436]	; (8000e94 <main+0x338>)
 8000cde:	f107 0420 	add.w	r4, r7, #32
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeindreHandle = osThreadCreate(osThread(Peindre), NULL);
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00b fb9f 	bl	800c43a <osThreadCreate>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b66      	ldr	r3, [pc, #408]	; (8000e98 <main+0x33c>)
 8000d00:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskEtat */
  osThreadDef(TaskEtat, StartTaskEtat, osPriorityHigh, 0, 1024);
 8000d02:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <main+0x340>)
 8000d04:	1d3c      	adds	r4, r7, #4
 8000d06:	461d      	mov	r5, r3
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEtatHandle = osThreadCreate(osThread(TaskEtat), NULL);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00b fb8e 	bl	800c43a <osThreadCreate>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	4b5f      	ldr	r3, [pc, #380]	; (8000ea0 <main+0x344>)
 8000d22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d24:	f00b fb82 	bl	800c42c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2c:	485d      	ldr	r0, [pc, #372]	; (8000ea4 <main+0x348>)
 8000d2e:	f006 fd91 	bl	8007854 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3a:	485b      	ldr	r0, [pc, #364]	; (8000ea8 <main+0x34c>)
 8000d3c:	f006 fda2 	bl	8007884 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d44:	4857      	ldr	r0, [pc, #348]	; (8000ea4 <main+0x348>)
 8000d46:	f006 fd85 	bl	8007854 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4856      	ldr	r0, [pc, #344]	; (8000eac <main+0x350>)
 8000d52:	f006 fd97 	bl	8007884 <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	4852      	ldr	r0, [pc, #328]	; (8000ea4 <main+0x348>)
 8000d5c:	f006 fd7a 	bl	8007854 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d68:	4951      	ldr	r1, [pc, #324]	; (8000eb0 <main+0x354>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00d fe16 	bl	800e99c <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d74:	4619      	mov	r1, r3
 8000d76:	2005      	movs	r0, #5
 8000d78:	f003 f90a 	bl	8003f90 <BSP_LCD_DisplayStringAtLine>

	  sConfig.Channel = ADC_CHANNEL_6;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d84:	4619      	mov	r1, r3
 8000d86:	484b      	ldr	r0, [pc, #300]	; (8000eb4 <main+0x358>)
 8000d88:	f005 fa74 	bl	8006274 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d8c:	4849      	ldr	r0, [pc, #292]	; (8000eb4 <main+0x358>)
 8000d8e:	f005 f91f 	bl	8005fd0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d92:	bf00      	nop
 8000d94:	2164      	movs	r1, #100	; 0x64
 8000d96:	4847      	ldr	r0, [pc, #284]	; (8000eb4 <main+0x358>)
 8000d98:	f005 f9da 	bl	8006150 <HAL_ADC_PollForConversion>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f8      	bne.n	8000d94 <main+0x238>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000da2:	4844      	ldr	r0, [pc, #272]	; (8000eb4 <main+0x358>)
 8000da4:	f005 fa58 	bl	8006258 <HAL_ADC_GetValue>
 8000da8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	  sConfig.Channel = ADC_CHANNEL_7;
 8000dac:	2307      	movs	r3, #7
 8000dae:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000db0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000db4:	4619      	mov	r1, r3
 8000db6:	483f      	ldr	r0, [pc, #252]	; (8000eb4 <main+0x358>)
 8000db8:	f005 fa5c 	bl	8006274 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dbc:	483d      	ldr	r0, [pc, #244]	; (8000eb4 <main+0x358>)
 8000dbe:	f005 f907 	bl	8005fd0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc2:	bf00      	nop
 8000dc4:	2164      	movs	r1, #100	; 0x64
 8000dc6:	483b      	ldr	r0, [pc, #236]	; (8000eb4 <main+0x358>)
 8000dc8:	f005 f9c2 	bl	8006150 <HAL_ADC_PollForConversion>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f8      	bne.n	8000dc4 <main+0x268>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000dd2:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <main+0x358>)
 8000dd4:	f005 fa40 	bl	8006258 <HAL_ADC_GetValue>
 8000dd8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	  sConfig.Channel = ADC_CHANNEL_8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000de0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4833      	ldr	r0, [pc, #204]	; (8000eb4 <main+0x358>)
 8000de8:	f005 fa44 	bl	8006274 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dec:	4831      	ldr	r0, [pc, #196]	; (8000eb4 <main+0x358>)
 8000dee:	f005 f8ef 	bl	8005fd0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000df2:	bf00      	nop
 8000df4:	2164      	movs	r1, #100	; 0x64
 8000df6:	482f      	ldr	r0, [pc, #188]	; (8000eb4 <main+0x358>)
 8000df8:	f005 f9aa 	bl	8006150 <HAL_ADC_PollForConversion>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f8      	bne.n	8000df4 <main+0x298>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e02:	482c      	ldr	r0, [pc, #176]	; (8000eb4 <main+0x358>)
 8000e04:	f005 fa28 	bl	8006258 <HAL_ADC_GetValue>
 8000e08:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

	  HAL_ADC_Start(&hadc1);
 8000e0c:	482a      	ldr	r0, [pc, #168]	; (8000eb8 <main+0x35c>)
 8000e0e:	f005 f8df 	bl	8005fd0 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e12:	bf00      	nop
 8000e14:	2164      	movs	r1, #100	; 0x64
 8000e16:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <main+0x35c>)
 8000e18:	f005 f99a 	bl	8006150 <HAL_ADC_PollForConversion>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f8      	bne.n	8000e14 <main+0x2b8>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e22:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <main+0x35c>)
 8000e24:	f005 fa18 	bl	8006258 <HAL_ADC_GetValue>
 8000e28:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e2c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8000e30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e40:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <main+0x360>)
 8000e46:	f00d fda9 	bl	800e99c <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2009      	movs	r0, #9
 8000e52:	f003 f89d 	bl	8003f90 <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000e56:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <main+0x364>)
 8000e58:	f003 ffd2 	bl	8004e00 <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <main+0x364>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f43f af61 	beq.w	8000d28 <main+0x1cc>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <main+0x364>)
 8000e68:	8858      	ldrh	r0, [r3, #2]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <main+0x364>)
 8000e6c:	899b      	ldrh	r3, [r3, #12]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	f003 fb17 	bl	80044a4 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e76:	e757      	b.n	8000d28 <main+0x1cc>
 8000e78:	20001024 	.word	0x20001024
 8000e7c:	ffff0000 	.word	0xffff0000
 8000e80:	200098b0 	.word	0x200098b0
 8000e84:	0800f1f4 	.word	0x0800f1f4
 8000e88:	200096ec 	.word	0x200096ec
 8000e8c:	0800f218 	.word	0x0800f218
 8000e90:	20009c9c 	.word	0x20009c9c
 8000e94:	0800f23c 	.word	0x0800f23c
 8000e98:	20009820 	.word	0x20009820
 8000e9c:	0800f264 	.word	0x0800f264
 8000ea0:	20009be4 	.word	0x20009be4
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	0800f1ac 	.word	0x0800f1ac
 8000eb4:	20009a24 	.word	0x20009a24
 8000eb8:	200099dc 	.word	0x200099dc
 8000ebc:	0800f1b8 	.word	0x0800f1b8
 8000ec0:	20001320 	.word	0x20001320

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0b4      	sub	sp, #208	; 0xd0
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ece:	2230      	movs	r2, #48	; 0x30
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00d fd59 	bl	800e98a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	2284      	movs	r2, #132	; 0x84
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00d fd4a 	bl	800e98a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ef6:	f007 fe1f 	bl	8008b38 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <SystemClock_Config+0x154>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a46      	ldr	r2, [pc, #280]	; (8001018 <SystemClock_Config+0x154>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b44      	ldr	r3, [pc, #272]	; (8001018 <SystemClock_Config+0x154>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <SystemClock_Config+0x158>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a41      	ldr	r2, [pc, #260]	; (800101c <SystemClock_Config+0x158>)
 8000f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <SystemClock_Config+0x158>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f4c:	2319      	movs	r3, #25
 8000f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f52:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f60:	2309      	movs	r3, #9
 8000f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 fe44 	bl	8008bf8 <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f76:	f002 fbc9 	bl	800370c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f7a:	f007 fded 	bl	8008b58 <HAL_PWREx_EnableOverDrive>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f84:	f002 fbc2 	bl	800370c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000faa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fae:	2106      	movs	r1, #6
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f008 f8c5 	bl	8009140 <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000fbc:	f002 fba6 	bl	800370c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <SystemClock_Config+0x15c>)
 8000fc2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fc8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000fea:	2300      	movs	r3, #0
 8000fec:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 faa2 	bl	8009548 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800100a:	f002 fb7f 	bl	800370c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	37d0      	adds	r7, #208	; 0xd0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000
 8001020:	00015868 	.word	0x00015868

08001024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_ADC1_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <MX_ADC1_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_ADC1_Init+0x98>)
 800103e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001042:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_ADC1_Init+0x98>)
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_ADC1_Init+0xa0>)
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_ADC1_Init+0x98>)
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_ADC1_Init+0x98>)
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_ADC1_Init+0x98>)
 8001086:	f004 ff5f 	bl	8005f48 <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001090:	f002 fb3c 	bl	800370c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2301      	movs	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_ADC1_Init+0x98>)
 80010a6:	f005 f8e5 	bl	8006274 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b0:	f002 fb2c 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200099dc 	.word	0x200099dc
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_ADC3_Init+0x98>)
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <MX_ADC3_Init+0x9c>)
 80010de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_ADC3_Init+0x98>)
 80010e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_ADC3_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_ADC3_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_ADC3_Init+0x98>)
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <MX_ADC3_Init+0xa0>)
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_ADC3_Init+0x98>)
 8001116:	2201      	movs	r2, #1
 8001118:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_ADC3_Init+0x98>)
 8001124:	2201      	movs	r2, #1
 8001126:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_ADC3_Init+0x98>)
 800112a:	f004 ff0d 	bl	8005f48 <HAL_ADC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001134:	f002 faea 	bl	800370c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001138:	2306      	movs	r3, #6
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113c:	2301      	movs	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_ADC3_Init+0x98>)
 800114a:	f005 f893 	bl	8006274 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001154:	f002 fada 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20009a24 	.word	0x20009a24
 8001164:	40012200 	.word	0x40012200
 8001168:	0f000001 	.word	0x0f000001

0800116c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_DAC_Init+0x4c>)
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <MX_DAC_Init+0x50>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_DAC_Init+0x4c>)
 8001182:	f005 fb9d 	bl	80068c0 <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800118c:	f002 fabe 	bl	800370c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_DAC_Init+0x4c>)
 80011a0:	f005 fc04 	bl	80069ac <HAL_DAC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011aa:	f002 faaf 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20009aec 	.word	0x20009aec
 80011bc:	40007400 	.word	0x40007400

080011c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <MX_DMA2D_Init+0x60>)
 80011c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <MX_DMA2D_Init+0x5c>)
 80011f6:	f005 fded 	bl	8006dd4 <HAL_DMA2D_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001200:	f002 fa84 	bl	800370c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001204:	2101      	movs	r1, #1
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_DMA2D_Init+0x5c>)
 8001208:	f005 ff42 	bl	8007090 <HAL_DMA2D_ConfigLayer>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001212:	f002 fa7b 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20009be8 	.word	0x20009be8
 8001220:	4002b000 	.word	0x4002b000

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f006 fb42 	bl	80078e8 <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f002 fa4f 	bl	800370c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f007 f851 	bl	8008318 <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f002 fa46 	bl	800370c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f007 f893 	bl	80083ae <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f002 fa3d 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20009864 	.word	0x20009864
 800129c:	40005400 	.word	0x40005400
 80012a0:	00c0eaff 	.word	0x00c0eaff

080012a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C3_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C3_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C3_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <MX_I2C3_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C3_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_I2C3_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C3_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_I2C3_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C3_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C3_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <MX_I2C3_Init+0x74>)
 80012e0:	f006 fb02 	bl	80078e8 <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f002 fa0f 	bl	800370c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C3_Init+0x74>)
 80012f2:	f007 f811 	bl	8008318 <HAL_I2CEx_ConfigAnalogFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f002 fa06 	bl	800370c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_I2C3_Init+0x74>)
 8001304:	f007 f853 	bl	80083ae <HAL_I2CEx_ConfigDigitalFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800130e:	f002 f9fd 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200096f0 	.word	0x200096f0
 800131c:	40005c00 	.word	0x40005c00
 8001320:	00c0eaff 	.word	0x00c0eaff

08001324 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2234      	movs	r2, #52	; 0x34
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f00d fb2a 	bl	800e98a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001338:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <MX_LTDC_Init+0x100>)
 800133a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <MX_LTDC_Init+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <MX_LTDC_Init+0xfc>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001356:	2228      	movs	r2, #40	; 0x28
 8001358:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <MX_LTDC_Init+0xfc>)
 800135c:	2209      	movs	r2, #9
 800135e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001362:	2235      	movs	r2, #53	; 0x35
 8001364:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001368:	220b      	movs	r2, #11
 800136a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_LTDC_Init+0xfc>)
 800136e:	f240 2215 	movw	r2, #533	; 0x215
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001376:	f240 121b 	movw	r2, #283	; 0x11b
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_LTDC_Init+0xfc>)
 800137e:	f240 2235 	movw	r2, #565	; 0x235
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001386:	f240 121d 	movw	r2, #285	; 0x11d
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_LTDC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_LTDC_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_LTDC_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <MX_LTDC_Init+0xfc>)
 80013a6:	f007 f84f 	bl	8008448 <HAL_LTDC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013b0:	f002 f9ac 	bl	800370c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013bc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013c6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013c8:	2302      	movs	r3, #2
 80013ca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013cc:	23ff      	movs	r3, #255	; 0xff
 80013ce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013de:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_LTDC_Init+0xfc>)
 800140a:	f007 f9af 	bl	800876c <HAL_LTDC_ConfigLayer>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001414:	f002 f97a 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3738      	adds	r7, #56	; 0x38
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20009934 	.word	0x20009934
 8001424:	40016800 	.word	0x40016800

08001428 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b092      	sub	sp, #72	; 0x48
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800142e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	222c      	movs	r2, #44	; 0x2c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f00d fa9d 	bl	800e98a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <MX_RTC_Init+0x144>)
 8001452:	4a47      	ldr	r2, [pc, #284]	; (8001570 <MX_RTC_Init+0x148>)
 8001454:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <MX_RTC_Init+0x144>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_RTC_Init+0x144>)
 800145e:	227f      	movs	r2, #127	; 0x7f
 8001460:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <MX_RTC_Init+0x144>)
 8001464:	22ff      	movs	r2, #255	; 0xff
 8001466:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <MX_RTC_Init+0x144>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <MX_RTC_Init+0x144>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <MX_RTC_Init+0x144>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800147a:	483c      	ldr	r0, [pc, #240]	; (800156c <MX_RTC_Init+0x144>)
 800147c:	f008 fc52 	bl	8009d24 <HAL_RTC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001486:	f002 f941 	bl	800370c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2201      	movs	r2, #1
 80014aa:	4619      	mov	r1, r3
 80014ac:	482f      	ldr	r0, [pc, #188]	; (800156c <MX_RTC_Init+0x144>)
 80014ae:	f008 fcb5 	bl	8009e1c <HAL_RTC_SetTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014b8:	f002 f928 	bl	800370c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <MX_RTC_Init+0x144>)
 80014de:	f008 fd5b 	bl	8009f98 <HAL_RTC_SetDate>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80014e8:	f002 f910 	bl	800370c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_RTC_Init+0x144>)
 8001524:	f008 fde0 	bl	800a0e8 <HAL_RTC_SetAlarm>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800152e:	f002 f8ed 	bl	800370c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2201      	movs	r2, #1
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <MX_RTC_Init+0x144>)
 8001540:	f008 fdd2 	bl	800a0e8 <HAL_RTC_SetAlarm>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800154a:	f002 f8df 	bl	800370c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800154e:	2202      	movs	r2, #2
 8001550:	2100      	movs	r1, #0
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_RTC_Init+0x144>)
 8001554:	f008 ff52 	bl	800a3fc <HAL_RTCEx_SetTimeStamp>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800155e:	f002 f8d5 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3748      	adds	r7, #72	; 0x48
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20009b04 	.word	0x20009b04
 8001570:	40002800 	.word	0x40002800

08001574 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_SPI2_Init+0x74>)
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <MX_SPI2_Init+0x78>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_SPI2_Init+0x74>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_SPI2_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI2_Init+0x74>)
 800158e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001592:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_SPI2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015ce:	2208      	movs	r2, #8
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_SPI2_Init+0x74>)
 80015d4:	f008 ffe7 	bl	800a5a6 <HAL_SPI_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015de:	f002 f895 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000973c 	.word	0x2000973c
 80015ec:	40003800 	.word	0x40003800

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <MX_TIM1_Init+0xa4>)
 8001612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM1_Init+0xa0>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM1_Init+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163a:	4815      	ldr	r0, [pc, #84]	; (8001690 <MX_TIM1_Init+0xa0>)
 800163c:	f009 f845 	bl	800a6ca <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001646:	f002 f861 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001658:	f009 faf8 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001662:	f002 f853 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM1_Init+0xa0>)
 8001678:	f00a f82c 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001682:	f002 f843 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20009b24 	.word	0x20009b24
 8001694:	40010000 	.word	0x40010000

08001698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM2_Init+0x98>)
 80016b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM2_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM2_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM2_Init+0x98>)
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_TIM2_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM2_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_TIM2_Init+0x98>)
 80016e0:	f008 fff3 	bl	800a6ca <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ea:	f002 f80f 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM2_Init+0x98>)
 80016fc:	f009 faa6 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001706:	f002 f801 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM2_Init+0x98>)
 8001718:	f009 ffdc 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001722:	f001 fff3 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20009c28 	.word	0x20009c28

08001734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <MX_TIM3_Init+0x114>)
 8001778:	4a34      	ldr	r2, [pc, #208]	; (800184c <MX_TIM3_Init+0x118>)
 800177a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <MX_TIM3_Init+0x114>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <MX_TIM3_Init+0x114>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <MX_TIM3_Init+0x114>)
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <MX_TIM3_Init+0x114>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <MX_TIM3_Init+0x114>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800179c:	482a      	ldr	r0, [pc, #168]	; (8001848 <MX_TIM3_Init+0x114>)
 800179e:	f008 ff94 	bl	800a6ca <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017a8:	f001 ffb0 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	4619      	mov	r1, r3
 80017b8:	4823      	ldr	r0, [pc, #140]	; (8001848 <MX_TIM3_Init+0x114>)
 80017ba:	f009 fa47 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017c4:	f001 ffa2 	bl	800370c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c8:	481f      	ldr	r0, [pc, #124]	; (8001848 <MX_TIM3_Init+0x114>)
 80017ca:	f008 ffd3 	bl	800a774 <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80017d4:	f001 ff9a 	bl	800370c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80017e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4818      	ldr	r0, [pc, #96]	; (8001848 <MX_TIM3_Init+0x114>)
 80017e8:	f009 faea 	bl	800adc0 <HAL_TIM_SlaveConfigSynchro>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80017f2:	f001 ff8b 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <MX_TIM3_Init+0x114>)
 8001806:	f009 ff65 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001810:	f001 ff7c 	bl	800370c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_TIM3_Init+0x114>)
 800182c:	f009 f8f6 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001836:	f001 ff69 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM3_Init+0x114>)
 800183c:	f004 f874 	bl	8005928 <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3750      	adds	r7, #80	; 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200098f4 	.word	0x200098f4
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <MX_TIM5_Init+0x98>)
 8001872:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_TIM5_Init+0x94>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_TIM5_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <MX_TIM5_Init+0x94>)
 8001896:	f008 ff18 	bl	800a6ca <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018a0:	f001 ff34 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM5_Init+0x94>)
 80018b2:	f009 f9cb 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80018bc:	f001 ff26 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_TIM5_Init+0x94>)
 80018ce:	f009 ff01 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f001 ff18 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200098b4 	.word	0x200098b4
 80018e8:	40000c00 	.word	0x40000c00

080018ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09a      	sub	sp, #104	; 0x68
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	222c      	movs	r2, #44	; 0x2c
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00d f82f 	bl	800e98a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800192e:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <MX_TIM8_Init+0x150>)
 8001930:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001958:	4837      	ldr	r0, [pc, #220]	; (8001a38 <MX_TIM8_Init+0x14c>)
 800195a:	f008 feb6 	bl	800a6ca <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001964:	f001 fed2 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800196e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001972:	4619      	mov	r1, r3
 8001974:	4830      	ldr	r0, [pc, #192]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001976:	f009 f969 	bl	800ac4c <HAL_TIM_ConfigClockSource>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001980:	f001 fec4 	bl	800370c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001984:	482c      	ldr	r0, [pc, #176]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001986:	f008 fef5 	bl	800a774 <HAL_TIM_PWM_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001990:	f001 febc 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019a4:	4619      	mov	r1, r3
 80019a6:	4824      	ldr	r0, [pc, #144]	; (8001a38 <MX_TIM8_Init+0x14c>)
 80019a8:	f009 fe94 	bl	800b6d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019b2:	f001 feab 	bl	800370c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b6:	2360      	movs	r3, #96	; 0x60
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	220c      	movs	r2, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM8_Init+0x14c>)
 80019d8:	f009 f820 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80019e2:	f001 fe93 	bl	800370c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001a1c:	f009 fee8 	bl	800b7f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a26:	f001 fe71 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM8_Init+0x14c>)
 8001a2c:	f003 ff7c 	bl	8005928 <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20009824 	.word	0x20009824
 8001a3c:	40010400 	.word	0x40010400

08001a40 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <MX_UART7_Init+0x5c>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_UART7_Init+0x58>)
 8001a84:	f009 ff50 	bl	800b928 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001a8e:	f001 fe3d 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200097a0 	.word	0x200097a0
 8001a9c:	40007800 	.word	0x40007800

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <MX_USART1_UART_Init+0x5c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART1_UART_Init+0x58>)
 8001ae4:	f009 ff20 	bl	800b928 <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aee:	f001 fe0d 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20009a6c 	.word	0x20009a6c
 8001afc:	40011000 	.word	0x40011000

08001b00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <MX_USART6_UART_Init+0x5c>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_USART6_UART_Init+0x58>)
 8001b44:	f009 fef0 	bl	800b928 <HAL_UART_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f001 fddd 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20009b64 	.word	0x20009b64
 8001b5c:	40011400 	.word	0x40011400

08001b60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	615a      	str	r2, [r3, #20]
 8001b76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <MX_FMC_Init+0x98>)
 8001b7c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b92:	2210      	movs	r2, #16
 8001b94:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_FMC_Init+0x94>)
 8001bdc:	f008 fc64 	bl	800a4a8 <HAL_SDRAM_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001be6:	f001 fd91 	bl	800370c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20009c68 	.word	0x20009c68
 8001bf8:	a0000140 	.word	0xa0000140

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b090      	sub	sp, #64	; 0x40
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c12:	4bb0      	ldr	r3, [pc, #704]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4aaf      	ldr	r2, [pc, #700]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4bad      	ldr	r3, [pc, #692]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4baa      	ldr	r3, [pc, #680]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4aa9      	ldr	r2, [pc, #676]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4ba7      	ldr	r3, [pc, #668]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4ba4      	ldr	r3, [pc, #656]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4aa3      	ldr	r2, [pc, #652]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4ba1      	ldr	r3, [pc, #644]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c5a:	4b9e      	ldr	r3, [pc, #632]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a9d      	ldr	r2, [pc, #628]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b9b      	ldr	r3, [pc, #620]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c72:	4b98      	ldr	r3, [pc, #608]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a97      	ldr	r2, [pc, #604]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a91      	ldr	r2, [pc, #580]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ca2:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a8b      	ldr	r2, [pc, #556]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cba:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a85      	ldr	r2, [pc, #532]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a7f      	ldr	r2, [pc, #508]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cea:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a79      	ldr	r2, [pc, #484]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	4b74      	ldr	r3, [pc, #464]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a73      	ldr	r2, [pc, #460]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <MX_GPIO_Init+0x2d8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2160      	movs	r1, #96	; 0x60
 8001d1e:	486e      	ldr	r0, [pc, #440]	; (8001ed8 <MX_GPIO_Init+0x2dc>)
 8001d20:	f005 fdb0 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2120      	movs	r1, #32
 8001d28:	486c      	ldr	r0, [pc, #432]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001d2a:	f005 fdab 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2108      	movs	r1, #8
 8001d32:	486a      	ldr	r0, [pc, #424]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001d34:	f005 fda6 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4868      	ldr	r0, [pc, #416]	; (8001ee0 <MX_GPIO_Init+0x2e4>)
 8001d3e:	f005 fda1 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2108      	movs	r1, #8
 8001d46:	4867      	ldr	r0, [pc, #412]	; (8001ee4 <MX_GPIO_Init+0x2e8>)
 8001d48:	f005 fd9c 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d52:	4863      	ldr	r0, [pc, #396]	; (8001ee0 <MX_GPIO_Init+0x2e4>)
 8001d54:	f005 fd96 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001d5e:	4862      	ldr	r0, [pc, #392]	; (8001ee8 <MX_GPIO_Init+0x2ec>)
 8001d60:	f005 fd90 	bl	8007884 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2108      	movs	r1, #8
 8001d68:	4860      	ldr	r0, [pc, #384]	; (8001eec <MX_GPIO_Init+0x2f0>)
 8001d6a:	f005 fd8b 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d72:	2300      	movs	r3, #0
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4855      	ldr	r0, [pc, #340]	; (8001ed8 <MX_GPIO_Init+0x2dc>)
 8001d82:	f005 fab3 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001d86:	f643 0323 	movw	r3, #14371	; 0x3823
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4853      	ldr	r0, [pc, #332]	; (8001ef0 <MX_GPIO_Init+0x2f4>)
 8001da4:	f005 faa2 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001da8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	484d      	ldr	r0, [pc, #308]	; (8001ef4 <MX_GPIO_Init+0x2f8>)
 8001dbe:	f005 fa95 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001dc2:	2360      	movs	r3, #96	; 0x60
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	483f      	ldr	r0, [pc, #252]	; (8001ed8 <MX_GPIO_Init+0x2dc>)
 8001dda:	f005 fa87 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4841      	ldr	r0, [pc, #260]	; (8001ef8 <MX_GPIO_Init+0x2fc>)
 8001df4:	f005 fa7a 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001df8:	2340      	movs	r3, #64	; 0x40
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <MX_GPIO_Init+0x300>)
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4834      	ldr	r0, [pc, #208]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001e0c:	f005 fa6e 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e10:	2328      	movs	r3, #40	; 0x28
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	482d      	ldr	r0, [pc, #180]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001e28:	f005 fa60 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001e2c:	f241 0308 	movw	r3, #4104	; 0x1008
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	4619      	mov	r1, r3
 8001e44:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <MX_GPIO_Init+0x2e4>)
 8001e46:	f005 fa51 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4828      	ldr	r0, [pc, #160]	; (8001f00 <MX_GPIO_Init+0x304>)
 8001e60:	f005 fa44 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e64:	2308      	movs	r3, #8
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <MX_GPIO_Init+0x2e8>)
 8001e7c:	f005 fa36 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e80:	2310      	movs	r3, #16
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e90:	4619      	mov	r1, r3
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <MX_GPIO_Init+0x2e0>)
 8001e94:	f005 fa2a 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e98:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <MX_GPIO_Init+0x2ec>)
 8001eae:	f005 fa1d 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001eb2:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_GPIO_Init+0x2ec>)
 8001ecc:	f005 fa0e 	bl	80072ec <HAL_GPIO_Init>
 8001ed0:	e018      	b.n	8001f04 <MX_GPIO_Init+0x308>
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40022800 	.word	0x40022800
 8001ee8:	40021c00 	.word	0x40021c00
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40022400 	.word	0x40022400
 8001efc:	10120000 	.word	0x10120000
 8001f00:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <MX_GPIO_Init+0x3e8>)
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4833      	ldr	r0, [pc, #204]	; (8001fe8 <MX_GPIO_Init+0x3ec>)
 8001f1a:	f005 f9e7 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f1e:	2310      	movs	r3, #16
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f2e:	230a      	movs	r3, #10
 8001f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f36:	4619      	mov	r1, r3
 8001f38:	482c      	ldr	r0, [pc, #176]	; (8001fec <MX_GPIO_Init+0x3f0>)
 8001f3a:	f005 f9d7 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <MX_GPIO_Init+0x3f4>)
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4828      	ldr	r0, [pc, #160]	; (8001ff4 <MX_GPIO_Init+0x3f8>)
 8001f52:	f005 f9cb 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f56:	2305      	movs	r3, #5
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f66:	230a      	movs	r3, #10
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <MX_GPIO_Init+0x3fc>)
 8001f72:	f005 f9bb 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f76:	2308      	movs	r3, #8
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <MX_GPIO_Init+0x3f8>)
 8001f8e:	f005 f9ad 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f92:	2304      	movs	r3, #4
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <MX_GPIO_Init+0x3f8>)
 8001fa6:	f005 f9a1 	bl	80072ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001faa:	2328      	movs	r3, #40	; 0x28
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fba:	230a      	movs	r3, #10
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <MX_GPIO_Init+0x400>)
 8001fc6:	f005 f991 	bl	80072ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	2017      	movs	r0, #23
 8001fd0:	f004 fc4c 	bl	800686c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fd4:	2017      	movs	r0, #23
 8001fd6:	f004 fc65 	bl	80068a4 <HAL_NVIC_EnableIRQ>

}
 8001fda:	bf00      	nop
 8001fdc:	3740      	adds	r7, #64	; 0x40
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	10110000 	.word	0x10110000
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020000 	.word	0x40020000

08002000 <HAL_GPIO_EXTI_Callback>:

/*
 * Interuption sur le click joystick
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 800200a:	2201      	movs	r2, #1
 800200c:	2120      	movs	r1, #32
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <HAL_GPIO_EXTI_Callback+0x24>)
 8002010:	f005 fc38 	bl	8007884 <HAL_GPIO_WritePin>
	etat = etat_int;
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <HAL_GPIO_EXTI_Callback+0x28>)
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_GPIO_EXTI_Callback+0x2c>)
 800201a:	701a      	strb	r2, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	2000101b 	.word	0x2000101b
 800202c:	2000101a 	.word	0x2000101a

08002030 <TestConditionBord>:
/*
test les condition de bord en un point pour ne pas ecrire
hors de l'écran.
*/
char TestConditionBord(uint16_t x, uint16_t y, uint16_t rad)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
 800203a:	460b      	mov	r3, r1
 800203c:	80bb      	strh	r3, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	807b      	strh	r3, [r7, #2]
	char bool = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
	if(((x-rad)>=0) && ((x+rad)<=480-5-taille_menu) && ((y-rad)>=0) && ((y+rad)<246))
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	db11      	blt.n	8002074 <TestConditionBord+0x44>
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	4413      	add	r3, r2
 8002056:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 800205a:	da0b      	bge.n	8002074 <TestConditionBord+0x44>
 800205c:	88ba      	ldrh	r2, [r7, #4]
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	db06      	blt.n	8002074 <TestConditionBord+0x44>
 8002066:	88ba      	ldrh	r2, [r7, #4]
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	4413      	add	r3, r2
 800206c:	2bf5      	cmp	r3, #245	; 0xf5
 800206e:	dc01      	bgt.n	8002074 <TestConditionBord+0x44>
	{
		bool = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
	}
	return bool;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <LCD_PAINTBRUSH>:
/*
 * dessine la forme du pinceau actuel pour la zone de dessin
 */
void LCD_PAINTBRUSH(uint16_t x, uint16_t y,uint16_t rad)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
 800208e:	460b      	mov	r3, r1
 8002090:	80bb      	strh	r3, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	807b      	strh	r3, [r7, #2]
	switch(brush)
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <LCD_PAINTBRUSH+0x48>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <LCD_PAINTBRUSH+0x20>
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d008      	beq.n	80020b4 <LCD_PAINTBRUSH+0x30>
		BSP_LCD_FillCircle(x, y, rad);
		break;
	case 1 :
		BSP_LCD_FillRect(0, 0, 425, 246);
	}
}
 80020a2:	e00e      	b.n	80020c2 <LCD_PAINTBRUSH+0x3e>
		BSP_LCD_FillCircle(x, y, rad);
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	88b9      	ldrh	r1, [r7, #4]
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 f9fa 	bl	80044a4 <BSP_LCD_FillCircle>
		break;
 80020b0:	bf00      	nop
}
 80020b2:	e006      	b.n	80020c2 <LCD_PAINTBRUSH+0x3e>
		BSP_LCD_FillRect(0, 0, 425, 246);
 80020b4:	23f6      	movs	r3, #246	; 0xf6
 80020b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80020ba:	2100      	movs	r1, #0
 80020bc:	2000      	movs	r0, #0
 80020be:	f002 f977 	bl	80043b0 <BSP_LCD_FillRect>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20001019 	.word	0x20001019

080020d0 <LCD_PAINTBRUSH_SAMPLE>:
/*
 * Dessine la forme du pinceau actuel pour la zone menu (fonction séparé car
 * pour la fonction de remplissage du fond on veut juste afficher un logo).
 */
void LCD_PAINTBRUSH_SAMPLE(uint16_t x, uint16_t y,uint16_t rad)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
 80020da:	460b      	mov	r3, r1
 80020dc:	80bb      	strh	r3, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	807b      	strh	r3, [r7, #2]
	uint32_t color;
	switch(brush)
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <LCD_PAINTBRUSH_SAMPLE+0xcc>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <LCD_PAINTBRUSH_SAMPLE+0x20>
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d008      	beq.n	8002100 <LCD_PAINTBRUSH_SAMPLE+0x30>
				color = brush_remplir[i][j] | (brush_remplir[i][j]<<8) | (brush_remplir[i][j]<<16) | 0xFF000000;
				BSP_LCD_DrawPixel(x-15+j, y-15+i, color);
			}
		}
	}
}
 80020ee:	e050      	b.n	8002192 <LCD_PAINTBRUSH_SAMPLE+0xc2>
		BSP_LCD_FillCircle(x, y, rad);
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	88b9      	ldrh	r1, [r7, #4]
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 f9d4 	bl	80044a4 <BSP_LCD_FillCircle>
		break;
 80020fc:	bf00      	nop
}
 80020fe:	e048      	b.n	8002192 <LCD_PAINTBRUSH_SAMPLE+0xc2>
		for(int i=0; i<34;i++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e042      	b.n	800218c <LCD_PAINTBRUSH_SAMPLE+0xbc>
			for(int j=0; j<30;j++)
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e039      	b.n	8002180 <LCD_PAINTBRUSH_SAMPLE+0xb0>
				color = brush_remplir[i][j] | (brush_remplir[i][j]<<8) | (brush_remplir[i][j]<<16) | 0xFF000000;
 800210c:	4924      	ldr	r1, [pc, #144]	; (80021a0 <LCD_PAINTBRUSH_SAMPLE+0xd0>)
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4613      	mov	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002120:	481f      	ldr	r0, [pc, #124]	; (80021a0 <LCD_PAINTBRUSH_SAMPLE+0xd0>)
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	4319      	orrs	r1, r3
 8002138:	4819      	ldr	r0, [pc, #100]	; (80021a0 <LCD_PAINTBRUSH_SAMPLE+0xd0>)
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800214c:	041b      	lsls	r3, r3, #16
 800214e:	430b      	orrs	r3, r1
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002154:	60fb      	str	r3, [r7, #12]
				BSP_LCD_DrawPixel(x-15+j, y-15+i, color);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	b29a      	uxth	r2, r3
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	4413      	add	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b0f      	subs	r3, #15
 8002162:	b298      	uxth	r0, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	b29a      	uxth	r2, r3
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b0f      	subs	r3, #15
 8002170:	b29b      	uxth	r3, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4619      	mov	r1, r3
 8002176:	f002 f8d3 	bl	8004320 <BSP_LCD_DrawPixel>
			for(int j=0; j<30;j++)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	3301      	adds	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b1d      	cmp	r3, #29
 8002184:	ddc2      	ble.n	800210c <LCD_PAINTBRUSH_SAMPLE+0x3c>
		for(int i=0; i<34;i++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b21      	cmp	r3, #33	; 0x21
 8002190:	ddb9      	ble.n	8002106 <LCD_PAINTBRUSH_SAMPLE+0x36>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20001019 	.word	0x20001019
 80021a0:	20000028 	.word	0x20000028

080021a4 <AfficheTonalite>:
 * pour afficher toutes les tonalité il faudrait 256*6 = 1536 pixels, on prend donc que
 * 64 niveaux de tonalité pour chaque mélange (R+V, V+R, V+B, B+V, B+R, R+B). Soit un total
 * de 64*6 = 384 pixels nécessaire
 */
void AfficheTonalite()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	; 0x38
 80021a8:	af00      	add	r7, sp, #0
	uint32_t RVB = 0x0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
	BSP_LCD_SelectLayer(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f001 fd4c 	bl	8003c4c <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f001 fd58 	bl	8003c6c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 80021bc:	2315      	movs	r3, #21
 80021be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80021c2:	21fb      	movs	r1, #251	; 0xfb
 80021c4:	2000      	movs	r0, #0
 80021c6:	f002 f8f3 	bl	80043b0 <BSP_LCD_FillRect>
	//affichage R+V :
	for(uint32_t i = 0;i<256; i = i+4)
 80021ca:	2300      	movs	r3, #0
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
 80021ce:	e022      	b.n	8002216 <AfficheTonalite+0x72>
   {
		RVB = 0xFFFF0000 | (i<<8); //Red à 255, Vert augmente
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	021a      	lsls	r2, r3, #8
 80021d4:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <AfficheTonalite+0x20c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021e0:	e012      	b.n	8002208 <AfficheTonalite+0x64>
		{
			BSP_LCD_DrawPixel(50+i/4, 252+j, RVB);
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3332      	adds	r3, #50	; 0x32
 80021ea:	b298      	uxth	r0, r3
 80021ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	33fc      	adds	r3, #252	; 0xfc
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f002 f891 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80021fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002202:	3301      	adds	r3, #1
 8002204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800220c:	2b11      	cmp	r3, #17
 800220e:	d9e8      	bls.n	80021e2 <AfficheTonalite+0x3e>
	for(uint32_t i = 0;i<256; i = i+4)
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	3304      	adds	r3, #4
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	2bff      	cmp	r3, #255	; 0xff
 800221a:	d9d9      	bls.n	80021d0 <AfficheTonalite+0x2c>
		}
   }
	//affichage V+R :
	for(uint32_t i = 252;i<253; i = i-4)
 800221c:	23fc      	movs	r3, #252	; 0xfc
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002220:	e023      	b.n	800226a <AfficheTonalite+0xc6>
		// i est un uint donc quand i passe en dessus de 0 il est interprèter comme un grand nombre d'où le i<253
   {
		RVB = 0xFF00FF00 | (i<<16); //Vert à 255, Red diminue
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 800222a:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 800222c:	2300      	movs	r3, #0
 800222e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002232:	e013      	b.n	800225c <AfficheTonalite+0xb8>
		{
			BSP_LCD_DrawPixel(114+(63-i/4), 252+j, RVB);
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	b29b      	uxth	r3, r3
 800223a:	f1c3 03b1 	rsb	r3, r3, #177	; 0xb1
 800223e:	b298      	uxth	r0, r3
 8002240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002244:	b29b      	uxth	r3, r3
 8002246:	33fc      	adds	r3, #252	; 0xfc
 8002248:	b29b      	uxth	r3, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4619      	mov	r1, r3
 800224e:	f002 f867 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002252:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002256:	3301      	adds	r3, #1
 8002258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800225c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002260:	2b11      	cmp	r3, #17
 8002262:	d9e7      	bls.n	8002234 <AfficheTonalite+0x90>
	for(uint32_t i = 252;i<253; i = i-4)
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	3b04      	subs	r3, #4
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	2bfc      	cmp	r3, #252	; 0xfc
 800226e:	d9d8      	bls.n	8002222 <AfficheTonalite+0x7e>
		}
   }
	//affichage V+B :
	for(uint32_t i = 0;i<256; i = i+4)
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e021      	b.n	80022ba <AfficheTonalite+0x116>
   {
		RVB = 0xFF00FF00 | i; // Vert à 255, Bleu augmente
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 800227c:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002284:	e012      	b.n	80022ac <AfficheTonalite+0x108>
		{
			BSP_LCD_DrawPixel(178+i/4, 252+j, RVB);
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	b29b      	uxth	r3, r3
 800228c:	33b2      	adds	r3, #178	; 0xb2
 800228e:	b298      	uxth	r0, r3
 8002290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002294:	b29b      	uxth	r3, r3
 8002296:	33fc      	adds	r3, #252	; 0xfc
 8002298:	b29b      	uxth	r3, r3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	f002 f83f 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80022a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022a6:	3301      	adds	r3, #1
 80022a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d9e8      	bls.n	8002286 <AfficheTonalite+0xe2>
	for(uint32_t i = 0;i<256; i = i+4)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3304      	adds	r3, #4
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	2bff      	cmp	r3, #255	; 0xff
 80022be:	d9da      	bls.n	8002276 <AfficheTonalite+0xd2>
		}
   }
	//affichage B+V :
	for(uint32_t i = 252;i<253; i = i-4)
 80022c0:	23fc      	movs	r3, #252	; 0xfc
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	e01f      	b.n	8002306 <AfficheTonalite+0x162>
   {
		RVB = 0xFF0000FF | (i<<8); // Bleu à 255, Vert diminue
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	021a      	lsls	r2, r3, #8
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <AfficheTonalite+0x210>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	76fb      	strb	r3, [r7, #27]
 80022d4:	e011      	b.n	80022fa <AfficheTonalite+0x156>
		{
			BSP_LCD_DrawPixel(242+(63-i/4), 252+j, RVB);
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	b29a      	uxth	r2, r3
 80022dc:	f240 1331 	movw	r3, #305	; 0x131
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	b298      	uxth	r0, r3
 80022e4:	7efb      	ldrb	r3, [r7, #27]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	33fc      	adds	r3, #252	; 0xfc
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f002 f816 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80022f4:	7efb      	ldrb	r3, [r7, #27]
 80022f6:	3301      	adds	r3, #1
 80022f8:	76fb      	strb	r3, [r7, #27]
 80022fa:	7efb      	ldrb	r3, [r7, #27]
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d9ea      	bls.n	80022d6 <AfficheTonalite+0x132>
	for(uint32_t i = 252;i<253; i = i-4)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3b04      	subs	r3, #4
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2bfc      	cmp	r3, #252	; 0xfc
 800230a:	d9dc      	bls.n	80022c6 <AfficheTonalite+0x122>
		}
   }
	//affichage B+R :
	for(uint32_t i = 0;i<256; i = i+4)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e01e      	b.n	8002350 <AfficheTonalite+0x1ac>
   {
		RVB = 0xFF0000FF | (i<<16);// Bleu à 255, Red augmente
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <AfficheTonalite+0x210>)
 8002318:	4313      	orrs	r3, r2
 800231a:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 800231c:	2300      	movs	r3, #0
 800231e:	74fb      	strb	r3, [r7, #19]
 8002320:	e010      	b.n	8002344 <AfficheTonalite+0x1a0>
		{
			BSP_LCD_DrawPixel(306+i/4, 252+j, RVB);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	b29b      	uxth	r3, r3
 8002328:	f503 7399 	add.w	r3, r3, #306	; 0x132
 800232c:	b298      	uxth	r0, r3
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	b29b      	uxth	r3, r3
 8002332:	33fc      	adds	r3, #252	; 0xfc
 8002334:	b29b      	uxth	r3, r3
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4619      	mov	r1, r3
 800233a:	f001 fff1 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	3301      	adds	r3, #1
 8002342:	74fb      	strb	r3, [r7, #19]
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b11      	cmp	r3, #17
 8002348:	d9eb      	bls.n	8002322 <AfficheTonalite+0x17e>
	for(uint32_t i = 0;i<256; i = i+4)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d9dd      	bls.n	8002312 <AfficheTonalite+0x16e>
		}
   }
	//affichage R+B :
	for(uint32_t i = 252;i<253; i = i-4)
 8002356:	23fc      	movs	r3, #252	; 0xfc
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	e01e      	b.n	800239a <AfficheTonalite+0x1f6>
   {
		RVB = 0xFFFF0000 | (i);// Red à 255, Bleu diminue
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <AfficheTonalite+0x20c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002364:	2300      	movs	r3, #0
 8002366:	72fb      	strb	r3, [r7, #11]
 8002368:	e011      	b.n	800238e <AfficheTonalite+0x1ea>
		{
			BSP_LCD_DrawPixel(370+(63-i/4), 252+j, RVB);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	b29a      	uxth	r2, r3
 8002370:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	b298      	uxth	r0, r3
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	b29b      	uxth	r3, r3
 800237c:	33fc      	adds	r3, #252	; 0xfc
 800237e:	b29b      	uxth	r3, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4619      	mov	r1, r3
 8002384:	f001 ffcc 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	3301      	adds	r3, #1
 800238c:	72fb      	strb	r3, [r7, #11]
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	2b11      	cmp	r3, #17
 8002392:	d9ea      	bls.n	800236a <AfficheTonalite+0x1c6>
	for(uint32_t i = 252;i<253; i = i-4)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3b04      	subs	r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2bfc      	cmp	r3, #252	; 0xfc
 800239e:	d9dd      	bls.n	800235c <AfficheTonalite+0x1b8>
		}
   }
	osDelay(200);
 80023a0:	20c8      	movs	r0, #200	; 0xc8
 80023a2:	f00a f896 	bl	800c4d2 <osDelay>
}
 80023a6:	bf00      	nop
 80023a8:	3738      	adds	r7, #56	; 0x38
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	ffff0000 	.word	0xffff0000
 80023b4:	ff0000ff 	.word	0xff0000ff

080023b8 <AfficheLuminosite>:

/*
 * Affiche le dégradé de luminosité pour que l'utilisateur puisse faire son choix
 */
void AfficheLuminosite(float ton, float sat)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	ed87 0a01 	vstr	s0, [r7, #4]
 80023c2:	edc7 0a00 	vstr	s1, [r7]
	float lum;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f001 fc40 	bl	8003c4c <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f001 fc4c 	bl	8003c6c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 80023d4:	2315      	movs	r3, #21
 80023d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023da:	21fb      	movs	r1, #251	; 0xfb
 80023dc:	2000      	movs	r0, #0
 80023de:	f001 ffe7 	bl	80043b0 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e02e      	b.n	8002446 <AfficheLuminosite+0x8e>
    {
		lum = (float)i/255;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800245c <AfficheLuminosite+0xa4>
 80023f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023fa:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 80023fe:	ed97 1a03 	vldr	s2, [r7, #12]
 8002402:	edd7 0a00 	vldr	s1, [r7]
 8002406:	ed97 0a01 	vldr	s0, [r7, #4]
 800240a:	f000 f87d 	bl	8002508 <FindCouleur>
 800240e:	4603      	mov	r3, r0
 8002410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002414:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 8002416:	2300      	movs	r3, #0
 8002418:	74fb      	strb	r3, [r7, #19]
 800241a:	e00e      	b.n	800243a <AfficheLuminosite+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	b29b      	uxth	r3, r3
 8002420:	3364      	adds	r3, #100	; 0x64
 8002422:	b298      	uxth	r0, r3
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	b29b      	uxth	r3, r3
 8002428:	33fc      	adds	r3, #252	; 0xfc
 800242a:	b29b      	uxth	r3, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4619      	mov	r1, r3
 8002430:	f001 ff76 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	3301      	adds	r3, #1
 8002438:	74fb      	strb	r3, [r7, #19]
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b11      	cmp	r3, #17
 800243e:	d9ed      	bls.n	800241c <AfficheLuminosite+0x64>
	for(uint32_t i = 0;i<256;i++)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2bff      	cmp	r3, #255	; 0xff
 800244a:	d9cd      	bls.n	80023e8 <AfficheLuminosite+0x30>
		}
    }
	osDelay(200);
 800244c:	20c8      	movs	r0, #200	; 0xc8
 800244e:	f00a f840 	bl	800c4d2 <osDelay>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	437f0000 	.word	0x437f0000

08002460 <AfficheSaturation>:

/*
 * Affiche le dégradé de saturation pour que l'utilisateur puisse faire son choix
 */
void AfficheSaturation(float ton, float lum)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0a01 	vstr	s0, [r7, #4]
 800246a:	edc7 0a00 	vstr	s1, [r7]
	float sat;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f001 fbec 	bl	8003c4c <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f001 fbf8 	bl	8003c6c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 800247c:	2315      	movs	r3, #21
 800247e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002482:	21fb      	movs	r1, #251	; 0xfb
 8002484:	2000      	movs	r0, #0
 8002486:	f001 ff93 	bl	80043b0 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e02e      	b.n	80024ee <AfficheSaturation+0x8e>
    {
		sat = (float)i/255;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800249a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002504 <AfficheSaturation+0xa4>
 800249e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a2:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 80024a6:	ed97 1a00 	vldr	s2, [r7]
 80024aa:	edd7 0a03 	vldr	s1, [r7, #12]
 80024ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80024b2:	f000 f829 	bl	8002508 <FindCouleur>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 80024be:	2300      	movs	r3, #0
 80024c0:	74fb      	strb	r3, [r7, #19]
 80024c2:	e00e      	b.n	80024e2 <AfficheSaturation+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3364      	adds	r3, #100	; 0x64
 80024ca:	b298      	uxth	r0, r3
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	33fc      	adds	r3, #252	; 0xfc
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4619      	mov	r1, r3
 80024d8:	f001 ff22 	bl	8004320 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	3301      	adds	r3, #1
 80024e0:	74fb      	strb	r3, [r7, #19]
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d9ed      	bls.n	80024c4 <AfficheSaturation+0x64>
	for(uint32_t i = 0;i<256;i++)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2bff      	cmp	r3, #255	; 0xff
 80024f2:	d9cd      	bls.n	8002490 <AfficheSaturation+0x30>
		}
    }
	osDelay(200);
 80024f4:	20c8      	movs	r0, #200	; 0xc8
 80024f6:	f009 ffec 	bl	800c4d2 <osDelay>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	437f0000 	.word	0x437f0000

08002508 <FindCouleur>:
/*
 * trouve la couleur RVB à partir de la couleur TSL:
 * renvoi un entier de la forme RGB-888 : 0xRRVVBB
 */
uint32_t FindCouleur(float ton, float sat, float lum)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002512:	edc7 0a02 	vstr	s1, [r7, #8]
 8002516:	ed87 1a01 	vstr	s2, [r7, #4]
	char Red, Green, Blue;
	uint32_t color = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 0;
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 0;
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 0;
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float C;
	float m;
	float T_prime;
	float X;
	C = lum*sat;
 8002530:	ed97 7a01 	vldr	s14, [r7, #4]
 8002534:	edd7 7a02 	vldr	s15, [r7, #8]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	m = lum-C;
 8002540:	ed97 7a01 	vldr	s14, [r7, #4]
 8002544:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254c:	edc7 7a08 	vstr	s15, [r7, #32]
	T_prime = ton/60;
 8002550:	ed97 7a03 	vldr	s14, [r7, #12]
 8002554:	eddf 6a61 	vldr	s13, [pc, #388]	; 80026dc <FindCouleur+0x1d4>
 8002558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800255c:	edc7 7a07 	vstr	s15, [r7, #28]
	X = C*(1-absolu((modulo(T_prime, 2))-1));
 8002560:	2002      	movs	r0, #2
 8002562:	ed97 0a07 	vldr	s0, [r7, #28]
 8002566:	f000 f917 	bl	8002798 <modulo>
 800256a:	eeb0 7a40 	vmov.f32	s14, s0
 800256e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	f000 f92f 	bl	80027dc <absolu>
 800257e:	eeb0 7a40 	vmov.f32	s14, s0
 8002582:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800258a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	edc7 7a06 	vstr	s15, [r7, #24]
	if((T_prime>=0) && (T_prime<1))
 8002596:	edd7 7a07 	vldr	s15, [r7, #28]
 800259a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	db0d      	blt.n	80025c0 <FindCouleur+0xb8>
 80025a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d504      	bpl.n	80025c0 <FindCouleur+0xb8>
	{
		R = C;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
		V = X;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	e044      	b.n	800264a <FindCouleur+0x142>
	}
	else if(T_prime<2)
 80025c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80025c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d504      	bpl.n	80025dc <FindCouleur+0xd4>
	{
		R = X;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
		V = C;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
 80025da:	e036      	b.n	800264a <FindCouleur+0x142>
	}
	else if(T_prime<3)
 80025dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80025e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	d504      	bpl.n	80025f8 <FindCouleur+0xf0>
	{
		B = X;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = C;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
 80025f6:	e028      	b.n	800264a <FindCouleur+0x142>
	}
	else if(T_prime<4)
 80025f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d504      	bpl.n	8002614 <FindCouleur+0x10c>
	{
		B = C;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = X;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	e01a      	b.n	800264a <FindCouleur+0x142>
	}
	else if(T_prime<5)
 8002614:	edd7 7a07 	vldr	s15, [r7, #28]
 8002618:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800261c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d504      	bpl.n	8002630 <FindCouleur+0x128>
	{
		B = C;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
		R = X;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
 800262e:	e00c      	b.n	800264a <FindCouleur+0x142>
	}
	else if(T_prime<6)
 8002630:	edd7 7a07 	vldr	s15, [r7, #28]
 8002634:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d503      	bpl.n	800264a <FindCouleur+0x142>
	{
		R = C;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
		B = X;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	R = (R+m)*255;
 800264a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800264e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002656:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80026e0 <FindCouleur+0x1d8>
 800265a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	V = (V+m)*255;
 8002662:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002666:	edd7 7a08 	vldr	s15, [r7, #32]
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80026e0 <FindCouleur+0x1d8>
 8002672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002676:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	B = (B+m)*255;
 800267a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800267e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80026e0 <FindCouleur+0x1d8>
 800268a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Red = (int)R;
 8002692:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269a:	edc7 7a00 	vstr	s15, [r7]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	75fb      	strb	r3, [r7, #23]
	Green = (int)V;
 80026a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026aa:	edc7 7a00 	vstr	s15, [r7]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	75bb      	strb	r3, [r7, #22]
	Blue = (int)B;
 80026b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ba:	edc7 7a00 	vstr	s15, [r7]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	757b      	strb	r3, [r7, #21]
	color = (Red<<16)+(Green<<8)+Blue;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	441a      	add	r2, r3
 80026cc:	7d7b      	ldrb	r3, [r7, #21]
 80026ce:	4413      	add	r3, r2
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
	return color;
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3738      	adds	r7, #56	; 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	42700000 	.word	0x42700000
 80026e0:	437f0000 	.word	0x437f0000

080026e4 <FindTonalite>:
/*
 * Renvoi la tonalité entre 0° et 360° à partir de la position du doigt sur la barre
 */
float FindTonalite(uint16_t pos)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
	float ton;
	ton = (float)pos;
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f8:	edc7 7a03 	vstr	s15, [r7, #12]
	ton = (ton/383)*360;
 80026fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002700:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002728 <FindTonalite+0x44>
 8002704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002708:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800272c <FindTonalite+0x48>
 800270c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002710:	edc7 7a03 	vstr	s15, [r7, #12]
	return ton;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	ee07 3a90 	vmov	s15, r3
}
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	43bf8000 	.word	0x43bf8000
 800272c:	43b40000 	.word	0x43b40000

08002730 <FindLuminosite>:

/*
 * Renvoi la Luminosité entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindLuminosite(uint16_t pos)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
	return (float) pos/255;
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002744:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002760 <FindLuminosite+0x30>
 8002748:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800274c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002750:	eeb0 0a67 	vmov.f32	s0, s15
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	437f0000 	.word	0x437f0000

08002764 <FindSaturation>:

/*
 * Renvoi la Saturation entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindSaturation(uint16_t pos)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
	return (float)pos/255;
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002778:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002794 <FindSaturation+0x30>
 800277c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002780:	eef0 7a66 	vmov.f32	s15, s13
}
 8002784:	eeb0 0a67 	vmov.f32	s0, s15
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	437f0000 	.word	0x437f0000

08002798 <modulo>:

float modulo(float val, char mod)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	ed87 0a01 	vstr	s0, [r7, #4]
 80027a2:	4603      	mov	r3, r0
 80027a4:	70fb      	strb	r3, [r7, #3]
	uint32_t q;
	q = (int) val/mod;
 80027a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ae:	ee17 2a90 	vmov	r2, s15
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80027b8:	60fb      	str	r3, [r7, #12]
	return(val - 2*q);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80027ca:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80027ce:	eeb0 0a67 	vmov.f32	s0, s15
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <absolu>:

float absolu(float val)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(val<0) return -val;
 80027e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	d504      	bpl.n	80027fe <absolu+0x22>
 80027f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f8:	eef1 7a67 	vneg.f32	s15, s15
 80027fc:	e001      	b.n	8002802 <absolu+0x26>
	else return val;
 80027fe:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8002802:	eeb0 0a67 	vmov.f32	s0, s15
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002818:	2001      	movs	r0, #1
 800281a:	f009 fe5a 	bl	800c4d2 <osDelay>
 800281e:	e7fb      	b.n	8002818 <StartDefaultTask+0x8>

08002820 <StartMode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMode */
void StartMode(void const * argument)
{
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b0ca      	sub	sp, #296	; 0x128
 8002824:	af00      	add	r7, sp, #0
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartMode */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 800282a:	f00a ff41 	bl	800d6b0 <xTaskGetTickCount>
 800282e:	4603      	mov	r3, r0
 8002830:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  static TS_StateTypeDef  TS_State;
  char radius_prec; //rayon précédent pour supprimer le curseur dans la sélection
  char sous_menu = 0; // permet de savoir si on est dans un sous menu
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  char menu_couleur = 0; // permet de savoir si on est dans un des sous_menu couleur (tonalité, saturation, luminosité)
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  //valeur TSL pour la couleur
  float ton = 180.0;
 8002840:	4ba9      	ldr	r3, [pc, #676]	; (8002ae8 <StartMode+0x2c8>)
 8002842:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  float lum = 0.5;
 8002846:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800284a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  float sat = 0.5;
 800284e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002852:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  char layer = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  char text[] = "   Layer   |   Pinceau   | Transparence |   Couleur   |    Taille   ";
 800285c:	4aa3      	ldr	r2, [pc, #652]	; (8002aec <StartMode+0x2cc>)
 800285e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002862:	4611      	mov	r1, r2
 8002864:	2245      	movs	r2, #69	; 0x45
 8002866:	4618      	mov	r0, r3
 8002868:	f00c f884 	bl	800e974 <memcpy>
  char text_layer[] = "Calque 1        |        Calque 2";
 800286c:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <StartMode+0x2d0>)
 800286e:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8002872:	461d      	mov	r5, r3
 8002874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	8023      	strh	r3, [r4, #0]
  char text_alpha[] = "Choisir la transparence : ";
 8002880:	4b9c      	ldr	r3, [pc, #624]	; (8002af4 <StartMode+0x2d4>)
 8002882:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002886:	461d      	mov	r5, r3
 8002888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800288c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002890:	c403      	stmia	r4!, {r0, r1}
 8002892:	8022      	strh	r2, [r4, #0]
 8002894:	3402      	adds	r4, #2
 8002896:	0c13      	lsrs	r3, r2, #16
 8002898:	7023      	strb	r3, [r4, #0]
  char text_couleur[] = "Tonalite  |    Saturation    | Luminosite";
 800289a:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <StartMode+0x2d8>)
 800289c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80028a0:	461d      	mov	r5, r3
 80028a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028ae:	c403      	stmia	r4!, {r0, r1}
 80028b0:	8022      	strh	r2, [r4, #0]
  couleur = FindCouleur(180,0.5,0.5)|0xFF000000;
 80028b2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80028b6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80028ba:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8002afc <StartMode+0x2dc>
 80028be:	f7ff fe23 	bl	8002508 <FindCouleur>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c8:	4a8d      	ldr	r2, [pc, #564]	; (8002b00 <StartMode+0x2e0>)
 80028ca:	6013      	str	r3, [r2, #0]
  char text_taille[] = "Taille du pinceau :   px";
 80028cc:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <StartMode+0x2e4>)
 80028ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80028d2:	461d      	mov	r5, r3
 80028d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028dc:	c403      	stmia	r4!, {r0, r1}
 80028de:	7022      	strb	r2, [r4, #0]
  char text_brush[] = " <<<<            Valider            >>>>";
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	4a88      	ldr	r2, [pc, #544]	; (8002b08 <StartMode+0x2e8>)
 80028e6:	461c      	mov	r4, r3
 80028e8:	4615      	mov	r5, r2
 80028ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028f6:	c403      	stmia	r4!, {r0, r1}
 80028f8:	7022      	strb	r2, [r4, #0]
  for(;;)
  {
	  switch(etat)
 80028fa:	4b84      	ldr	r3, [pc, #528]	; (8002b0c <StartMode+0x2ec>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	f200 859b 	bhi.w	800343a <StartMode+0xc1a>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <StartMode+0xec>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800343b 	.word	0x0800343b
 8002910:	0800292d 	.word	0x0800292d
 8002914:	08002a1f 	.word	0x08002a1f
 8002918:	08002b25 	.word	0x08002b25
 800291c:	08002cf7 	.word	0x08002cf7
 8002920:	08002e7b 	.word	0x08002e7b
 8002924:	0800325d 	.word	0x0800325d
 8002928:	08003421 	.word	0x08003421
		  break;
	  /*
	   * etat d'affichage du menu
	   */
	  case 1 :
		  if(myMutexLCDHandle != NULL)
 800292c:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <StartMode+0x2f0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d06f      	beq.n	8002a14 <StartMode+0x1f4>
		  {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002934:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <StartMode+0x2f0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f00a f940 	bl	800cbc0 <xQueueSemaphoreTake>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d166      	bne.n	8002a14 <StartMode+0x1f4>
			   {
				   BSP_LCD_SelectLayer(1);
 8002946:	2001      	movs	r0, #1
 8002948:	f001 f980 	bl	8003c4c <BSP_LCD_SelectLayer>
				   BSP_LCD_SetFont(&Font12);
 800294c:	4871      	ldr	r0, [pc, #452]	; (8002b14 <StartMode+0x2f4>)
 800294e:	f001 f9bf 	bl	8003cd0 <BSP_LCD_SetFont>
				   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	f001 f989 	bl	8003c6c <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(0, 251, 480, 21);
 800295a:	2315      	movs	r3, #21
 800295c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002960:	21fb      	movs	r1, #251	; 0xfb
 8002962:	2000      	movs	r0, #0
 8002964:	f001 fd24 	bl	80043b0 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002968:	486b      	ldr	r0, [pc, #428]	; (8002b18 <StartMode+0x2f8>)
 800296a:	f001 f97f 	bl	8003c6c <BSP_LCD_SetTextColor>
				   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text, CENTER_MODE);
 800296e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002972:	2301      	movs	r3, #1
 8002974:	21fc      	movs	r1, #252	; 0xfc
 8002976:	2000      	movs	r0, #0
 8002978:	f001 fa46 	bl	8003e08 <BSP_LCD_DisplayStringAt>
				   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800297c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002980:	f001 f974 	bl	8003c6c <BSP_LCD_SetTextColor>
				   LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002984:	2214      	movs	r2, #20
 8002986:	214b      	movs	r1, #75	; 0x4b
 8002988:	f240 10c7 	movw	r0, #455	; 0x1c7
 800298c:	f7ff fba0 	bl	80020d0 <LCD_PAINTBRUSH_SAMPLE>
				   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 8002990:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8002994:	f001 f96a 	bl	8003c6c <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8002998:	4b60      	ldr	r3, [pc, #384]	; (8002b1c <StartMode+0x2fc>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	00d2      	lsls	r2, r2, #3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	00d2      	lsls	r2, r2, #3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3baa      	subs	r3, #170	; 0xaa
 80029b0:	b298      	uxth	r0, r3
 80029b2:	2305      	movs	r3, #5
 80029b4:	2223      	movs	r2, #35	; 0x23
 80029b6:	f240 1109 	movw	r1, #265	; 0x109
 80029ba:	f001 fcf9 	bl	80043b0 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 80029be:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <StartMode+0x2e0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f950 	bl	8003c6c <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 80029cc:	2214      	movs	r2, #20
 80029ce:	2119      	movs	r1, #25
 80029d0:	f240 10c7 	movw	r0, #455	; 0x1c7
 80029d4:	f001 fd66 	bl	80044a4 <BSP_LCD_FillCircle>
				   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 80029d8:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <StartMode+0x2e0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 f943 	bl	8003c6c <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 80029e6:	2214      	movs	r2, #20
 80029e8:	217d      	movs	r1, #125	; 0x7d
 80029ea:	f240 10c7 	movw	r0, #455	; 0x1c7
 80029ee:	f001 fd59 	bl	80044a4 <BSP_LCD_FillCircle>
				   BSP_LCD_SelectLayer(layer);
 80029f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f928 	bl	8003c4c <BSP_LCD_SelectLayer>
				   BSP_LCD_SetTextColor(couleur);
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <StartMode+0x2e0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f933 	bl	8003c6c <BSP_LCD_SetTextColor>
				   xSemaphoreGive(myMutexLCDHandle);
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <StartMode+0x2f0>)
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f009 ffd4 	bl	800c9bc <xQueueGenericSend>
			   }
		   }
		  etat = 0;
 8002a14:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <StartMode+0x2ec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
		  break;
 8002a1a:	f000 bd0e 	b.w	800343a <StartMode+0xc1a>
	  /*
	   * etat de sélection du calque
	   */
	  case 2 :
		  if(sous_menu == 0)
 8002a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d12e      	bne.n	8002a84 <StartMode+0x264>
		  {
			  if(myMutexLCDHandle != NULL)
 8002a26:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <StartMode+0x2f0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02a      	beq.n	8002a84 <StartMode+0x264>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <StartMode+0x2f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00a f8c3 	bl	800cbc0 <xQueueSemaphoreTake>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d121      	bne.n	8002a84 <StartMode+0x264>
				   {
					   BSP_LCD_SelectLayer(1);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f001 f903 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 8002a46:	4833      	ldr	r0, [pc, #204]	; (8002b14 <StartMode+0x2f4>)
 8002a48:	f001 f942 	bl	8003cd0 <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f001 f90c 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002a54:	2315      	movs	r3, #21
 8002a56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a5a:	21fb      	movs	r1, #251	; 0xfb
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f001 fca7 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002a62:	482d      	ldr	r0, [pc, #180]	; (8002b18 <StartMode+0x2f8>)
 8002a64:	f001 f902 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_layer, CENTER_MODE);
 8002a68:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	21fc      	movs	r1, #252	; 0xfc
 8002a70:	2000      	movs	r0, #0
 8002a72:	f001 f9c9 	bl	8003e08 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <StartMode+0x2f0>)
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	f009 ff9c 	bl	800c9bc <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 8002a8a:	4825      	ldr	r0, [pc, #148]	; (8002b20 <StartMode+0x300>)
 8002a8c:	f002 f9b8 	bl	8004e00 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <StartMode+0x300>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01c      	beq.n	8002ad2 <StartMode+0x2b2>
		  {
			  if((TS_State.touchX[0]<240) && TS_State.touchY[0] > 250)
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <StartMode+0x300>)
 8002a9a:	885b      	ldrh	r3, [r3, #2]
 8002a9c:	2bef      	cmp	r3, #239	; 0xef
 8002a9e:	d80a      	bhi.n	8002ab6 <StartMode+0x296>
 8002aa0:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <StartMode+0x300>)
 8002aa2:	899b      	ldrh	r3, [r3, #12]
 8002aa4:	2bfa      	cmp	r3, #250	; 0xfa
 8002aa6:	d906      	bls.n	8002ab6 <StartMode+0x296>
			  {
				  layer = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				  sous_menu = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8002ab4:	e00d      	b.n	8002ad2 <StartMode+0x2b2>
			  }
			  else if((TS_State.touchX[0]>240) && TS_State.touchY[0] > 250)
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <StartMode+0x300>)
 8002ab8:	885b      	ldrh	r3, [r3, #2]
 8002aba:	2bf0      	cmp	r3, #240	; 0xf0
 8002abc:	d909      	bls.n	8002ad2 <StartMode+0x2b2>
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <StartMode+0x300>)
 8002ac0:	899b      	ldrh	r3, [r3, #12]
 8002ac2:	2bfa      	cmp	r3, #250	; 0xfa
 8002ac4:	d905      	bls.n	8002ad2 <StartMode+0x2b2>
			  {
				  layer = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				  sous_menu = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 84a6 	bne.w	8003428 <StartMode+0xc08>
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <StartMode+0x2ec>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
		  break;
 8002ae2:	f000 bca1 	b.w	8003428 <StartMode+0xc08>
 8002ae6:	bf00      	nop
 8002ae8:	43340000 	.word	0x43340000
 8002aec:	0800f280 	.word	0x0800f280
 8002af0:	0800f2c8 	.word	0x0800f2c8
 8002af4:	0800f2ec 	.word	0x0800f2ec
 8002af8:	0800f308 	.word	0x0800f308
 8002afc:	43340000 	.word	0x43340000
 8002b00:	20009b00 	.word	0x20009b00
 8002b04:	0800f334 	.word	0x0800f334
 8002b08:	0800f350 	.word	0x0800f350
 8002b0c:	2000101a 	.word	0x2000101a
 8002b10:	200098b0 	.word	0x200098b0
 8002b14:	20001024 	.word	0x20001024
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	2000101b 	.word	0x2000101b
 8002b20:	2000134c 	.word	0x2000134c
	  /*
	   * etat de sélection du pinceau
	   */
	  case 3 :
		  if(sous_menu == 0)
 8002b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12e      	bne.n	8002b8a <StartMode+0x36a>
		  {
			  if(myMutexLCDHandle != NULL)
 8002b2c:	4ba3      	ldr	r3, [pc, #652]	; (8002dbc <StartMode+0x59c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02a      	beq.n	8002b8a <StartMode+0x36a>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002b34:	4ba1      	ldr	r3, [pc, #644]	; (8002dbc <StartMode+0x59c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00a f840 	bl	800cbc0 <xQueueSemaphoreTake>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d121      	bne.n	8002b8a <StartMode+0x36a>
				   {
					   BSP_LCD_SelectLayer(1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f001 f880 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 8002b4c:	489c      	ldr	r0, [pc, #624]	; (8002dc0 <StartMode+0x5a0>)
 8002b4e:	f001 f8bf 	bl	8003cd0 <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002b52:	f04f 30ff 	mov.w	r0, #4294967295
 8002b56:	f001 f889 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002b5a:	2315      	movs	r3, #21
 8002b5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b60:	21fb      	movs	r1, #251	; 0xfb
 8002b62:	2000      	movs	r0, #0
 8002b64:	f001 fc24 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002b68:	4896      	ldr	r0, [pc, #600]	; (8002dc4 <StartMode+0x5a4>)
 8002b6a:	f001 f87f 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_brush, CENTER_MODE);
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	2301      	movs	r3, #1
 8002b74:	21fc      	movs	r1, #252	; 0xfc
 8002b76:	2000      	movs	r0, #0
 8002b78:	f001 f946 	bl	8003e08 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <StartMode+0x59c>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	f009 ff19 	bl	800c9bc <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 8002b90:	488d      	ldr	r0, [pc, #564]	; (8002dc8 <StartMode+0x5a8>)
 8002b92:	f002 f935 	bl	8004e00 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002b96:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <StartMode+0x5a8>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80a2 	beq.w	8002ce4 <StartMode+0x4c4>
		  {
			  if((TS_State.touchX[0]<190) && TS_State.touchY[0] > 250)
 8002ba0:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <StartMode+0x5a8>)
 8002ba2:	885b      	ldrh	r3, [r3, #2]
 8002ba4:	2bbd      	cmp	r3, #189	; 0xbd
 8002ba6:	d840      	bhi.n	8002c2a <StartMode+0x40a>
 8002ba8:	4b87      	ldr	r3, [pc, #540]	; (8002dc8 <StartMode+0x5a8>)
 8002baa:	899b      	ldrh	r3, [r3, #12]
 8002bac:	2bfa      	cmp	r3, #250	; 0xfa
 8002bae:	d93c      	bls.n	8002c2a <StartMode+0x40a>
			  {
				  brush -= 1;
 8002bb0:	4b86      	ldr	r3, [pc, #536]	; (8002dcc <StartMode+0x5ac>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b84      	ldr	r3, [pc, #528]	; (8002dcc <StartMode+0x5ac>)
 8002bba:	701a      	strb	r2, [r3, #0]
				  if(brush<0) brush = max_brush;
				  if(myMutexLCDHandle != NULL)
 8002bbc:	4b7f      	ldr	r3, [pc, #508]	; (8002dbc <StartMode+0x59c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02d      	beq.n	8002c20 <StartMode+0x400>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002bc4:	4b7d      	ldr	r3, [pc, #500]	; (8002dbc <StartMode+0x59c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f009 fff8 	bl	800cbc0 <xQueueSemaphoreTake>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d124      	bne.n	8002c20 <StartMode+0x400>
					   {
						  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bda:	f001 f847 	bl	8003c6c <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(480-taille_menu , taille_menu, taille_menu-1, taille_menu);
 8002bde:	2332      	movs	r3, #50	; 0x32
 8002be0:	2231      	movs	r2, #49	; 0x31
 8002be2:	2132      	movs	r1, #50	; 0x32
 8002be4:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002be8:	f001 fbe2 	bl	80043b0 <BSP_LCD_FillRect>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002bec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002bf0:	f001 f83c 	bl	8003c6c <BSP_LCD_SetTextColor>
						  LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002bf4:	2214      	movs	r2, #20
 8002bf6:	214b      	movs	r1, #75	; 0x4b
 8002bf8:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002bfc:	f7ff fa68 	bl	80020d0 <LCD_PAINTBRUSH_SAMPLE>
						  BSP_LCD_SetTextColor(couleur);
 8002c00:	4b73      	ldr	r3, [pc, #460]	; (8002dd0 <StartMode+0x5b0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 f831 	bl	8003c6c <BSP_LCD_SetTextColor>
						  xSemaphoreGive(myMutexLCDHandle);
 8002c0a:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <StartMode+0x59c>)
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	f009 fed2 	bl	800c9bc <xQueueGenericSend>
					   }
				  }
				  while(TS_State.touchDetected) BSP_TS_GetState(&TS_State);;
 8002c18:	e002      	b.n	8002c20 <StartMode+0x400>
 8002c1a:	486b      	ldr	r0, [pc, #428]	; (8002dc8 <StartMode+0x5a8>)
 8002c1c:	f002 f8f0 	bl	8004e00 <BSP_TS_GetState>
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <StartMode+0x5a8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f8      	bne.n	8002c1a <StartMode+0x3fa>
			  if((TS_State.touchX[0]<190) && TS_State.touchY[0] > 250)
 8002c28:	e05c      	b.n	8002ce4 <StartMode+0x4c4>
			  }
			  else if((TS_State.touchX[0]>290) && TS_State.touchY[0] > 250)
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <StartMode+0x5a8>)
 8002c2c:	885b      	ldrh	r3, [r3, #2]
 8002c2e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002c32:	d947      	bls.n	8002cc4 <StartMode+0x4a4>
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <StartMode+0x5a8>)
 8002c36:	899b      	ldrh	r3, [r3, #12]
 8002c38:	2bfa      	cmp	r3, #250	; 0xfa
 8002c3a:	d943      	bls.n	8002cc4 <StartMode+0x4a4>
			  {
				  brush += 1;
 8002c3c:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <StartMode+0x5ac>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <StartMode+0x5ac>)
 8002c46:	701a      	strb	r2, [r3, #0]
				  if(brush>max_brush) brush = 0;
 8002c48:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <StartMode+0x5ac>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d902      	bls.n	8002c56 <StartMode+0x436>
 8002c50:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <StartMode+0x5ac>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 8002c56:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <StartMode+0x59c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d02d      	beq.n	8002cba <StartMode+0x49a>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002c5e:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <StartMode+0x59c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f009 ffab 	bl	800cbc0 <xQueueSemaphoreTake>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d124      	bne.n	8002cba <StartMode+0x49a>
					   {
						  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f000 fffa 	bl	8003c6c <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(480-taille_menu , taille_menu, taille_menu-1, taille_menu);
 8002c78:	2332      	movs	r3, #50	; 0x32
 8002c7a:	2231      	movs	r2, #49	; 0x31
 8002c7c:	2132      	movs	r1, #50	; 0x32
 8002c7e:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002c82:	f001 fb95 	bl	80043b0 <BSP_LCD_FillRect>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002c86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002c8a:	f000 ffef 	bl	8003c6c <BSP_LCD_SetTextColor>
						  LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002c8e:	2214      	movs	r2, #20
 8002c90:	214b      	movs	r1, #75	; 0x4b
 8002c92:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002c96:	f7ff fa1b 	bl	80020d0 <LCD_PAINTBRUSH_SAMPLE>
						  BSP_LCD_SetTextColor(couleur);
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <StartMode+0x5b0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 ffe4 	bl	8003c6c <BSP_LCD_SetTextColor>
						  xSemaphoreGive(myMutexLCDHandle);
 8002ca4:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <StartMode+0x59c>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	f009 fe85 	bl	800c9bc <xQueueGenericSend>
					   }
				  }
				  while(TS_State.touchDetected) BSP_TS_GetState(&TS_State);;
 8002cb2:	e002      	b.n	8002cba <StartMode+0x49a>
 8002cb4:	4844      	ldr	r0, [pc, #272]	; (8002dc8 <StartMode+0x5a8>)
 8002cb6:	f002 f8a3 	bl	8004e00 <BSP_TS_GetState>
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <StartMode+0x5a8>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f8      	bne.n	8002cb4 <StartMode+0x494>
			  else if((TS_State.touchX[0]>290) && TS_State.touchY[0] > 250)
 8002cc2:	e00f      	b.n	8002ce4 <StartMode+0x4c4>
			  }
			  else if((TS_State.touchX[0]>190) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<290))
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <StartMode+0x5a8>)
 8002cc6:	885b      	ldrh	r3, [r3, #2]
 8002cc8:	2bbe      	cmp	r3, #190	; 0xbe
 8002cca:	d90b      	bls.n	8002ce4 <StartMode+0x4c4>
 8002ccc:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <StartMode+0x5a8>)
 8002cce:	899b      	ldrh	r3, [r3, #12]
 8002cd0:	2bfa      	cmp	r3, #250	; 0xfa
 8002cd2:	d907      	bls.n	8002ce4 <StartMode+0x4c4>
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <StartMode+0x5a8>)
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002cdc:	d202      	bcs.n	8002ce4 <StartMode+0x4c4>
			  {
				  sous_menu = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 839f 	bne.w	800342c <StartMode+0xc0c>
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <StartMode+0x5b4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
		  break;
 8002cf4:	e39a      	b.n	800342c <StartMode+0xc0c>
	  /*
	   * etat de sélection de la transparence
	   */
	  case 4 :
		  if(sous_menu == 0)
 8002cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d156      	bne.n	8002dac <StartMode+0x58c>
		  {
			  if(myMutexLCDHandle != NULL)
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <StartMode+0x59c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d052      	beq.n	8002dac <StartMode+0x58c>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <StartMode+0x59c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f009 ff56 	bl	800cbc0 <xQueueSemaphoreTake>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d148      	bne.n	8002dac <StartMode+0x58c>
				   {
					   BSP_LCD_SelectLayer(1);
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f000 ff96 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f000 ffa2 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002d28:	2315      	movs	r3, #21
 8002d2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d2e:	21fb      	movs	r1, #251	; 0xfb
 8002d30:	2000      	movs	r0, #0
 8002d32:	f001 fb3d 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002d36:	4823      	ldr	r0, [pc, #140]	; (8002dc4 <StartMode+0x5a4>)
 8002d38:	f000 ff98 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_alpha, LEFT_MODE);
 8002d3c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d40:	2303      	movs	r3, #3
 8002d42:	21fc      	movs	r1, #252	; 0xfc
 8002d44:	2000      	movs	r0, #0
 8002d46:	f001 f85f 	bl	8003e08 <BSP_LCD_DisplayStringAt>
					   for(uint32_t i = 0;i<256; i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d50:	e021      	b.n	8002d96 <StartMode+0x576>
					   {
						   for(char j = 0; j<18; j++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d58:	e014      	b.n	8002d84 <StartMode+0x564>
						   {
							   BSP_LCD_DrawPixel(200+i, 252+j, i << 24);
 8002d5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	33c8      	adds	r3, #200	; 0xc8
 8002d62:	b298      	uxth	r0, r3
 8002d64:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	33fc      	adds	r3, #252	; 0xfc
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	461a      	mov	r2, r3
 8002d76:	f001 fad3 	bl	8004320 <BSP_LCD_DrawPixel>
						   for(char j = 0; j<18; j++)
 8002d7a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d84:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d88:	2b11      	cmp	r3, #17
 8002d8a:	d9e6      	bls.n	8002d5a <StartMode+0x53a>
					   for(uint32_t i = 0;i<256; i++)
 8002d8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d9d9      	bls.n	8002d52 <StartMode+0x532>
						   }
					   }
					   xSemaphoreGive(myMutexLCDHandle);
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <StartMode+0x59c>)
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	2300      	movs	r3, #0
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	f009 fe08 	bl	800c9bc <xQueueGenericSend>
				   }
			   }
		  }
		  sous_menu = 1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <StartMode+0x5a8>)
 8002db4:	f002 f824 	bl	8004e00 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002db8:	e052      	b.n	8002e60 <StartMode+0x640>
 8002dba:	bf00      	nop
 8002dbc:	200098b0 	.word	0x200098b0
 8002dc0:	20001024 	.word	0x20001024
 8002dc4:	ffff0000 	.word	0xffff0000
 8002dc8:	2000134c 	.word	0x2000134c
 8002dcc:	20001019 	.word	0x20001019
 8002dd0:	20009b00 	.word	0x20009b00
 8002dd4:	2000101a 	.word	0x2000101a
		  {
			  if((TS_State.touchX[0]>200) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<455))
 8002dd8:	4bbd      	ldr	r3, [pc, #756]	; (80030d0 <StartMode+0x8b0>)
 8002dda:	885b      	ldrh	r3, [r3, #2]
 8002ddc:	2bc8      	cmp	r3, #200	; 0xc8
 8002dde:	d939      	bls.n	8002e54 <StartMode+0x634>
 8002de0:	4bbb      	ldr	r3, [pc, #748]	; (80030d0 <StartMode+0x8b0>)
 8002de2:	899b      	ldrh	r3, [r3, #12]
 8002de4:	2bfa      	cmp	r3, #250	; 0xfa
 8002de6:	d935      	bls.n	8002e54 <StartMode+0x634>
 8002de8:	4bb9      	ldr	r3, [pc, #740]	; (80030d0 <StartMode+0x8b0>)
 8002dea:	885b      	ldrh	r3, [r3, #2]
 8002dec:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8002df0:	d830      	bhi.n	8002e54 <StartMode+0x634>
			  {
				  couleur &= 0x00FFFFFF; //on enlève l'ancienne transparence
 8002df2:	4bb8      	ldr	r3, [pc, #736]	; (80030d4 <StartMode+0x8b4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dfa:	4ab6      	ldr	r2, [pc, #728]	; (80030d4 <StartMode+0x8b4>)
 8002dfc:	6013      	str	r3, [r2, #0]
				  couleur |= ((TS_State.touchX[0]-200)<<24);
 8002dfe:	4bb4      	ldr	r3, [pc, #720]	; (80030d0 <StartMode+0x8b0>)
 8002e00:	885b      	ldrh	r3, [r3, #2]
 8002e02:	3bc8      	subs	r3, #200	; 0xc8
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	461a      	mov	r2, r3
 8002e08:	4bb2      	ldr	r3, [pc, #712]	; (80030d4 <StartMode+0x8b4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	4ab1      	ldr	r2, [pc, #708]	; (80030d4 <StartMode+0x8b4>)
 8002e10:	6013      	str	r3, [r2, #0]
				  if(myMutexLCDHandle != NULL)
 8002e12:	4bb1      	ldr	r3, [pc, #708]	; (80030d8 <StartMode+0x8b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01c      	beq.n	8002e54 <StartMode+0x634>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002e1a:	4baf      	ldr	r3, [pc, #700]	; (80030d8 <StartMode+0x8b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2164      	movs	r1, #100	; 0x64
 8002e20:	4618      	mov	r0, r3
 8002e22:	f009 fecd 	bl	800cbc0 <xQueueSemaphoreTake>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d113      	bne.n	8002e54 <StartMode+0x634>
					   {
						   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002e2c:	4ba9      	ldr	r3, [pc, #676]	; (80030d4 <StartMode+0x8b4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 ff19 	bl	8003c6c <BSP_LCD_SetTextColor>
						   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 8002e3a:	2214      	movs	r2, #20
 8002e3c:	217d      	movs	r1, #125	; 0x7d
 8002e3e:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002e42:	f001 fb2f 	bl	80044a4 <BSP_LCD_FillCircle>
						   xSemaphoreGive(myMutexLCDHandle);
 8002e46:	4ba4      	ldr	r3, [pc, #656]	; (80030d8 <StartMode+0x8b8>)
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f009 fdb4 	bl	800c9bc <xQueueGenericSend>
					   }
				   }
			  }
			  sous_menu = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  BSP_TS_GetState(&TS_State);
 8002e5a:	489d      	ldr	r0, [pc, #628]	; (80030d0 <StartMode+0x8b0>)
 8002e5c:	f001 ffd0 	bl	8004e00 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002e60:	4b9b      	ldr	r3, [pc, #620]	; (80030d0 <StartMode+0x8b0>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1b7      	bne.n	8002dd8 <StartMode+0x5b8>
		  }
		  if(sous_menu == 0) etat = 1;
 8002e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 82df 	bne.w	8003430 <StartMode+0xc10>
 8002e72:	4b9a      	ldr	r3, [pc, #616]	; (80030dc <StartMode+0x8bc>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
		  break;
 8002e78:	e2da      	b.n	8003430 <StartMode+0xc10>
	  /*
	   * etat de sélection de la couleur
	   */
	  case 5 :
		  if(sous_menu == 0)
 8002e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d12c      	bne.n	8002edc <StartMode+0x6bc>
		  {
			  if(myMutexLCDHandle != NULL)
 8002e82:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <StartMode+0x8b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <StartMode+0x6bc>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002e8a:	4b93      	ldr	r3, [pc, #588]	; (80030d8 <StartMode+0x8b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e92:	4618      	mov	r0, r3
 8002e94:	f009 fe94 	bl	800cbc0 <xQueueSemaphoreTake>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d11e      	bne.n	8002edc <StartMode+0x6bc>
				   {
					   BSP_LCD_SelectLayer(1);
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f000 fed4 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f000 fee0 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002eac:	2315      	movs	r3, #21
 8002eae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002eb2:	21fb      	movs	r1, #251	; 0xfb
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f001 fa7b 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002eba:	4889      	ldr	r0, [pc, #548]	; (80030e0 <StartMode+0x8c0>)
 8002ebc:	f000 fed6 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_couleur, CENTER_MODE);
 8002ec0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	21fc      	movs	r1, #252	; 0xfc
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f000 ff9d 	bl	8003e08 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <StartMode+0x8b8>)
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f009 fd70 	bl	800c9bc <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  switch(menu_couleur)
 8002ee2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	f200 81af 	bhi.w	800324a <StartMode+0xa2a>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <StartMode+0x6d4>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	0800301f 	.word	0x0800301f
 8002efc:	080030e5 	.word	0x080030e5
 8002f00:	08003197 	.word	0x08003197
		  {
		  /*
		   * premier sous_menu : choix entre tonalité, saturation et luminosité
		   */
		  case 0 :
			  BSP_TS_GetState(&TS_State);
 8002f04:	4872      	ldr	r0, [pc, #456]	; (80030d0 <StartMode+0x8b0>)
 8002f06:	f001 ff7b 	bl	8004e00 <BSP_TS_GetState>
			  if(TS_State.touchDetected && menu_couleur == 0)
 8002f0a:	4b71      	ldr	r3, [pc, #452]	; (80030d0 <StartMode+0x8b0>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 819a 	beq.w	8003248 <StartMode+0xa28>
 8002f14:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 8195 	bne.w	8003248 <StartMode+0xa28>
			  {
				  if((TS_State.touchX[0]<170) && TS_State.touchY[0] > 250)
 8002f1e:	4b6c      	ldr	r3, [pc, #432]	; (80030d0 <StartMode+0x8b0>)
 8002f20:	885b      	ldrh	r3, [r3, #2]
 8002f22:	2ba9      	cmp	r3, #169	; 0xa9
 8002f24:	d81e      	bhi.n	8002f64 <StartMode+0x744>
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <StartMode+0x8b0>)
 8002f28:	899b      	ldrh	r3, [r3, #12]
 8002f2a:	2bfa      	cmp	r3, #250	; 0xfa
 8002f2c:	d91a      	bls.n	8002f64 <StartMode+0x744>
					  // clique sur tonalité
				  {
					  menu_couleur = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
					  if(myMutexLCDHandle != NULL)
 8002f34:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <StartMode+0x8b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d06c      	beq.n	8003016 <StartMode+0x7f6>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002f3c:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <StartMode+0x8b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f44:	4618      	mov	r0, r3
 8002f46:	f009 fe3b 	bl	800cbc0 <xQueueSemaphoreTake>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d162      	bne.n	8003016 <StartMode+0x7f6>
						   {
							   AfficheTonalite();
 8002f50:	f7ff f928 	bl	80021a4 <AfficheTonalite>
							   xSemaphoreGive(myMutexLCDHandle);
 8002f54:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <StartMode+0x8b8>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	f009 fd2d 	bl	800c9bc <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 8002f62:	e058      	b.n	8003016 <StartMode+0x7f6>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]>310) && TS_State.touchY[0] > 250)
 8002f64:	4b5a      	ldr	r3, [pc, #360]	; (80030d0 <StartMode+0x8b0>)
 8002f66:	885b      	ldrh	r3, [r3, #2]
 8002f68:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002f6c:	d922      	bls.n	8002fb4 <StartMode+0x794>
 8002f6e:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <StartMode+0x8b0>)
 8002f70:	899b      	ldrh	r3, [r3, #12]
 8002f72:	2bfa      	cmp	r3, #250	; 0xfa
 8002f74:	d91e      	bls.n	8002fb4 <StartMode+0x794>
					  //clique sur luminosité
				  {
					  menu_couleur = 2;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
					  if(myMutexLCDHandle != NULL)
 8002f7c:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <StartMode+0x8b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d04a      	beq.n	800301a <StartMode+0x7fa>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002f84:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <StartMode+0x8b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f009 fe17 	bl	800cbc0 <xQueueSemaphoreTake>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d140      	bne.n	800301a <StartMode+0x7fa>
						   {
							   AfficheLuminosite(ton, sat);
 8002f98:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 8002f9c:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 8002fa0:	f7ff fa0a 	bl	80023b8 <AfficheLuminosite>
							   xSemaphoreGive(myMutexLCDHandle);
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <StartMode+0x8b8>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	f009 fd05 	bl	800c9bc <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 8002fb2:	e032      	b.n	800301a <StartMode+0x7fa>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]<310) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]>170))
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <StartMode+0x8b0>)
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002fbc:	f080 8144 	bcs.w	8003248 <StartMode+0xa28>
 8002fc0:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <StartMode+0x8b0>)
 8002fc2:	899b      	ldrh	r3, [r3, #12]
 8002fc4:	2bfa      	cmp	r3, #250	; 0xfa
 8002fc6:	f240 813f 	bls.w	8003248 <StartMode+0xa28>
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <StartMode+0x8b0>)
 8002fcc:	885b      	ldrh	r3, [r3, #2]
 8002fce:	2baa      	cmp	r3, #170	; 0xaa
 8002fd0:	f240 813a 	bls.w	8003248 <StartMode+0xa28>
					  //clique sur saturation
				  {
					  menu_couleur = 3;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
					  if(myMutexLCDHandle != NULL)
 8002fda:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <StartMode+0x8b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8132 	beq.w	8003248 <StartMode+0xa28>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002fe4:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <StartMode+0x8b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fec:	4618      	mov	r0, r3
 8002fee:	f009 fde7 	bl	800cbc0 <xQueueSemaphoreTake>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 8127 	bne.w	8003248 <StartMode+0xa28>
						   {
							   AfficheSaturation(ton, lum);
 8002ffa:	edd7 0a47 	vldr	s1, [r7, #284]	; 0x11c
 8002ffe:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 8003002:	f7ff fa2d 	bl	8002460 <AfficheSaturation>
							   xSemaphoreGive(myMutexLCDHandle);
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <StartMode+0x8b8>)
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	f009 fcd4 	bl	800c9bc <xQueueGenericSend>
						   }
					  }
				  }
			  }
			  break;
 8003014:	e118      	b.n	8003248 <StartMode+0xa28>
					  if(myMutexLCDHandle != NULL)
 8003016:	bf00      	nop
 8003018:	e116      	b.n	8003248 <StartMode+0xa28>
					  if(myMutexLCDHandle != NULL)
 800301a:	bf00      	nop
			  break;
 800301c:	e114      	b.n	8003248 <StartMode+0xa28>
		  /*
		   * on a affiché l'arc en ciel des tonalités, l'utilisateur choisit maintenant celle-ci.
		   */
		  case 1:
			  BSP_TS_GetState(&TS_State);
 800301e:	482c      	ldr	r0, [pc, #176]	; (80030d0 <StartMode+0x8b0>)
 8003020:	f001 feee 	bl	8004e00 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003024:	e04f      	b.n	80030c6 <StartMode+0x8a6>
			  {
				  if((TS_State.touchX[0]>=50) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<433))
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <StartMode+0x8b0>)
 8003028:	885b      	ldrh	r3, [r3, #2]
 800302a:	2b31      	cmp	r3, #49	; 0x31
 800302c:	d942      	bls.n	80030b4 <StartMode+0x894>
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <StartMode+0x8b0>)
 8003030:	899b      	ldrh	r3, [r3, #12]
 8003032:	2bfa      	cmp	r3, #250	; 0xfa
 8003034:	d93e      	bls.n	80030b4 <StartMode+0x894>
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <StartMode+0x8b0>)
 8003038:	885b      	ldrh	r3, [r3, #2]
 800303a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800303e:	d839      	bhi.n	80030b4 <StartMode+0x894>
				  {
					  ton = FindTonalite(TS_State.touchX[0]-50);
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <StartMode+0x8b0>)
 8003042:	885b      	ldrh	r3, [r3, #2]
 8003044:	3b32      	subs	r3, #50	; 0x32
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fb4b 	bl	80026e4 <FindTonalite>
 800304e:	ed87 0a48 	vstr	s0, [r7, #288]	; 0x120
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8003052:	ed97 1a47 	vldr	s2, [r7, #284]	; 0x11c
 8003056:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 800305a:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 800305e:	f7ff fa53 	bl	8002508 <FindCouleur>
 8003062:	4602      	mov	r2, r0
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <StartMode+0x8b4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800306c:	4313      	orrs	r3, r2
 800306e:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <StartMode+0x8b4>)
 8003070:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <StartMode+0x8b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01c      	beq.n	80030b4 <StartMode+0x894>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <StartMode+0x8b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2164      	movs	r1, #100	; 0x64
 8003080:	4618      	mov	r0, r3
 8003082:	f009 fd9d 	bl	800cbc0 <xQueueSemaphoreTake>
 8003086:	4603      	mov	r3, r0
 8003088:	2b01      	cmp	r3, #1
 800308a:	d113      	bne.n	80030b4 <StartMode+0x894>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <StartMode+0x8b4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fde9 	bl	8003c6c <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 800309a:	2214      	movs	r2, #20
 800309c:	2119      	movs	r1, #25
 800309e:	f240 10c7 	movw	r0, #455	; 0x1c7
 80030a2:	f001 f9ff 	bl	80044a4 <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <StartMode+0x8b8>)
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	2200      	movs	r2, #0
 80030ae:	2100      	movs	r1, #0
 80030b0:	f009 fc84 	bl	800c9bc <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				  sous_menu = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				  BSP_TS_GetState(&TS_State);
 80030c0:	4803      	ldr	r0, [pc, #12]	; (80030d0 <StartMode+0x8b0>)
 80030c2:	f001 fe9d 	bl	8004e00 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 80030c6:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <StartMode+0x8b0>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ab      	bne.n	8003026 <StartMode+0x806>
			  }
			  break;
 80030ce:	e0bc      	b.n	800324a <StartMode+0xa2a>
 80030d0:	2000134c 	.word	0x2000134c
 80030d4:	20009b00 	.word	0x20009b00
 80030d8:	200098b0 	.word	0x200098b0
 80030dc:	2000101a 	.word	0x2000101a
 80030e0:	ffff0000 	.word	0xffff0000
		  /*
		   * On a Affiché le dégradé de luminosité, l'utilisateur chosit maintenant celle-ci
		   */
		  case 2:
			  BSP_TS_GetState(&TS_State);
 80030e4:	488f      	ldr	r0, [pc, #572]	; (8003324 <StartMode+0xb04>)
 80030e6:	f001 fe8b 	bl	8004e00 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 80030ea:	e04f      	b.n	800318c <StartMode+0x96c>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=356))
 80030ec:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <StartMode+0xb04>)
 80030ee:	885b      	ldrh	r3, [r3, #2]
 80030f0:	2b63      	cmp	r3, #99	; 0x63
 80030f2:	d942      	bls.n	800317a <StartMode+0x95a>
 80030f4:	4b8b      	ldr	r3, [pc, #556]	; (8003324 <StartMode+0xb04>)
 80030f6:	899b      	ldrh	r3, [r3, #12]
 80030f8:	2bfa      	cmp	r3, #250	; 0xfa
 80030fa:	d93e      	bls.n	800317a <StartMode+0x95a>
 80030fc:	4b89      	ldr	r3, [pc, #548]	; (8003324 <StartMode+0xb04>)
 80030fe:	885b      	ldrh	r3, [r3, #2]
 8003100:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8003104:	d839      	bhi.n	800317a <StartMode+0x95a>
				  {
					  lum = FindLuminosite(TS_State.touchX[0]-100);
 8003106:	4b87      	ldr	r3, [pc, #540]	; (8003324 <StartMode+0xb04>)
 8003108:	885b      	ldrh	r3, [r3, #2]
 800310a:	3b64      	subs	r3, #100	; 0x64
 800310c:	b29b      	uxth	r3, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fb0e 	bl	8002730 <FindLuminosite>
 8003114:	ed87 0a47 	vstr	s0, [r7, #284]	; 0x11c
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8003118:	ed97 1a47 	vldr	s2, [r7, #284]	; 0x11c
 800311c:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 8003120:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 8003124:	f7ff f9f0 	bl	8002508 <FindCouleur>
 8003128:	4602      	mov	r2, r0
 800312a:	4b7f      	ldr	r3, [pc, #508]	; (8003328 <StartMode+0xb08>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003132:	4313      	orrs	r3, r2
 8003134:	4a7c      	ldr	r2, [pc, #496]	; (8003328 <StartMode+0xb08>)
 8003136:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8003138:	4b7c      	ldr	r3, [pc, #496]	; (800332c <StartMode+0xb0c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01c      	beq.n	800317a <StartMode+0x95a>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8003140:	4b7a      	ldr	r3, [pc, #488]	; (800332c <StartMode+0xb0c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2164      	movs	r1, #100	; 0x64
 8003146:	4618      	mov	r0, r3
 8003148:	f009 fd3a 	bl	800cbc0 <xQueueSemaphoreTake>
 800314c:	4603      	mov	r3, r0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d113      	bne.n	800317a <StartMode+0x95a>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8003152:	4b75      	ldr	r3, [pc, #468]	; (8003328 <StartMode+0xb08>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fd86 	bl	8003c6c <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8003160:	2214      	movs	r2, #20
 8003162:	2119      	movs	r1, #25
 8003164:	f240 10c7 	movw	r0, #455	; 0x1c7
 8003168:	f001 f99c 	bl	80044a4 <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <StartMode+0xb0c>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	2300      	movs	r3, #0
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	f009 fc21 	bl	800c9bc <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				  sous_menu = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				  BSP_TS_GetState(&TS_State);
 8003186:	4867      	ldr	r0, [pc, #412]	; (8003324 <StartMode+0xb04>)
 8003188:	f001 fe3a 	bl	8004e00 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 800318c:	4b65      	ldr	r3, [pc, #404]	; (8003324 <StartMode+0xb04>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ab      	bne.n	80030ec <StartMode+0x8cc>
			  }
			  break;
 8003194:	e059      	b.n	800324a <StartMode+0xa2a>
		  /*
		   * On a Affiché le dégradé de saturation, l'utilisateur chosit maintenant celle-ci
		   */
		  case 3:
			  BSP_TS_GetState(&TS_State);
 8003196:	4863      	ldr	r0, [pc, #396]	; (8003324 <StartMode+0xb04>)
 8003198:	f001 fe32 	bl	8004e00 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 800319c:	e04f      	b.n	800323e <StartMode+0xa1e>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=356))
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <StartMode+0xb04>)
 80031a0:	885b      	ldrh	r3, [r3, #2]
 80031a2:	2b63      	cmp	r3, #99	; 0x63
 80031a4:	d942      	bls.n	800322c <StartMode+0xa0c>
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <StartMode+0xb04>)
 80031a8:	899b      	ldrh	r3, [r3, #12]
 80031aa:	2bfa      	cmp	r3, #250	; 0xfa
 80031ac:	d93e      	bls.n	800322c <StartMode+0xa0c>
 80031ae:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <StartMode+0xb04>)
 80031b0:	885b      	ldrh	r3, [r3, #2]
 80031b2:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 80031b6:	d839      	bhi.n	800322c <StartMode+0xa0c>
				  {
					  sat = FindSaturation(TS_State.touchX[0]-100);
 80031b8:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <StartMode+0xb04>)
 80031ba:	885b      	ldrh	r3, [r3, #2]
 80031bc:	3b64      	subs	r3, #100	; 0x64
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff facf 	bl	8002764 <FindSaturation>
 80031c6:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 80031ca:	ed97 1a47 	vldr	s2, [r7, #284]	; 0x11c
 80031ce:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 80031d2:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 80031d6:	f7ff f997 	bl	8002508 <FindCouleur>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b52      	ldr	r3, [pc, #328]	; (8003328 <StartMode+0xb08>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	4313      	orrs	r3, r2
 80031e6:	4a50      	ldr	r2, [pc, #320]	; (8003328 <StartMode+0xb08>)
 80031e8:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 80031ea:	4b50      	ldr	r3, [pc, #320]	; (800332c <StartMode+0xb0c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01c      	beq.n	800322c <StartMode+0xa0c>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <StartMode+0xb0c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	4618      	mov	r0, r3
 80031fa:	f009 fce1 	bl	800cbc0 <xQueueSemaphoreTake>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b01      	cmp	r3, #1
 8003202:	d113      	bne.n	800322c <StartMode+0xa0c>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8003204:	4b48      	ldr	r3, [pc, #288]	; (8003328 <StartMode+0xb08>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fd2d 	bl	8003c6c <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8003212:	2214      	movs	r2, #20
 8003214:	2119      	movs	r1, #25
 8003216:	f240 10c7 	movw	r0, #455	; 0x1c7
 800321a:	f001 f943 	bl	80044a4 <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <StartMode+0xb0c>)
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	2300      	movs	r3, #0
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	f009 fbc8 	bl	800c9bc <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				  sous_menu = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				  BSP_TS_GetState(&TS_State);
 8003238:	483a      	ldr	r0, [pc, #232]	; (8003324 <StartMode+0xb04>)
 800323a:	f001 fde1 	bl	8004e00 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <StartMode+0xb04>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ab      	bne.n	800319e <StartMode+0x97e>
			  }
			  break;
 8003246:	e000      	b.n	800324a <StartMode+0xa2a>
			  break;
 8003248:	bf00      	nop
		  }
		  if(sous_menu==0) etat = 1;
 800324a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 80f0 	bne.w	8003434 <StartMode+0xc14>
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <StartMode+0xb10>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
		  break;
 800325a:	e0eb      	b.n	8003434 <StartMode+0xc14>
	  /*
	   * etat de sélection de la taille
	   */
	  case 6 :
		  if(sous_menu == 0)
 800325c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003260:	2b00      	cmp	r3, #0
 8003262:	d158      	bne.n	8003316 <StartMode+0xaf6>
		  {
			  if(myMutexLCDHandle != NULL)
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <StartMode+0xb0c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d054      	beq.n	8003316 <StartMode+0xaf6>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <StartMode+0xb0c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003274:	4618      	mov	r0, r3
 8003276:	f009 fca3 	bl	800cbc0 <xQueueSemaphoreTake>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d14a      	bne.n	8003316 <StartMode+0xaf6>
				   {
					   BSP_LCD_SelectLayer(1);
 8003280:	2001      	movs	r0, #1
 8003282:	f000 fce3 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003286:	f04f 30ff 	mov.w	r0, #4294967295
 800328a:	f000 fcef 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 800328e:	2315      	movs	r3, #21
 8003290:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003294:	21fb      	movs	r1, #251	; 0xfb
 8003296:	2000      	movs	r0, #0
 8003298:	f001 f88a 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800329c:	4825      	ldr	r0, [pc, #148]	; (8003334 <StartMode+0xb14>)
 800329e:	f000 fce5 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_taille, LEFT_MODE);
 80032a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032a6:	2303      	movs	r3, #3
 80032a8:	21fc      	movs	r1, #252	; 0xfc
 80032aa:	2000      	movs	r0, #0
 80032ac:	f000 fdac 	bl	8003e08 <BSP_LCD_DisplayStringAt>
					   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80032b0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80032b4:	f000 fcda 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_DrawHLine(220, 261, 240);
 80032b8:	22f0      	movs	r2, #240	; 0xf0
 80032ba:	f240 1105 	movw	r1, #261	; 0x105
 80032be:	20dc      	movs	r0, #220	; 0xdc
 80032c0:	f000 fe7e 	bl	8003fc0 <BSP_LCD_DrawHLine>
					   BSP_LCD_DrawVLine(220, 252, 18);
 80032c4:	2212      	movs	r2, #18
 80032c6:	21fc      	movs	r1, #252	; 0xfc
 80032c8:	20dc      	movs	r0, #220	; 0xdc
 80032ca:	f000 fed7 	bl	800407c <BSP_LCD_DrawVLine>
					   BSP_LCD_DrawVLine(460, 252, 18);
 80032ce:	2212      	movs	r2, #18
 80032d0:	21fc      	movs	r1, #252	; 0xfc
 80032d2:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80032d6:	f000 fed1 	bl	800407c <BSP_LCD_DrawVLine>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80032da:	4816      	ldr	r0, [pc, #88]	; (8003334 <StartMode+0xb14>)
 80032dc:	f000 fcc6 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(220+12*radius, 252, 5, 18);
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <StartMode+0xb18>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	0052      	lsls	r2, r2, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	33dc      	adds	r3, #220	; 0xdc
 80032f2:	b298      	uxth	r0, r3
 80032f4:	2312      	movs	r3, #18
 80032f6:	2205      	movs	r2, #5
 80032f8:	21fc      	movs	r1, #252	; 0xfc
 80032fa:	f001 f859 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(couleur);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <StartMode+0xb08>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fcb2 	bl	8003c6c <BSP_LCD_SetTextColor>
					   xSemaphoreGive(myMutexLCDHandle);
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <StartMode+0xb0c>)
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	f009 fb53 	bl	800c9bc <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <StartMode+0xb04>)
 800331e:	f001 fd6f 	bl	8004e00 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8003322:	e071      	b.n	8003408 <StartMode+0xbe8>
 8003324:	2000134c 	.word	0x2000134c
 8003328:	20009b00 	.word	0x20009b00
 800332c:	200098b0 	.word	0x200098b0
 8003330:	2000101a 	.word	0x2000101a
 8003334:	ffff0000 	.word	0xffff0000
 8003338:	20001018 	.word	0x20001018
		  {
			  if((TS_State.touchX[0]>220) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<460))
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <StartMode+0xc2c>)
 800333e:	885b      	ldrh	r3, [r3, #2]
 8003340:	2bdc      	cmp	r3, #220	; 0xdc
 8003342:	d95b      	bls.n	80033fc <StartMode+0xbdc>
 8003344:	4b41      	ldr	r3, [pc, #260]	; (800344c <StartMode+0xc2c>)
 8003346:	899b      	ldrh	r3, [r3, #12]
 8003348:	2bfa      	cmp	r3, #250	; 0xfa
 800334a:	d957      	bls.n	80033fc <StartMode+0xbdc>
 800334c:	4b3f      	ldr	r3, [pc, #252]	; (800344c <StartMode+0xc2c>)
 800334e:	885b      	ldrh	r3, [r3, #2]
 8003350:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8003354:	d252      	bcs.n	80033fc <StartMode+0xbdc>
			  {
				  radius_prec = radius;
 8003356:	4b3e      	ldr	r3, [pc, #248]	; (8003450 <StartMode+0xc30>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				  radius = (TS_State.touchX[0]-208)/12;
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <StartMode+0xc2c>)
 8003360:	885b      	ldrh	r3, [r3, #2]
 8003362:	3bd0      	subs	r3, #208	; 0xd0
 8003364:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <StartMode+0xc34>)
 8003366:	fb82 1203 	smull	r1, r2, r2, r3
 800336a:	1052      	asrs	r2, r2, #1
 800336c:	17db      	asrs	r3, r3, #31
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b37      	ldr	r3, [pc, #220]	; (8003450 <StartMode+0xc30>)
 8003374:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <StartMode+0xc38>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03e      	beq.n	80033fc <StartMode+0xbdc>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <StartMode+0xc38>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	4618      	mov	r0, r3
 8003386:	f009 fc1b 	bl	800cbc0 <xQueueSemaphoreTake>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d135      	bne.n	80033fc <StartMode+0xbdc>
					   {
						   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f000 fc6a 	bl	8003c6c <BSP_LCD_SetTextColor>
						   BSP_LCD_FillRect(220+12*radius_prec, 252, 5, 18);
 8003398:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	0052      	lsls	r2, r2, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	33dc      	adds	r3, #220	; 0xdc
 80033aa:	b298      	uxth	r0, r3
 80033ac:	2312      	movs	r3, #18
 80033ae:	2205      	movs	r2, #5
 80033b0:	21fc      	movs	r1, #252	; 0xfc
 80033b2:	f000 fffd 	bl	80043b0 <BSP_LCD_FillRect>
						   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80033b6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80033ba:	f000 fc57 	bl	8003c6c <BSP_LCD_SetTextColor>
						   BSP_LCD_DrawHLine(220, 261, 240);
 80033be:	22f0      	movs	r2, #240	; 0xf0
 80033c0:	f240 1105 	movw	r1, #261	; 0x105
 80033c4:	20dc      	movs	r0, #220	; 0xdc
 80033c6:	f000 fdfb 	bl	8003fc0 <BSP_LCD_DrawHLine>
						   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80033ca:	4824      	ldr	r0, [pc, #144]	; (800345c <StartMode+0xc3c>)
 80033cc:	f000 fc4e 	bl	8003c6c <BSP_LCD_SetTextColor>
						   BSP_LCD_FillRect(220+12*radius, 252, 5, 18);
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <StartMode+0xc30>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	0052      	lsls	r2, r2, #1
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	33dc      	adds	r3, #220	; 0xdc
 80033e2:	b298      	uxth	r0, r3
 80033e4:	2312      	movs	r3, #18
 80033e6:	2205      	movs	r2, #5
 80033e8:	21fc      	movs	r1, #252	; 0xfc
 80033ea:	f000 ffe1 	bl	80043b0 <BSP_LCD_FillRect>
						   xSemaphoreGive(myMutexLCDHandle);
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <StartMode+0xc38>)
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	2200      	movs	r2, #0
 80033f6:	2100      	movs	r1, #0
 80033f8:	f009 fae0 	bl	800c9bc <xQueueGenericSend>
					   }
				   }
			  }
			  sous_menu = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  BSP_TS_GetState(&TS_State);
 8003402:	4812      	ldr	r0, [pc, #72]	; (800344c <StartMode+0xc2c>)
 8003404:	f001 fcfc 	bl	8004e00 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <StartMode+0xc2c>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d195      	bne.n	800333c <StartMode+0xb1c>
		  }
		  if(sous_menu==0) etat = 1;
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10f      	bne.n	8003438 <StartMode+0xc18>
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <StartMode+0xc40>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
		  break;
 800341e:	e00b      	b.n	8003438 <StartMode+0xc18>
	  /*
	   * etat de clear de la page de dessin.
	   */
	  case 7 :
		  etat = 1;
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <StartMode+0xc40>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
		  break;
 8003426:	e008      	b.n	800343a <StartMode+0xc1a>
		  break;
 8003428:	bf00      	nop
 800342a:	e006      	b.n	800343a <StartMode+0xc1a>
		  break;
 800342c:	bf00      	nop
 800342e:	e004      	b.n	800343a <StartMode+0xc1a>
		  break;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <StartMode+0xc1a>
		  break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <StartMode+0xc1a>
		  break;
 8003438:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 800343a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	4618      	mov	r0, r3
 8003442:	f009 ff71 	bl	800d328 <vTaskDelayUntil>
	  switch(etat)
 8003446:	f7ff ba58 	b.w	80028fa <StartMode+0xda>
 800344a:	bf00      	nop
 800344c:	2000134c 	.word	0x2000134c
 8003450:	20001018 	.word	0x20001018
 8003454:	2aaaaaab 	.word	0x2aaaaaab
 8003458:	200098b0 	.word	0x200098b0
 800345c:	ffff0000 	.word	0xffff0000
 8003460:	2000101a 	.word	0x2000101a

08003464 <StartPeindre>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPeindre */
void StartPeindre(void const * argument)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPeindre */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800346c:	f00a f920 	bl	800d6b0 <xTaskGetTickCount>
 8003470:	4603      	mov	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]
	static TS_StateTypeDef  TS_State;
	/* Infinite loop */
	for(;;)
	{
	  BSP_TS_GetState(&TS_State);
 8003474:	481c      	ldr	r0, [pc, #112]	; (80034e8 <StartPeindre+0x84>)
 8003476:	f001 fcc3 	bl	8004e00 <BSP_TS_GetState>
	  if(TS_State.touchDetected && (TestConditionBord(TS_State.touchX[0], TS_State.touchY[0], radius)))
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <StartPeindre+0x84>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02a      	beq.n	80034d8 <StartPeindre+0x74>
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <StartPeindre+0x84>)
 8003484:	8858      	ldrh	r0, [r3, #2]
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <StartPeindre+0x84>)
 8003488:	8999      	ldrh	r1, [r3, #12]
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <StartPeindre+0x88>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	f7fe fdcd 	bl	8002030 <TestConditionBord>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01d      	beq.n	80034d8 <StartPeindre+0x74>
	  {
		  if(myMutexLCDHandle != NULL)
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <StartPeindre+0x8c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d019      	beq.n	80034d8 <StartPeindre+0x74>
		   {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <StartPeindre+0x8c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2101      	movs	r1, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f009 fb88 	bl	800cbc0 <xQueueSemaphoreTake>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d110      	bne.n	80034d8 <StartPeindre+0x74>
			   {
				   LCD_PAINTBRUSH(TS_State.touchX[0],TS_State.touchY[0],radius);
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <StartPeindre+0x84>)
 80034b8:	8858      	ldrh	r0, [r3, #2]
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <StartPeindre+0x84>)
 80034bc:	8999      	ldrh	r1, [r3, #12]
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <StartPeindre+0x88>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	f7fe fddd 	bl	8002084 <LCD_PAINTBRUSH>
				   xSemaphoreGive(myMutexLCDHandle);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <StartPeindre+0x8c>)
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	2200      	movs	r2, #0
 80034d2:	2100      	movs	r1, #0
 80034d4:	f009 fa72 	bl	800c9bc <xQueueGenericSend>
			   }
		   }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 1);
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f009 ff22 	bl	800d328 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 80034e4:	e7c6      	b.n	8003474 <StartPeindre+0x10>
 80034e6:	bf00      	nop
 80034e8:	20001378 	.word	0x20001378
 80034ec:	20001018 	.word	0x20001018
 80034f0:	200098b0 	.word	0x200098b0

080034f4 <StartTaskEtat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEtat */
void StartTaskEtat(void const * argument)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskEtat */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80034fc:	f00a f8d8 	bl	800d6b0 <xTaskGetTickCount>
 8003500:	4603      	mov	r3, r0
 8003502:	61bb      	str	r3, [r7, #24]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003504:	f107 0308 	add.w	r3, r7, #8
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003512:	2301      	movs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
	sConfig.Channel = ADC_CHANNEL_8;
 800351a:	2308      	movs	r3, #8
 800351c:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4619      	mov	r1, r3
 8003524:	486b      	ldr	r0, [pc, #428]	; (80036d4 <StartTaskEtat+0x1e0>)
 8003526:	f002 fea5 	bl	8006274 <HAL_ADC_ConfigChannel>
	char etat_prec = 2;
 800352a:	2302      	movs	r3, #2
 800352c:	77fb      	strb	r3, [r7, #31]
	uint16_t joystick_h;
	/* Infinite loop */
	for(;;)
	{
	  if(etat == 0)
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <StartTaskEtat+0x1e4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80c5 	bne.w	80036c2 <StartTaskEtat+0x1ce>
	  {
		  HAL_ADC_Start(&hadc1);
 8003538:	4868      	ldr	r0, [pc, #416]	; (80036dc <StartTaskEtat+0x1e8>)
 800353a:	f002 fd49 	bl	8005fd0 <HAL_ADC_Start>
		  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 800353e:	bf00      	nop
 8003540:	2164      	movs	r1, #100	; 0x64
 8003542:	4866      	ldr	r0, [pc, #408]	; (80036dc <StartTaskEtat+0x1e8>)
 8003544:	f002 fe04 	bl	8006150 <HAL_ADC_PollForConversion>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f8      	bne.n	8003540 <StartTaskEtat+0x4c>
		  joystick_h = HAL_ADC_GetValue(&hadc1);
 800354e:	4863      	ldr	r0, [pc, #396]	; (80036dc <StartTaskEtat+0x1e8>)
 8003550:	f002 fe82 	bl	8006258 <HAL_ADC_GetValue>
 8003554:	4603      	mov	r3, r0
 8003556:	83bb      	strh	r3, [r7, #28]
		  if(joystick_h > 2500)
 8003558:	8bbb      	ldrh	r3, [r7, #28]
 800355a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800355e:	4293      	cmp	r3, r2
 8003560:	d956      	bls.n	8003610 <StartTaskEtat+0x11c>
		  {
			  etat_prec = etat_int;
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <StartTaskEtat+0x1ec>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	77fb      	strb	r3, [r7, #31]
			  etat_int -= 1;
 8003568:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <StartTaskEtat+0x1ec>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <StartTaskEtat+0x1ec>)
 8003572:	701a      	strb	r2, [r3, #0]
			  if(etat_int < 2) etat_int = etat_max;
 8003574:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <StartTaskEtat+0x1ec>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d802      	bhi.n	8003582 <StartTaskEtat+0x8e>
 800357c:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <StartTaskEtat+0x1ec>)
 800357e:	2206      	movs	r2, #6
 8003580:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 8003582:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <StartTaskEtat+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 809b 	beq.w	80036c2 <StartTaskEtat+0x1ce>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 800358c:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <StartTaskEtat+0x1f0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f009 fb14 	bl	800cbc0 <xQueueSemaphoreTake>
 8003598:	4603      	mov	r3, r0
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 8091 	bne.w	80036c2 <StartTaskEtat+0x1ce>
				   {
					   BSP_LCD_SelectLayer(1);
 80035a0:	2001      	movs	r0, #1
 80035a2:	f000 fb53 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80035a6:	f04f 30ff 	mov.w	r0, #4294967295
 80035aa:	f000 fb5f 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	00d2      	lsls	r2, r2, #3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	00d2      	lsls	r2, r2, #3
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3baa      	subs	r3, #170	; 0xaa
 80035c4:	b298      	uxth	r0, r3
 80035c6:	2305      	movs	r3, #5
 80035c8:	2223      	movs	r2, #35	; 0x23
 80035ca:	f240 1109 	movw	r1, #265	; 0x109
 80035ce:	f000 feef 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF);
 80035d2:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80035d6:	f000 fb49 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 80035da:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <StartTaskEtat+0x1ec>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	00d2      	lsls	r2, r2, #3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	00d2      	lsls	r2, r2, #3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3baa      	subs	r3, #170	; 0xaa
 80035f2:	b298      	uxth	r0, r3
 80035f4:	2305      	movs	r3, #5
 80035f6:	2223      	movs	r2, #35	; 0x23
 80035f8:	f240 1109 	movw	r1, #265	; 0x109
 80035fc:	f000 fed8 	bl	80043b0 <BSP_LCD_FillRect>
					   xSemaphoreGive(myMutexLCDHandle);
 8003600:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <StartTaskEtat+0x1f0>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	2200      	movs	r2, #0
 8003608:	2100      	movs	r1, #0
 800360a:	f009 f9d7 	bl	800c9bc <xQueueGenericSend>
 800360e:	e058      	b.n	80036c2 <StartTaskEtat+0x1ce>
				   }
			   }
		  }
		  else if(joystick_h < 1500)
 8003610:	8bbb      	ldrh	r3, [r7, #28]
 8003612:	f240 52db 	movw	r2, #1499	; 0x5db
 8003616:	4293      	cmp	r3, r2
 8003618:	d853      	bhi.n	80036c2 <StartTaskEtat+0x1ce>
		  {
			  etat_prec = etat_int;
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <StartTaskEtat+0x1ec>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	77fb      	strb	r3, [r7, #31]
			  etat_int += 1;
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <StartTaskEtat+0x1ec>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <StartTaskEtat+0x1ec>)
 800362a:	701a      	strb	r2, [r3, #0]
			  if (etat_int > etat_max) etat_int = 2;
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <StartTaskEtat+0x1ec>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d902      	bls.n	800363a <StartTaskEtat+0x146>
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <StartTaskEtat+0x1ec>)
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 800363a:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <StartTaskEtat+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03f      	beq.n	80036c2 <StartTaskEtat+0x1ce>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <StartTaskEtat+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f009 fab9 	bl	800cbc0 <xQueueSemaphoreTake>
 800364e:	4603      	mov	r3, r0
 8003650:	2b01      	cmp	r3, #1
 8003652:	d136      	bne.n	80036c2 <StartTaskEtat+0x1ce>
				   {
					   BSP_LCD_SelectLayer(1);
 8003654:	2001      	movs	r0, #1
 8003656:	f000 faf9 	bl	8003c4c <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800365a:	f04f 30ff 	mov.w	r0, #4294967295
 800365e:	f000 fb05 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 8003662:	7ffb      	ldrb	r3, [r7, #31]
 8003664:	b29b      	uxth	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	00d2      	lsls	r2, r2, #3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	461a      	mov	r2, r3
 800366e:	00d2      	lsls	r2, r2, #3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	3baa      	subs	r3, #170	; 0xaa
 8003678:	b298      	uxth	r0, r3
 800367a:	2305      	movs	r3, #5
 800367c:	2223      	movs	r2, #35	; 0x23
 800367e:	f240 1109 	movw	r1, #265	; 0x109
 8003682:	f000 fe95 	bl	80043b0 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 8003686:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800368a:	f000 faef 	bl	8003c6c <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <StartTaskEtat+0x1ec>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	00d2      	lsls	r2, r2, #3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	461a      	mov	r2, r3
 800369c:	00d2      	lsls	r2, r2, #3
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3baa      	subs	r3, #170	; 0xaa
 80036a6:	b298      	uxth	r0, r3
 80036a8:	2305      	movs	r3, #5
 80036aa:	2223      	movs	r2, #35	; 0x23
 80036ac:	f240 1109 	movw	r1, #265	; 0x109
 80036b0:	f000 fe7e 	bl	80043b0 <BSP_LCD_FillRect>
					   xSemaphoreGive(myMutexLCDHandle);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <StartTaskEtat+0x1f0>)
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	f009 f97d 	bl	800c9bc <xQueueGenericSend>
				   }
			   }
		  }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 300);
 80036c2:	f107 0318 	add.w	r3, r7, #24
 80036c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80036ca:	4618      	mov	r0, r3
 80036cc:	f009 fe2c 	bl	800d328 <vTaskDelayUntil>
	  if(etat == 0)
 80036d0:	e72d      	b.n	800352e <StartTaskEtat+0x3a>
 80036d2:	bf00      	nop
 80036d4:	20009a24 	.word	0x20009a24
 80036d8:	2000101a 	.word	0x2000101a
 80036dc:	200099dc 	.word	0x200099dc
 80036e0:	2000101b 	.word	0x2000101b
 80036e4:	200098b0 	.word	0x200098b0

080036e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036fa:	f002 fbe3 	bl	8005ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40001000 	.word	0x40001000

0800370c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003710:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003712:	e7fe      	b.n	8003712 <Error_Handler+0x6>

08003714 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a51      	ldr	r2, [pc, #324]	; (8003864 <I2Cx_MspInit+0x150>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d14d      	bne.n	80037c0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <I2Cx_MspInit+0x154>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	4a4f      	ldr	r2, [pc, #316]	; (8003868 <I2Cx_MspInit+0x154>)
 800372a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372e:	6313      	str	r3, [r2, #48]	; 0x30
 8003730:	4b4d      	ldr	r3, [pc, #308]	; (8003868 <I2Cx_MspInit+0x154>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003740:	2312      	movs	r3, #18
 8003742:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003748:	2302      	movs	r3, #2
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800374c:	2304      	movs	r3, #4
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003750:	f107 031c 	add.w	r3, r7, #28
 8003754:	4619      	mov	r1, r3
 8003756:	4845      	ldr	r0, [pc, #276]	; (800386c <I2Cx_MspInit+0x158>)
 8003758:	f003 fdc8 	bl	80072ec <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800375c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	4619      	mov	r1, r3
 8003768:	4840      	ldr	r0, [pc, #256]	; (800386c <I2Cx_MspInit+0x158>)
 800376a:	f003 fdbf 	bl	80072ec <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800376e:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <I2Cx_MspInit+0x154>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <I2Cx_MspInit+0x154>)
 8003774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <I2Cx_MspInit+0x154>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <I2Cx_MspInit+0x154>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a37      	ldr	r2, [pc, #220]	; (8003868 <I2Cx_MspInit+0x154>)
 800378c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003790:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003792:	4b35      	ldr	r3, [pc, #212]	; (8003868 <I2Cx_MspInit+0x154>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a34      	ldr	r2, [pc, #208]	; (8003868 <I2Cx_MspInit+0x154>)
 8003798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800379c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	210f      	movs	r1, #15
 80037a2:	2048      	movs	r0, #72	; 0x48
 80037a4:	f003 f862 	bl	800686c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80037a8:	2048      	movs	r0, #72	; 0x48
 80037aa:	f003 f87b 	bl	80068a4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	210f      	movs	r1, #15
 80037b2:	2049      	movs	r0, #73	; 0x49
 80037b4:	f003 f85a 	bl	800686c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80037b8:	2049      	movs	r0, #73	; 0x49
 80037ba:	f003 f873 	bl	80068a4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80037be:	e04d      	b.n	800385c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <I2Cx_MspInit+0x154>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <I2Cx_MspInit+0x154>)
 80037c6:	f043 0302 	orr.w	r3, r3, #2
 80037ca:	6313      	str	r3, [r2, #48]	; 0x30
 80037cc:	4b26      	ldr	r3, [pc, #152]	; (8003868 <I2Cx_MspInit+0x154>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80037d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037dc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80037de:	2312      	movs	r3, #18
 80037e0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80037e6:	2302      	movs	r3, #2
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80037ea:	2304      	movs	r3, #4
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	4619      	mov	r1, r3
 80037f4:	481e      	ldr	r0, [pc, #120]	; (8003870 <I2Cx_MspInit+0x15c>)
 80037f6:	f003 fd79 	bl	80072ec <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80037fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	4619      	mov	r1, r3
 8003806:	481a      	ldr	r0, [pc, #104]	; (8003870 <I2Cx_MspInit+0x15c>)
 8003808:	f003 fd70 	bl	80072ec <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <I2Cx_MspInit+0x154>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <I2Cx_MspInit+0x154>)
 8003812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003816:	6413      	str	r3, [r2, #64]	; 0x40
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <I2Cx_MspInit+0x154>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <I2Cx_MspInit+0x154>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <I2Cx_MspInit+0x154>)
 800382a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800382e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <I2Cx_MspInit+0x154>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <I2Cx_MspInit+0x154>)
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800383a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	210f      	movs	r1, #15
 8003840:	201f      	movs	r0, #31
 8003842:	f003 f813 	bl	800686c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003846:	201f      	movs	r0, #31
 8003848:	f003 f82c 	bl	80068a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	210f      	movs	r1, #15
 8003850:	2020      	movs	r0, #32
 8003852:	f003 f80b 	bl	800686c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003856:	2020      	movs	r0, #32
 8003858:	f003 f824 	bl	80068a4 <HAL_NVIC_EnableIRQ>
}
 800385c:	bf00      	nop
 800385e:	3730      	adds	r7, #48	; 0x30
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200013a4 	.word	0x200013a4
 8003868:	40023800 	.word	0x40023800
 800386c:	40021c00 	.word	0x40021c00
 8003870:	40020400 	.word	0x40020400

08003874 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f004 fb21 	bl	8007ec4 <HAL_I2C_GetState>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d125      	bne.n	80038d4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a14      	ldr	r2, [pc, #80]	; (80038dc <I2Cx_Init+0x68>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d103      	bne.n	8003898 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <I2Cx_Init+0x6c>)
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e002      	b.n	800389e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <I2Cx_Init+0x70>)
 800389c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <I2Cx_Init+0x74>)
 80038a2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff23 	bl	8003714 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f004 f80a 	bl	80078e8 <HAL_I2C_Init>
  }
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200013a4 	.word	0x200013a4
 80038e0:	40005c00 	.word	0x40005c00
 80038e4:	40005400 	.word	0x40005400
 80038e8:	40912732 	.word	0x40912732

080038ec <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	72fb      	strb	r3, [r7, #11]
 80038fe:	460b      	mov	r3, r1
 8003900:	813b      	strh	r3, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	b299      	uxth	r1, r3
 800390e:	88f8      	ldrh	r0, [r7, #6]
 8003910:	893a      	ldrh	r2, [r7, #8]
 8003912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003916:	9302      	str	r3, [sp, #8]
 8003918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	4603      	mov	r3, r0
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f004 f9b4 	bl	8007c90 <HAL_I2C_Mem_Read>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	4619      	mov	r1, r3
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f832 	bl	80039a0 <I2Cx_Error>
  }
  return status;    
 800393c:	7dfb      	ldrb	r3, [r7, #23]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b08a      	sub	sp, #40	; 0x28
 800394a:	af04      	add	r7, sp, #16
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	4608      	mov	r0, r1
 8003950:	4611      	mov	r1, r2
 8003952:	461a      	mov	r2, r3
 8003954:	4603      	mov	r3, r0
 8003956:	72fb      	strb	r3, [r7, #11]
 8003958:	460b      	mov	r3, r1
 800395a:	813b      	strh	r3, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	b299      	uxth	r1, r3
 8003968:	88f8      	ldrh	r0, [r7, #6]
 800396a:	893a      	ldrh	r2, [r7, #8]
 800396c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4603      	mov	r3, r0
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f004 f873 	bl	8007a68 <HAL_I2C_Mem_Write>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	4619      	mov	r1, r3
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f805 	bl	80039a0 <I2Cx_Error>
  }
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f004 f82b 	bl	8007a08 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff5e 	bl	8003874 <I2Cx_Init>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <TS_IO_Init+0x10>)
 80039c6:	f7ff ff55 	bl	8003874 <I2Cx_Init>
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200013a4 	.word	0x200013a4

080039d4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af02      	add	r7, sp, #8
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
 80039de:	460b      	mov	r3, r1
 80039e0:	71bb      	strb	r3, [r7, #6]
 80039e2:	4613      	mov	r3, r2
 80039e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80039e6:	79bb      	ldrb	r3, [r7, #6]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	79f9      	ldrb	r1, [r7, #7]
 80039ec:	2301      	movs	r3, #1
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	1d7b      	adds	r3, r7, #5
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2301      	movs	r3, #1
 80039f6:	4803      	ldr	r0, [pc, #12]	; (8003a04 <TS_IO_Write+0x30>)
 80039f8:	f7ff ffa5 	bl	8003946 <I2Cx_WriteMultiple>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200013a4 	.word	0x200013a4

08003a08 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	4603      	mov	r3, r0
 8003a10:	460a      	mov	r2, r1
 8003a12:	71fb      	strb	r3, [r7, #7]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003a1c:	79bb      	ldrb	r3, [r7, #6]
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	79f9      	ldrb	r1, [r7, #7]
 8003a22:	2301      	movs	r3, #1
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	f107 030f 	add.w	r3, r7, #15
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4804      	ldr	r0, [pc, #16]	; (8003a40 <TS_IO_Read+0x38>)
 8003a30:	f7ff ff5c 	bl	80038ec <I2Cx_ReadMultiple>

  return read_value;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200013a4 	.word	0x200013a4

08003a44 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f002 fa59 	bl	8005f04 <HAL_Delay>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a62:	2228      	movs	r2, #40	; 0x28
 8003a64:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a68:	2209      	movs	r2, #9
 8003a6a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a6e:	2235      	movs	r2, #53	; 0x35
 8003a70:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003a72:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a74:	220b      	movs	r2, #11
 8003a76:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a7a:	f240 121b 	movw	r2, #283	; 0x11b
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a82:	f240 2215 	movw	r2, #533	; 0x215
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a8a:	f240 121d 	movw	r2, #285	; 0x11d
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a92:	f240 2235 	movw	r2, #565	; 0x235
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4823      	ldr	r0, [pc, #140]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003a9c:	f000 fe9a 	bl	80047d4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003aa2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003aa6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003aaa:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003aae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <BSP_LCD_Init+0xd0>)
 8003ae4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003ae6:	4810      	ldr	r0, [pc, #64]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003ae8:	f004 fe7e 	bl	80087e8 <HAL_LTDC_GetState>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003af2:	2100      	movs	r1, #0
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003af6:	f000 fd93 	bl	8004620 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003afa:	480b      	ldr	r0, [pc, #44]	; (8003b28 <BSP_LCD_Init+0xcc>)
 8003afc:	f004 fca4 	bl	8008448 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003b00:	2201      	movs	r2, #1
 8003b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b06:	480a      	ldr	r0, [pc, #40]	; (8003b30 <BSP_LCD_Init+0xd4>)
 8003b08:	f003 febc 	bl	8007884 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2108      	movs	r1, #8
 8003b10:	4808      	ldr	r0, [pc, #32]	; (8003b34 <BSP_LCD_Init+0xd8>)
 8003b12:	f003 feb7 	bl	8007884 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003b16:	f000 ff7d 	bl	8004a14 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003b1a:	4807      	ldr	r0, [pc, #28]	; (8003b38 <BSP_LCD_Init+0xdc>)
 8003b1c:	f000 f8d8 	bl	8003cd0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20009cac 	.word	0x20009cac
 8003b2c:	40016800 	.word	0x40016800
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40022800 	.word	0x40022800
 8003b38:	2000101c 	.word	0x2000101c

08003b3c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <BSP_LCD_GetXSize+0x20>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <BSP_LCD_GetXSize+0x24>)
 8003b46:	2134      	movs	r1, #52	; 0x34
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3360      	adds	r3, #96	; 0x60
 8003b50:	681b      	ldr	r3, [r3, #0]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20001430 	.word	0x20001430
 8003b60:	20009cac 	.word	0x20009cac

08003b64 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <BSP_LCD_GetYSize+0x20>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <BSP_LCD_GetYSize+0x24>)
 8003b6e:	2134      	movs	r1, #52	; 0x34
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3364      	adds	r3, #100	; 0x64
 8003b78:	681b      	ldr	r3, [r3, #0]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	20001430 	.word	0x20001430
 8003b88:	20009cac 	.word	0x20009cac

08003b8c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b090      	sub	sp, #64	; 0x40
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	6039      	str	r1, [r7, #0]
 8003b96:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003b9c:	f7ff ffce 	bl	8003b3c <BSP_LCD_GetXSize>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003ba8:	f7ff ffdc 	bl	8003b64 <BSP_LCD_GetYSize>
 8003bac:	4603      	mov	r3, r0
 8003bae:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003bb8:	23ff      	movs	r3, #255	; 0xff
 8003bba:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003bd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003bd8:	2307      	movs	r3, #7
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003bdc:	f7ff ffae 	bl	8003b3c <BSP_LCD_GetXSize>
 8003be0:	4603      	mov	r3, r0
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003be4:	f7ff ffbe 	bl	8003b64 <BSP_LCD_GetYSize>
 8003be8:	4603      	mov	r3, r0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4812      	ldr	r0, [pc, #72]	; (8003c40 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003bf6:	f004 fdb9 	bl	800876c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	4911      	ldr	r1, [pc, #68]	; (8003c44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3304      	adds	r3, #4
 8003c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	490c      	ldr	r1, [pc, #48]	; (8003c44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3308      	adds	r3, #8
 8003c20:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003c22:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	4907      	ldr	r1, [pc, #28]	; (8003c44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003c36:	601a      	str	r2, [r3, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	3740      	adds	r7, #64	; 0x40
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20009cac 	.word	0x20009cac
 8003c44:	20001434 	.word	0x20001434
 8003c48:	2000101c 	.word	0x2000101c

08003c4c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <BSP_LCD_SelectLayer+0x1c>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6013      	str	r3, [r2, #0]
} 
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20001430 	.word	0x20001430

08003c6c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003c74:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <BSP_LCD_SetTextColor+0x28>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4907      	ldr	r1, [pc, #28]	; (8003c98 <BSP_LCD_SetTextColor+0x2c>)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20001430 	.word	0x20001430
 8003c98:	20001434 	.word	0x20001434

08003c9c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <BSP_LCD_SetBackColor+0x2c>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4908      	ldr	r1, [pc, #32]	; (8003ccc <BSP_LCD_SetBackColor+0x30>)
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20001430 	.word	0x20001430
 8003ccc:	20001434 	.word	0x20001434

08003cd0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <BSP_LCD_SetFont+0x2c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4908      	ldr	r1, [pc, #32]	; (8003d00 <BSP_LCD_SetFont+0x30>)
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3308      	adds	r3, #8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20001430 	.word	0x20001430
 8003d00:	20001434 	.word	0x20001434

08003d04 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <BSP_LCD_GetFont+0x24>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4907      	ldr	r1, [pc, #28]	; (8003d2c <BSP_LCD_GetFont+0x28>)
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3308      	adds	r3, #8
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20001430 	.word	0x20001430
 8003d2c:	20001434 	.word	0x20001434

08003d30 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <BSP_LCD_Clear+0x48>)
 8003d3a:	681c      	ldr	r4, [r3, #0]
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <BSP_LCD_Clear+0x48>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <BSP_LCD_Clear+0x4c>)
 8003d42:	2134      	movs	r1, #52	; 0x34
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	335c      	adds	r3, #92	; 0x5c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461d      	mov	r5, r3
 8003d50:	f7ff fef4 	bl	8003b3c <BSP_LCD_GetXSize>
 8003d54:	4606      	mov	r6, r0
 8003d56:	f7ff ff05 	bl	8003b64 <BSP_LCD_GetYSize>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	4632      	mov	r2, r6
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f000 fe06 	bl	800497c <LL_FillBuffer>
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d78:	20001430 	.word	0x20001430
 8003d7c:	20009cac 	.word	0x20009cac

08003d80 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	80bb      	strh	r3, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <BSP_LCD_DisplayChar+0x80>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <BSP_LCD_DisplayChar+0x84>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3308      	adds	r3, #8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <BSP_LCD_DisplayChar+0x80>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4c14      	ldr	r4, [pc, #80]	; (8003e04 <BSP_LCD_DisplayChar+0x84>)
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4423      	add	r3, r4
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003dc4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <BSP_LCD_DisplayChar+0x80>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <BSP_LCD_DisplayChar+0x84>)
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4423      	add	r3, r4
 8003dd8:	3308      	adds	r3, #8
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	889b      	ldrh	r3, [r3, #4]
 8003dde:	3307      	adds	r3, #7
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da00      	bge.n	8003de6 <BSP_LCD_DisplayChar+0x66>
 8003de4:	3307      	adds	r3, #7
 8003de6:	10db      	asrs	r3, r3, #3
 8003de8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003dec:	18ca      	adds	r2, r1, r3
 8003dee:	88b9      	ldrh	r1, [r7, #4]
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fd0a 	bl	800480c <DrawChar>
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd90      	pop	{r4, r7, pc}
 8003e00:	20001430 	.word	0x20001430
 8003e04:	20001434 	.word	0x20001434

08003e08 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60ba      	str	r2, [r7, #8]
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	81fb      	strh	r3, [r7, #14]
 8003e16:	460b      	mov	r3, r1
 8003e18:	81bb      	strh	r3, [r7, #12]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	83fb      	strh	r3, [r7, #30]
 8003e22:	2300      	movs	r3, #0
 8003e24:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003e32:	e002      	b.n	8003e3a <BSP_LCD_DisplayStringAt+0x32>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	617a      	str	r2, [r7, #20]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f6      	bne.n	8003e34 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003e46:	f7ff fe79 	bl	8003b3c <BSP_LCD_GetXSize>
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <BSP_LCD_DisplayStringAt+0x180>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	494f      	ldr	r1, [pc, #316]	; (8003f8c <BSP_LCD_DisplayStringAt+0x184>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	889b      	ldrh	r3, [r3, #4]
 8003e60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e64:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d01c      	beq.n	8003ea6 <BSP_LCD_DisplayStringAt+0x9e>
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d017      	beq.n	8003ea0 <BSP_LCD_DisplayStringAt+0x98>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d12e      	bne.n	8003ed2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad1      	subs	r1, r2, r3
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <BSP_LCD_DisplayStringAt+0x180>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4843      	ldr	r0, [pc, #268]	; (8003f8c <BSP_LCD_DisplayStringAt+0x184>)
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4403      	add	r3, r0
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	889b      	ldrh	r3, [r3, #4]
 8003e90:	fb03 f301 	mul.w	r3, r3, r1
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	89fb      	ldrh	r3, [r7, #14]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	83fb      	strh	r3, [r7, #30]
      break;
 8003e9e:	e01b      	b.n	8003ed8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003ea0:	89fb      	ldrh	r3, [r7, #14]
 8003ea2:	83fb      	strh	r3, [r7, #30]
      break;
 8003ea4:	e018      	b.n	8003ed8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	b299      	uxth	r1, r3
 8003eae:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <BSP_LCD_DisplayStringAt+0x180>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4836      	ldr	r0, [pc, #216]	; (8003f8c <BSP_LCD_DisplayStringAt+0x184>)
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4403      	add	r3, r0
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	889b      	ldrh	r3, [r3, #4]
 8003ec4:	fb11 f303 	smulbb	r3, r1, r3
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	83fb      	strh	r3, [r7, #30]
      break;
 8003ed0:	e002      	b.n	8003ed8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	83fb      	strh	r3, [r7, #30]
      break;
 8003ed6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003ed8:	8bfb      	ldrh	r3, [r7, #30]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <BSP_LCD_DisplayStringAt+0xde>
 8003ede:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da1d      	bge.n	8003f22 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003eea:	e01a      	b.n	8003f22 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	89b9      	ldrh	r1, [r7, #12]
 8003ef2:	8bfb      	ldrh	r3, [r7, #30]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff43 	bl	8003d80 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <BSP_LCD_DisplayStringAt+0x180>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4923      	ldr	r1, [pc, #140]	; (8003f8c <BSP_LCD_DisplayStringAt+0x184>)
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	889a      	ldrh	r2, [r3, #4]
 8003f10:	8bfb      	ldrh	r3, [r7, #30]
 8003f12:	4413      	add	r3, r2
 8003f14:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
    i++;
 8003f1c:	8bbb      	ldrh	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2dc      	uxtb	r4, r3
 8003f30:	f7ff fe04 	bl	8003b3c <BSP_LCD_GetXSize>
 8003f34:	4605      	mov	r5, r0
 8003f36:	8bb9      	ldrh	r1, [r7, #28]
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <BSP_LCD_DisplayStringAt+0x180>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4813      	ldr	r0, [pc, #76]	; (8003f8c <BSP_LCD_DisplayStringAt+0x184>)
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4403      	add	r3, r0
 8003f48:	3308      	adds	r3, #8
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	889b      	ldrh	r3, [r3, #4]
 8003f4e:	fb03 f301 	mul.w	r3, r3, r1
 8003f52:	1aeb      	subs	r3, r5, r3
 8003f54:	b299      	uxth	r1, r3
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <BSP_LCD_DisplayStringAt+0x180>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	480c      	ldr	r0, [pc, #48]	; (8003f8c <BSP_LCD_DisplayStringAt+0x184>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4403      	add	r3, r0
 8003f66:	3308      	adds	r3, #8
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	889b      	ldrh	r3, [r3, #4]
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	bf2c      	ite	cs
 8003f70:	2301      	movcs	r3, #1
 8003f72:	2300      	movcc	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4023      	ands	r3, r4
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1b6      	bne.n	8003eec <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8003f7e:	bf00      	nop
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bdb0      	pop	{r4, r5, r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20001430 	.word	0x20001430
 8003f8c:	20001434 	.word	0x20001434

08003f90 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003f9c:	f7ff feb2 	bl	8003d04 <BSP_LCD_GetFont>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	88db      	ldrh	r3, [r3, #6]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	fb12 f303 	smulbb	r3, r2, r3
 8003faa:	b299      	uxth	r1, r3
 8003fac:	2303      	movs	r3, #3
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7ff ff29 	bl	8003e08 <BSP_LCD_DisplayStringAt>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	80fb      	strh	r3, [r7, #6]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	80bb      	strh	r3, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003fd6:	4b26      	ldr	r3, [pc, #152]	; (8004070 <BSP_LCD_DrawHLine+0xb0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <BSP_LCD_DrawHLine+0xb4>)
 8003fdc:	2134      	movs	r1, #52	; 0x34
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3348      	adds	r3, #72	; 0x48
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d114      	bne.n	8004016 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <BSP_LCD_DrawHLine+0xb0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	; (8004074 <BSP_LCD_DrawHLine+0xb4>)
 8003ff2:	2134      	movs	r1, #52	; 0x34
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	335c      	adds	r3, #92	; 0x5c
 8003ffc:	681c      	ldr	r4, [r3, #0]
 8003ffe:	f7ff fd9d 	bl	8003b3c <BSP_LCD_GetXSize>
 8004002:	4602      	mov	r2, r0
 8004004:	88bb      	ldrh	r3, [r7, #4]
 8004006:	fb03 f202 	mul.w	r2, r3, r2
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	4413      	add	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4423      	add	r3, r4
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e013      	b.n	800403e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <BSP_LCD_DrawHLine+0xb0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a16      	ldr	r2, [pc, #88]	; (8004074 <BSP_LCD_DrawHLine+0xb4>)
 800401c:	2134      	movs	r1, #52	; 0x34
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	335c      	adds	r3, #92	; 0x5c
 8004026:	681c      	ldr	r4, [r3, #0]
 8004028:	f7ff fd88 	bl	8003b3c <BSP_LCD_GetXSize>
 800402c:	4602      	mov	r2, r0
 800402e:	88bb      	ldrh	r3, [r7, #4]
 8004030:	fb03 f202 	mul.w	r2, r3, r2
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4423      	add	r3, r4
 800403c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <BSP_LCD_DrawHLine+0xb0>)
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	68fc      	ldr	r4, [r7, #12]
 8004044:	887d      	ldrh	r5, [r7, #2]
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <BSP_LCD_DrawHLine+0xb0>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	490b      	ldr	r1, [pc, #44]	; (8004078 <BSP_LCD_DrawHLine+0xb8>)
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2301      	movs	r3, #1
 8004060:	462a      	mov	r2, r5
 8004062:	4621      	mov	r1, r4
 8004064:	f000 fc8a 	bl	800497c <LL_FillBuffer>
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bdb0      	pop	{r4, r5, r7, pc}
 8004070:	20001430 	.word	0x20001430
 8004074:	20009cac 	.word	0x20009cac
 8004078:	20001434 	.word	0x20001434

0800407c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800407e:	b087      	sub	sp, #28
 8004080:	af02      	add	r7, sp, #8
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
 8004086:	460b      	mov	r3, r1
 8004088:	80bb      	strh	r3, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004092:	4b28      	ldr	r3, [pc, #160]	; (8004134 <BSP_LCD_DrawVLine+0xb8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a28      	ldr	r2, [pc, #160]	; (8004138 <BSP_LCD_DrawVLine+0xbc>)
 8004098:	2134      	movs	r1, #52	; 0x34
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3348      	adds	r3, #72	; 0x48
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d114      	bne.n	80040d2 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040a8:	4b22      	ldr	r3, [pc, #136]	; (8004134 <BSP_LCD_DrawVLine+0xb8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a22      	ldr	r2, [pc, #136]	; (8004138 <BSP_LCD_DrawVLine+0xbc>)
 80040ae:	2134      	movs	r1, #52	; 0x34
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	335c      	adds	r3, #92	; 0x5c
 80040b8:	681c      	ldr	r4, [r3, #0]
 80040ba:	f7ff fd3f 	bl	8003b3c <BSP_LCD_GetXSize>
 80040be:	4602      	mov	r2, r0
 80040c0:	88bb      	ldrh	r3, [r7, #4]
 80040c2:	fb03 f202 	mul.w	r2, r3, r2
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	4413      	add	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4423      	add	r3, r4
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e013      	b.n	80040fa <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <BSP_LCD_DrawVLine+0xb8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <BSP_LCD_DrawVLine+0xbc>)
 80040d8:	2134      	movs	r1, #52	; 0x34
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	335c      	adds	r3, #92	; 0x5c
 80040e2:	681c      	ldr	r4, [r3, #0]
 80040e4:	f7ff fd2a 	bl	8003b3c <BSP_LCD_GetXSize>
 80040e8:	4602      	mov	r2, r0
 80040ea:	88bb      	ldrh	r3, [r7, #4]
 80040ec:	fb03 f202 	mul.w	r2, r3, r2
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4423      	add	r3, r4
 80040f8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <BSP_LCD_DrawVLine+0xb8>)
 80040fc:	681c      	ldr	r4, [r3, #0]
 80040fe:	68fd      	ldr	r5, [r7, #12]
 8004100:	887e      	ldrh	r6, [r7, #2]
 8004102:	f7ff fd1b 	bl	8003b3c <BSP_LCD_GetXSize>
 8004106:	4603      	mov	r3, r0
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <BSP_LCD_DrawVLine+0xb8>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	480b      	ldr	r0, [pc, #44]	; (800413c <BSP_LCD_DrawVLine+0xc0>)
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4403      	add	r3, r0
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	9100      	str	r1, [sp, #0]
 8004120:	4633      	mov	r3, r6
 8004122:	2201      	movs	r2, #1
 8004124:	4629      	mov	r1, r5
 8004126:	4620      	mov	r0, r4
 8004128:	f000 fc28 	bl	800497c <LL_FillBuffer>
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004134:	20001430 	.word	0x20001430
 8004138:	20009cac 	.word	0x20009cac
 800413c:	20001434 	.word	0x20001434

08004140 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
 800414a:	460b      	mov	r3, r1
 800414c:	80bb      	strh	r3, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	f1c3 0303 	rsb	r3, r3, #3
 800415a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004160:	887b      	ldrh	r3, [r7, #2]
 8004162:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8004164:	e0cf      	b.n	8004306 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	b29a      	uxth	r2, r3
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	4413      	add	r3, r2
 800416e:	b298      	uxth	r0, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	b29b      	uxth	r3, r3
 8004174:	88ba      	ldrh	r2, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	b29c      	uxth	r4, r3
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4967      	ldr	r1, [pc, #412]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4621      	mov	r1, r4
 8004190:	f000 f8c6 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	b29b      	uxth	r3, r3
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	b298      	uxth	r0, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	88ba      	ldrh	r2, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	b29c      	uxth	r4, r3
 80041a8:	4b5b      	ldr	r3, [pc, #364]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	495b      	ldr	r1, [pc, #364]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4621      	mov	r1, r4
 80041be:	f000 f8af 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	4413      	add	r3, r2
 80041ca:	b298      	uxth	r0, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	88ba      	ldrh	r2, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	b29c      	uxth	r4, r3
 80041d6:	4b50      	ldr	r3, [pc, #320]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4950      	ldr	r1, [pc, #320]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	4621      	mov	r1, r4
 80041ec:	f000 f898 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	b298      	uxth	r0, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	88ba      	ldrh	r2, [r7, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	b29c      	uxth	r4, r3
 8004204:	4b44      	ldr	r3, [pc, #272]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4944      	ldr	r1, [pc, #272]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	4621      	mov	r1, r4
 800421a:	f000 f881 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	b29a      	uxth	r2, r3
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	4413      	add	r3, r2
 8004226:	b298      	uxth	r0, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	b29a      	uxth	r2, r3
 800422c:	88bb      	ldrh	r3, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	b29c      	uxth	r4, r3
 8004232:	4b39      	ldr	r3, [pc, #228]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4939      	ldr	r1, [pc, #228]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4621      	mov	r1, r4
 8004248:	f000 f86a 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	b29b      	uxth	r3, r3
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b298      	uxth	r0, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	b29a      	uxth	r2, r3
 800425a:	88bb      	ldrh	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	b29c      	uxth	r4, r3
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	492d      	ldr	r1, [pc, #180]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	4621      	mov	r1, r4
 8004276:	f000 f853 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	b29a      	uxth	r2, r3
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4413      	add	r3, r2
 8004282:	b298      	uxth	r0, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	b29a      	uxth	r2, r3
 8004288:	88bb      	ldrh	r3, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	b29c      	uxth	r4, r3
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4922      	ldr	r1, [pc, #136]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4621      	mov	r1, r4
 80042a4:	f000 f83c 	bl	8004320 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	b298      	uxth	r0, r3
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	88bb      	ldrh	r3, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	b29c      	uxth	r4, r3
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <BSP_LCD_DrawCircle+0x1d8>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4916      	ldr	r1, [pc, #88]	; (800431c <BSP_LCD_DrawCircle+0x1dc>)
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	4621      	mov	r1, r4
 80042d2:	f000 f825 	bl	8004320 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da06      	bge.n	80042ea <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	009a      	lsls	r2, r3, #2
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	3306      	adds	r3, #6
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e00a      	b.n	8004300 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	009a      	lsls	r2, r3, #2
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4413      	add	r3, r2
 80042f6:	330a      	adds	r3, #10
 80042f8:	617b      	str	r3, [r7, #20]
      current_y--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	429a      	cmp	r2, r3
 800430c:	f67f af2b 	bls.w	8004166 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}
 8004318:	20001430 	.word	0x20001430
 800431c:	20001434 	.word	0x20001434

08004320 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004320:	b5b0      	push	{r4, r5, r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	603a      	str	r2, [r7, #0]
 800432a:	80fb      	strh	r3, [r7, #6]
 800432c:	460b      	mov	r3, r1
 800432e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <BSP_LCD_DrawPixel+0x88>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <BSP_LCD_DrawPixel+0x8c>)
 8004336:	2134      	movs	r1, #52	; 0x34
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3348      	adds	r3, #72	; 0x48
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d116      	bne.n	8004374 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <BSP_LCD_DrawPixel+0x88>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a18      	ldr	r2, [pc, #96]	; (80043ac <BSP_LCD_DrawPixel+0x8c>)
 800434c:	2134      	movs	r1, #52	; 0x34
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	335c      	adds	r3, #92	; 0x5c
 8004356:	681c      	ldr	r4, [r3, #0]
 8004358:	88bd      	ldrh	r5, [r7, #4]
 800435a:	f7ff fbef 	bl	8003b3c <BSP_LCD_GetXSize>
 800435e:	4603      	mov	r3, r0
 8004360:	fb03 f205 	mul.w	r2, r3, r5
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	4413      	add	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4423      	add	r3, r4
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	b292      	uxth	r2, r2
 8004370:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004372:	e015      	b.n	80043a0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <BSP_LCD_DrawPixel+0x88>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <BSP_LCD_DrawPixel+0x8c>)
 800437a:	2134      	movs	r1, #52	; 0x34
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	335c      	adds	r3, #92	; 0x5c
 8004384:	681c      	ldr	r4, [r3, #0]
 8004386:	88bd      	ldrh	r5, [r7, #4]
 8004388:	f7ff fbd8 	bl	8003b3c <BSP_LCD_GetXSize>
 800438c:	4603      	mov	r3, r0
 800438e:	fb03 f205 	mul.w	r2, r3, r5
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4423      	add	r3, r4
 800439a:	461a      	mov	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bdb0      	pop	{r4, r5, r7, pc}
 80043a8:	20001430 	.word	0x20001430
 80043ac:	20009cac 	.word	0x20009cac

080043b0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80043b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af02      	add	r7, sp, #8
 80043b8:	4604      	mov	r4, r0
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	461a      	mov	r2, r3
 80043c0:	4623      	mov	r3, r4
 80043c2:	80fb      	strh	r3, [r7, #6]
 80043c4:	4603      	mov	r3, r0
 80043c6:	80bb      	strh	r3, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80043d4:	4b30      	ldr	r3, [pc, #192]	; (8004498 <BSP_LCD_FillRect+0xe8>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4930      	ldr	r1, [pc, #192]	; (800449c <BSP_LCD_FillRect+0xec>)
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fc40 	bl	8003c6c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <BSP_LCD_FillRect+0xe8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <BSP_LCD_FillRect+0xf0>)
 80043f2:	2134      	movs	r1, #52	; 0x34
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	3348      	adds	r3, #72	; 0x48
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d114      	bne.n	800442c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004402:	4b25      	ldr	r3, [pc, #148]	; (8004498 <BSP_LCD_FillRect+0xe8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <BSP_LCD_FillRect+0xf0>)
 8004408:	2134      	movs	r1, #52	; 0x34
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	335c      	adds	r3, #92	; 0x5c
 8004412:	681c      	ldr	r4, [r3, #0]
 8004414:	f7ff fb92 	bl	8003b3c <BSP_LCD_GetXSize>
 8004418:	4602      	mov	r2, r0
 800441a:	88bb      	ldrh	r3, [r7, #4]
 800441c:	fb03 f202 	mul.w	r2, r3, r2
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	4413      	add	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4423      	add	r3, r4
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e013      	b.n	8004454 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800442c:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <BSP_LCD_FillRect+0xe8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <BSP_LCD_FillRect+0xf0>)
 8004432:	2134      	movs	r1, #52	; 0x34
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	335c      	adds	r3, #92	; 0x5c
 800443c:	681c      	ldr	r4, [r3, #0]
 800443e:	f7ff fb7d 	bl	8003b3c <BSP_LCD_GetXSize>
 8004442:	4602      	mov	r2, r0
 8004444:	88bb      	ldrh	r3, [r7, #4]
 8004446:	fb03 f202 	mul.w	r2, r3, r2
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4423      	add	r3, r4
 8004452:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004454:	4b10      	ldr	r3, [pc, #64]	; (8004498 <BSP_LCD_FillRect+0xe8>)
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	68fd      	ldr	r5, [r7, #12]
 800445a:	887e      	ldrh	r6, [r7, #2]
 800445c:	f8b7 8000 	ldrh.w	r8, [r7]
 8004460:	f7ff fb6c 	bl	8003b3c <BSP_LCD_GetXSize>
 8004464:	4602      	mov	r2, r0
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	1ad1      	subs	r1, r2, r3
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <BSP_LCD_FillRect+0xe8>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	480b      	ldr	r0, [pc, #44]	; (800449c <BSP_LCD_FillRect+0xec>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4403      	add	r3, r0
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	9100      	str	r1, [sp, #0]
 8004480:	4643      	mov	r3, r8
 8004482:	4632      	mov	r2, r6
 8004484:	4629      	mov	r1, r5
 8004486:	4620      	mov	r0, r4
 8004488:	f000 fa78 	bl	800497c <LL_FillBuffer>
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004496:	bf00      	nop
 8004498:	20001430 	.word	0x20001430
 800449c:	20001434 	.word	0x20001434
 80044a0:	20009cac 	.word	0x20009cac

080044a4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	80fb      	strh	r3, [r7, #6]
 80044ae:	460b      	mov	r3, r1
 80044b0:	80bb      	strh	r3, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80044b6:	887b      	ldrh	r3, [r7, #2]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	f1c3 0303 	rsb	r3, r3, #3
 80044be:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80044c8:	4b44      	ldr	r3, [pc, #272]	; (80045dc <BSP_LCD_FillCircle+0x138>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4944      	ldr	r1, [pc, #272]	; (80045e0 <BSP_LCD_FillCircle+0x13c>)
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fbc6 	bl	8003c6c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80044e0:	e061      	b.n	80045a6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d021      	beq.n	800452c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	b298      	uxth	r0, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	88bb      	ldrh	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	b299      	uxth	r1, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	f7ff fd5b 	bl	8003fc0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	b29b      	uxth	r3, r3
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	b298      	uxth	r0, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	b29b      	uxth	r3, r3
 8004518:	88ba      	ldrh	r2, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	b299      	uxth	r1, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	b29b      	uxth	r3, r3
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	b29b      	uxth	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	f7ff fd4a 	bl	8003fc0 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d021      	beq.n	8004576 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	b29b      	uxth	r3, r3
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	b298      	uxth	r0, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	b29b      	uxth	r3, r3
 8004540:	88ba      	ldrh	r2, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	b299      	uxth	r1, r3
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	b29b      	uxth	r3, r3
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	f7ff fd36 	bl	8003fc0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	b29b      	uxth	r3, r3
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	b298      	uxth	r0, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	b29a      	uxth	r2, r3
 8004562:	88bb      	ldrh	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	b299      	uxth	r1, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	b29b      	uxth	r3, r3
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	f7ff fd25 	bl	8003fc0 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	da06      	bge.n	800458a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	009a      	lsls	r2, r3, #2
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4413      	add	r3, r2
 8004584:	3306      	adds	r3, #6
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e00a      	b.n	80045a0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	009a      	lsls	r2, r3, #2
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	4413      	add	r3, r2
 8004596:	330a      	adds	r3, #10
 8004598:	617b      	str	r3, [r7, #20]
      current_y--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3b01      	subs	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3301      	adds	r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d999      	bls.n	80044e2 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <BSP_LCD_FillCircle+0x138>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	490b      	ldr	r1, [pc, #44]	; (80045e0 <BSP_LCD_FillCircle+0x13c>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fb53 	bl	8003c6c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	88b9      	ldrh	r1, [r7, #4]
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fdb7 	bl	8004140 <BSP_LCD_DrawCircle>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20001430 	.word	0x20001430
 80045e0:	20001434 	.word	0x20001434

080045e4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <BSP_LCD_DisplayOn+0x30>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <BSP_LCD_DisplayOn+0x30>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80045f8:	2201      	movs	r2, #1
 80045fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045fe:	4806      	ldr	r0, [pc, #24]	; (8004618 <BSP_LCD_DisplayOn+0x34>)
 8004600:	f003 f940 	bl	8007884 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004604:	2201      	movs	r2, #1
 8004606:	2108      	movs	r1, #8
 8004608:	4804      	ldr	r0, [pc, #16]	; (800461c <BSP_LCD_DisplayOn+0x38>)
 800460a:	f003 f93b 	bl	8007884 <HAL_GPIO_WritePin>
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20009cac 	.word	0x20009cac
 8004618:	40022000 	.word	0x40022000
 800461c:	40022800 	.word	0x40022800

08004620 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b090      	sub	sp, #64	; 0x40
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800462a:	4b64      	ldr	r3, [pc, #400]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	4a63      	ldr	r2, [pc, #396]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004634:	6453      	str	r3, [r2, #68]	; 0x44
 8004636:	4b61      	ldr	r3, [pc, #388]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004642:	4b5e      	ldr	r3, [pc, #376]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	4a5d      	ldr	r2, [pc, #372]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800464c:	6313      	str	r3, [r2, #48]	; 0x30
 800464e:	4b5b      	ldr	r3, [pc, #364]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800465a:	4b58      	ldr	r3, [pc, #352]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a57      	ldr	r2, [pc, #348]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004660:	f043 0310 	orr.w	r3, r3, #16
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b55      	ldr	r3, [pc, #340]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004672:	4b52      	ldr	r3, [pc, #328]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a51      	ldr	r2, [pc, #324]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	4a4b      	ldr	r2, [pc, #300]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6313      	str	r3, [r2, #48]	; 0x30
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80046a2:	4b46      	ldr	r3, [pc, #280]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a45      	ldr	r2, [pc, #276]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80046ba:	4b40      	ldr	r3, [pc, #256]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80046d2:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a39      	ldr	r2, [pc, #228]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	4a33      	ldr	r2, [pc, #204]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f4:	6313      	str	r3, [r2, #48]	; 0x30
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <BSP_LCD_MspInit+0x19c>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004702:	2310      	movs	r3, #16
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800470e:	2302      	movs	r3, #2
 8004710:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004712:	230e      	movs	r3, #14
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800471a:	4619      	mov	r1, r3
 800471c:	4828      	ldr	r0, [pc, #160]	; (80047c0 <BSP_LCD_MspInit+0x1a0>)
 800471e:	f002 fde5 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800472c:	2309      	movs	r3, #9
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004734:	4619      	mov	r1, r3
 8004736:	4823      	ldr	r0, [pc, #140]	; (80047c4 <BSP_LCD_MspInit+0x1a4>)
 8004738:	f002 fdd8 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800473c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004742:	2302      	movs	r3, #2
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004746:	230e      	movs	r3, #14
 8004748:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800474a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800474e:	4619      	mov	r1, r3
 8004750:	481d      	ldr	r0, [pc, #116]	; (80047c8 <BSP_LCD_MspInit+0x1a8>)
 8004752:	f002 fdcb 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004756:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004760:	230e      	movs	r3, #14
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004768:	4619      	mov	r1, r3
 800476a:	4818      	ldr	r0, [pc, #96]	; (80047cc <BSP_LCD_MspInit+0x1ac>)
 800476c:	f002 fdbe 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004770:	23f7      	movs	r3, #247	; 0xf7
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004778:	230e      	movs	r3, #14
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800477c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004780:	4619      	mov	r1, r3
 8004782:	4813      	ldr	r0, [pc, #76]	; (80047d0 <BSP_LCD_MspInit+0x1b0>)
 8004784:	f002 fdb2 	bl	80072ec <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800478e:	2301      	movs	r3, #1
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004796:	4619      	mov	r1, r3
 8004798:	480b      	ldr	r0, [pc, #44]	; (80047c8 <BSP_LCD_MspInit+0x1a8>)
 800479a:	f002 fda7 	bl	80072ec <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800479e:	2308      	movs	r3, #8
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80047a2:	2301      	movs	r3, #1
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80047a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047aa:	4619      	mov	r1, r3
 80047ac:	4808      	ldr	r0, [pc, #32]	; (80047d0 <BSP_LCD_MspInit+0x1b0>)
 80047ae:	f002 fd9d 	bl	80072ec <HAL_GPIO_Init>
}
 80047b2:	bf00      	nop
 80047b4:	3740      	adds	r7, #64	; 0x40
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40021800 	.word	0x40021800
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40022400 	.word	0x40022400
 80047d0:	40022800 	.word	0x40022800

080047d4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <BSP_LCD_ClockConfig+0x34>)
 80047e0:	2208      	movs	r2, #8
 80047e2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <BSP_LCD_ClockConfig+0x34>)
 80047e6:	22c0      	movs	r2, #192	; 0xc0
 80047e8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <BSP_LCD_ClockConfig+0x34>)
 80047ec:	2205      	movs	r2, #5
 80047ee:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <BSP_LCD_ClockConfig+0x34>)
 80047f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80047f8:	4803      	ldr	r0, [pc, #12]	; (8004808 <BSP_LCD_ClockConfig+0x34>)
 80047fa:	f004 fea5 	bl	8009548 <HAL_RCCEx_PeriphCLKConfig>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	2000144c 	.word	0x2000144c

0800480c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	603a      	str	r2, [r7, #0]
 8004816:	80fb      	strh	r3, [r7, #6]
 8004818:	460b      	mov	r3, r1
 800481a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004824:	4b53      	ldr	r3, [pc, #332]	; (8004974 <DrawChar+0x168>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4953      	ldr	r1, [pc, #332]	; (8004978 <DrawChar+0x16c>)
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3308      	adds	r3, #8
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	88db      	ldrh	r3, [r3, #6]
 800483a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800483c:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <DrawChar+0x168>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	494d      	ldr	r1, [pc, #308]	; (8004978 <DrawChar+0x16c>)
 8004842:	4613      	mov	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	3308      	adds	r3, #8
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	889b      	ldrh	r3, [r3, #4]
 8004852:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004854:	8a3b      	ldrh	r3, [r7, #16]
 8004856:	3307      	adds	r3, #7
 8004858:	2b00      	cmp	r3, #0
 800485a:	da00      	bge.n	800485e <DrawChar+0x52>
 800485c:	3307      	adds	r3, #7
 800485e:	10db      	asrs	r3, r3, #3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	b2da      	uxtb	r2, r3
 8004866:	8a3b      	ldrh	r3, [r7, #16]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	e076      	b.n	8004962 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004874:	8a3b      	ldrh	r3, [r7, #16]
 8004876:	3307      	adds	r3, #7
 8004878:	2b00      	cmp	r3, #0
 800487a:	da00      	bge.n	800487e <DrawChar+0x72>
 800487c:	3307      	adds	r3, #7
 800487e:	10db      	asrs	r3, r3, #3
 8004880:	461a      	mov	r2, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	fb03 f302 	mul.w	r3, r3, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4413      	add	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800488e:	8a3b      	ldrh	r3, [r7, #16]
 8004890:	3307      	adds	r3, #7
 8004892:	2b00      	cmp	r3, #0
 8004894:	da00      	bge.n	8004898 <DrawChar+0x8c>
 8004896:	3307      	adds	r3, #7
 8004898:	10db      	asrs	r3, r3, #3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d002      	beq.n	80048a4 <DrawChar+0x98>
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d004      	beq.n	80048ac <DrawChar+0xa0>
 80048a2:	e00c      	b.n	80048be <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	617b      	str	r3, [r7, #20]
      break;
 80048aa:	e016      	b.n	80048da <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	3201      	adds	r2, #1
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
      break;
 80048bc:	e00d      	b.n	80048da <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	041a      	lsls	r2, r3, #16
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3301      	adds	r3, #1
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	3202      	adds	r2, #2
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
      break;
 80048d8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e036      	b.n	800494e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80048e0:	8a3a      	ldrh	r2, [r7, #16]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	4413      	add	r3, r2
 80048ea:	3b01      	subs	r3, #1
 80048ec:	2201      	movs	r2, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d012      	beq.n	8004922 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	4413      	add	r3, r2
 8004904:	b298      	uxth	r0, r3
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <DrawChar+0x168>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	491b      	ldr	r1, [pc, #108]	; (8004978 <DrawChar+0x16c>)
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	88bb      	ldrh	r3, [r7, #4]
 800491a:	4619      	mov	r1, r3
 800491c:	f7ff fd00 	bl	8004320 <BSP_LCD_DrawPixel>
 8004920:	e012      	b.n	8004948 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	b29a      	uxth	r2, r3
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	4413      	add	r3, r2
 800492a:	b298      	uxth	r0, r3
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <DrawChar+0x168>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4911      	ldr	r1, [pc, #68]	; (8004978 <DrawChar+0x16c>)
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3304      	adds	r3, #4
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	88bb      	ldrh	r3, [r7, #4]
 8004942:	4619      	mov	r1, r3
 8004944:	f7ff fcec 	bl	8004320 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	3301      	adds	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	8a3b      	ldrh	r3, [r7, #16]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	429a      	cmp	r2, r3
 8004954:	d3c4      	bcc.n	80048e0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004956:	88bb      	ldrh	r3, [r7, #4]
 8004958:	3301      	adds	r3, #1
 800495a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	8a7b      	ldrh	r3, [r7, #18]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	429a      	cmp	r2, r3
 8004968:	d384      	bcc.n	8004874 <DrawChar+0x68>
  }
}
 800496a:	bf00      	nop
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20001430 	.word	0x20001430
 8004978:	20001434 	.word	0x20001434

0800497c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <LL_FillBuffer+0x88>)
 800498c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004990:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004992:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <LL_FillBuffer+0x8c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <LL_FillBuffer+0x90>)
 8004998:	2134      	movs	r1, #52	; 0x34
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3348      	adds	r3, #72	; 0x48
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d103      	bne.n	80049b0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <LL_FillBuffer+0x88>)
 80049aa:	2202      	movs	r2, #2
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	e002      	b.n	80049b6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <LL_FillBuffer+0x88>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80049b6:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <LL_FillBuffer+0x88>)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <LL_FillBuffer+0x88>)
 80049be:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <LL_FillBuffer+0x94>)
 80049c0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80049c2:	4810      	ldr	r0, [pc, #64]	; (8004a04 <LL_FillBuffer+0x88>)
 80049c4:	f002 fa06 	bl	8006dd4 <HAL_DMA2D_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d115      	bne.n	80049fa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	480c      	ldr	r0, [pc, #48]	; (8004a04 <LL_FillBuffer+0x88>)
 80049d2:	f002 fb5d 	bl	8007090 <HAL_DMA2D_ConfigLayer>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10e      	bne.n	80049fa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69f9      	ldr	r1, [r7, #28]
 80049e6:	4807      	ldr	r0, [pc, #28]	; (8004a04 <LL_FillBuffer+0x88>)
 80049e8:	f002 fa3e 	bl	8006e68 <HAL_DMA2D_Start>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80049f2:	210a      	movs	r1, #10
 80049f4:	4803      	ldr	r0, [pc, #12]	; (8004a04 <LL_FillBuffer+0x88>)
 80049f6:	f002 fa62 	bl	8006ebe <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200013f0 	.word	0x200013f0
 8004a08:	20001430 	.word	0x20001430
 8004a0c:	20009cac 	.word	0x20009cac
 8004a10:	4002b000 	.word	0x4002b000

08004a14 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004a18:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <BSP_SDRAM_Init+0xb0>)
 8004a1c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a20:	2202      	movs	r2, #2
 8004a22:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004a24:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a26:	2207      	movs	r2, #7
 8004a28:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004a2a:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a32:	2207      	movs	r2, #7
 8004a34:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a38:	2202      	movs	r2, #2
 8004a3a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a3e:	2202      	movs	r2, #2
 8004a40:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004a42:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a44:	2202      	movs	r2, #2
 8004a46:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a56:	2204      	movs	r2, #4
 8004a58:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004a5a:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a62:	2240      	movs	r2, #64	; 0x40
 8004a64:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a6c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004a74:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a7a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a8e:	f000 f87f 	bl	8004b90 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004a92:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <BSP_SDRAM_Init+0xb4>)
 8004a94:	480a      	ldr	r0, [pc, #40]	; (8004ac0 <BSP_SDRAM_Init+0xac>)
 8004a96:	f005 fd07 	bl	800a4a8 <HAL_SDRAM_Init>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <BSP_SDRAM_Init+0xb8>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <BSP_SDRAM_Init+0xb8>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004aae:	f240 6003 	movw	r0, #1539	; 0x603
 8004ab2:	f000 f80d 	bl	8004ad0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <BSP_SDRAM_Init+0xb8>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20009d54 	.word	0x20009d54
 8004ac4:	a0000140 	.word	0xa0000140
 8004ac8:	200014d0 	.word	0x200014d0
 8004acc:	2000102c 	.word	0x2000102c

08004ad0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004adc:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ae2:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af8:	4923      	ldr	r1, [pc, #140]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004afa:	4824      	ldr	r0, [pc, #144]	; (8004b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004afc:	f005 fd08 	bl	800a510 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004b00:	2001      	movs	r0, #1
 8004b02:	f001 f9ff 	bl	8005f04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b0e:	2210      	movs	r2, #16
 8004b10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b12:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b22:	4919      	ldr	r1, [pc, #100]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b24:	4819      	ldr	r0, [pc, #100]	; (8004b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b26:	f005 fcf3 	bl	800a510 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b32:	2210      	movs	r2, #16
 8004b34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b38:	2208      	movs	r2, #8
 8004b3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b46:	4910      	ldr	r1, [pc, #64]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b48:	4810      	ldr	r0, [pc, #64]	; (8004b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b4a:	f005 fce1 	bl	800a510 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004b4e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004b52:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b56:	2204      	movs	r2, #4
 8004b58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b6a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b70:	4905      	ldr	r1, [pc, #20]	; (8004b88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b72:	4806      	ldr	r0, [pc, #24]	; (8004b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b74:	f005 fccc 	bl	800a510 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4804      	ldr	r0, [pc, #16]	; (8004b8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b7c:	f005 fcf3 	bl	800a566 <HAL_SDRAM_ProgramRefreshRate>
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200014ec 	.word	0x200014ec
 8004b8c:	20009d54 	.word	0x20009d54

08004b90 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b090      	sub	sp, #64	; 0x40
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6393      	str	r3, [r2, #56]	; 0x38
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a69      	ldr	r2, [pc, #420]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b67      	ldr	r3, [pc, #412]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bca:	4b64      	ldr	r3, [pc, #400]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a63      	ldr	r2, [pc, #396]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bd0:	f043 0304 	orr.w	r3, r3, #4
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004be2:	4b5e      	ldr	r3, [pc, #376]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	4a5d      	ldr	r2, [pc, #372]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004be8:	f043 0308 	orr.w	r3, r3, #8
 8004bec:	6313      	str	r3, [r2, #48]	; 0x30
 8004bee:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bfa:	4b58      	ldr	r3, [pc, #352]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a57      	ldr	r2, [pc, #348]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c00:	f043 0310 	orr.w	r3, r3, #16
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b55      	ldr	r3, [pc, #340]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c12:	4b52      	ldr	r3, [pc, #328]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a51      	ldr	r2, [pc, #324]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c2a:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	6313      	str	r3, [r2, #48]	; 0x30
 8004c36:	4b49      	ldr	r3, [pc, #292]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c42:	4b46      	ldr	r3, [pc, #280]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a45      	ldr	r2, [pc, #276]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <BSP_SDRAM_MspInit+0x1cc>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004c62:	2302      	movs	r3, #2
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004c66:	230c      	movs	r3, #12
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c72:	4619      	mov	r1, r3
 8004c74:	483a      	ldr	r0, [pc, #232]	; (8004d60 <BSP_SDRAM_MspInit+0x1d0>)
 8004c76:	f002 fb39 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004c7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c84:	4619      	mov	r1, r3
 8004c86:	4837      	ldr	r0, [pc, #220]	; (8004d64 <BSP_SDRAM_MspInit+0x1d4>)
 8004c88:	f002 fb30 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004c8c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c96:	4619      	mov	r1, r3
 8004c98:	4833      	ldr	r0, [pc, #204]	; (8004d68 <BSP_SDRAM_MspInit+0x1d8>)
 8004c9a:	f002 fb27 	bl	80072ec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004c9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4830      	ldr	r0, [pc, #192]	; (8004d6c <BSP_SDRAM_MspInit+0x1dc>)
 8004cac:	f002 fb1e 	bl	80072ec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004cb0:	f248 1333 	movw	r3, #33075	; 0x8133
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cba:	4619      	mov	r1, r3
 8004cbc:	482c      	ldr	r0, [pc, #176]	; (8004d70 <BSP_SDRAM_MspInit+0x1e0>)
 8004cbe:	f002 fb15 	bl	80072ec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004cc2:	2328      	movs	r3, #40	; 0x28
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4829      	ldr	r0, [pc, #164]	; (8004d74 <BSP_SDRAM_MspInit+0x1e4>)
 8004cce:	f002 fb0d 	bl	80072ec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004cd8:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cec:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cf4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cfc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d0a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004d12:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d14:	2203      	movs	r2, #3
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <BSP_SDRAM_MspInit+0x1ec>)
 8004d28:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d30:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004d36:	4810      	ldr	r0, [pc, #64]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d38:	f001 ff3e 	bl	8006bb8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004d3c:	480e      	ldr	r0, [pc, #56]	; (8004d78 <BSP_SDRAM_MspInit+0x1e8>)
 8004d3e:	f001 fe8d 	bl	8006a5c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	210f      	movs	r1, #15
 8004d46:	2038      	movs	r0, #56	; 0x38
 8004d48:	f001 fd90 	bl	800686c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004d4c:	2038      	movs	r0, #56	; 0x38
 8004d4e:	f001 fda9 	bl	80068a4 <HAL_NVIC_EnableIRQ>
}
 8004d52:	bf00      	nop
 8004d54:	3740      	adds	r7, #64	; 0x40
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40020800 	.word	0x40020800
 8004d64:	40020c00 	.word	0x40020c00
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40021400 	.word	0x40021400
 8004d70:	40021800 	.word	0x40021800
 8004d74:	40021c00 	.word	0x40021c00
 8004d78:	200014fc 	.word	0x200014fc
 8004d7c:	40026410 	.word	0x40026410

08004d80 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	460a      	mov	r2, r1
 8004d8a:	80fb      	strh	r3, [r7, #6]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <BSP_TS_Init+0x68>)
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004d9a:	4a14      	ldr	r2, [pc, #80]	; (8004dec <BSP_TS_Init+0x6c>)
 8004d9c:	88bb      	ldrh	r3, [r7, #4]
 8004d9e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <BSP_TS_Init+0x70>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2070      	movs	r0, #112	; 0x70
 8004da6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <BSP_TS_Init+0x70>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2070      	movs	r0, #112	; 0x70
 8004dae:	4798      	blx	r3
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b51      	cmp	r3, #81	; 0x51
 8004db4:	d111      	bne.n	8004dda <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <BSP_TS_Init+0x74>)
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <BSP_TS_Init+0x70>)
 8004dba:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <BSP_TS_Init+0x78>)
 8004dbe:	2270      	movs	r2, #112	; 0x70
 8004dc0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <BSP_TS_Init+0x7c>)
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <BSP_TS_Init+0x74>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <BSP_TS_Init+0x78>)
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
 8004dd8:	e001      	b.n	8004dde <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20001560 	.word	0x20001560
 8004dec:	20001562 	.word	0x20001562
 8004df0:	20000000 	.word	0x20000000
 8004df4:	2000155c 	.word	0x2000155c
 8004df8:	20001565 	.word	0x20001565
 8004dfc:	20001564 	.word	0x20001564

08004e00 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b097      	sub	sp, #92	; 0x5c
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004e1a:	4b97      	ldr	r3, [pc, #604]	; (8005078 <BSP_TS_GetState+0x278>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a96      	ldr	r2, [pc, #600]	; (800507c <BSP_TS_GetState+0x27c>)
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	b292      	uxth	r2, r2
 8004e26:	4610      	mov	r0, r2
 8004e28:	4798      	blx	r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 81a8 	beq.w	800518c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e40:	e197      	b.n	8005172 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004e42:	4b8d      	ldr	r3, [pc, #564]	; (8005078 <BSP_TS_GetState+0x278>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	4a8c      	ldr	r2, [pc, #560]	; (800507c <BSP_TS_GetState+0x27c>)
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	b290      	uxth	r0, r2
 8004e4e:	f107 0120 	add.w	r1, r7, #32
 8004e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e54:	0052      	lsls	r2, r2, #1
 8004e56:	188c      	adds	r4, r1, r2
 8004e58:	f107 0114 	add.w	r1, r7, #20
 8004e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e5e:	0052      	lsls	r2, r2, #1
 8004e60:	440a      	add	r2, r1
 8004e62:	4621      	mov	r1, r4
 8004e64:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004e66:	4b86      	ldr	r3, [pc, #536]	; (8005080 <BSP_TS_GetState+0x280>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d11b      	bne.n	8004ea6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e76:	4413      	add	r3, r2
 8004e78:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e84:	440b      	add	r3, r1
 8004e86:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e92:	4413      	add	r3, r2
 8004e94:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004ea0:	440b      	add	r3, r1
 8004ea2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004ea6:	4b76      	ldr	r3, [pc, #472]	; (8005080 <BSP_TS_GetState+0x280>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d010      	beq.n	8004ed4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004eba:	4413      	add	r3, r2
 8004ebc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004ec0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004ece:	440b      	add	r3, r1
 8004ed0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <BSP_TS_GetState+0x280>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004ee8:	4413      	add	r3, r2
 8004eea:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004eee:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004efc:	440b      	add	r3, r1
 8004efe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004f02:	4b5f      	ldr	r3, [pc, #380]	; (8005080 <BSP_TS_GetState+0x280>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01b      	beq.n	8004f46 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f16:	4413      	add	r3, r2
 8004f18:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f24:	440b      	add	r3, r1
 8004f26:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f32:	4413      	add	r3, r2
 8004f34:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f40:	440b      	add	r3, r1
 8004f42:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f4e:	4413      	add	r3, r2
 8004f50:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4a4b      	ldr	r2, [pc, #300]	; (8005084 <BSP_TS_GetState+0x284>)
 8004f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d90e      	bls.n	8004f80 <BSP_TS_GetState+0x180>
 8004f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004f70:	4944      	ldr	r1, [pc, #272]	; (8005084 <BSP_TS_GetState+0x284>)
 8004f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	e00d      	b.n	8004f9c <BSP_TS_GetState+0x19c>
 8004f80:	4a40      	ldr	r2, [pc, #256]	; (8005084 <BSP_TS_GetState+0x284>)
 8004f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f92:	440b      	add	r3, r1
 8004f94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004fa8:	4413      	add	r3, r2
 8004faa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4a35      	ldr	r2, [pc, #212]	; (8005088 <BSP_TS_GetState+0x288>)
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb8:	4299      	cmp	r1, r3
 8004fba:	d90e      	bls.n	8004fda <BSP_TS_GetState+0x1da>
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004fca:	492f      	ldr	r1, [pc, #188]	; (8005088 <BSP_TS_GetState+0x288>)
 8004fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	e00d      	b.n	8004ff6 <BSP_TS_GetState+0x1f6>
 8004fda:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <BSP_TS_GetState+0x288>)
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004fec:	440b      	add	r3, r1
 8004fee:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004ffa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004ffe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005002:	4413      	add	r3, r2
 8005004:	2b05      	cmp	r3, #5
 8005006:	dd17      	ble.n	8005038 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8005008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005010:	4413      	add	r3, r2
 8005012:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005016:	4619      	mov	r1, r3
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <BSP_TS_GetState+0x284>)
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005028:	4413      	add	r3, r2
 800502a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800502e:	4619      	mov	r1, r3
 8005030:	4a15      	ldr	r2, [pc, #84]	; (8005088 <BSP_TS_GetState+0x288>)
 8005032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <BSP_TS_GetState+0x27c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d125      	bne.n	800508c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8005040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005048:	4413      	add	r3, r2
 800504a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	460a      	mov	r2, r1
 8005058:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005062:	4413      	add	r3, r2
 8005064:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506c:	3304      	adds	r3, #4
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4413      	add	r3, r2
 8005072:	460a      	mov	r2, r1
 8005074:	809a      	strh	r2, [r3, #4]
 8005076:	e02c      	b.n	80050d2 <BSP_TS_GetState+0x2d2>
 8005078:	2000155c 	.word	0x2000155c
 800507c:	20001565 	.word	0x20001565
 8005080:	20001564 	.word	0x20001564
 8005084:	20001568 	.word	0x20001568
 8005088:	2000157c 	.word	0x2000157c
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800508c:	4b42      	ldr	r3, [pc, #264]	; (8005198 <BSP_TS_GetState+0x398>)
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	4a42      	ldr	r2, [pc, #264]	; (800519c <BSP_TS_GetState+0x39c>)
 8005094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509a:	fb03 f301 	mul.w	r3, r3, r1
 800509e:	0b1b      	lsrs	r3, r3, #12
 80050a0:	b299      	uxth	r1, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	460a      	mov	r2, r1
 80050ac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80050ae:	4b3c      	ldr	r3, [pc, #240]	; (80051a0 <BSP_TS_GetState+0x3a0>)
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	4a3b      	ldr	r2, [pc, #236]	; (80051a4 <BSP_TS_GetState+0x3a4>)
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050bc:	fb03 f301 	mul.w	r3, r3, r1
 80050c0:	0b1b      	lsrs	r3, r3, #12
 80050c2:	b299      	uxth	r1, r3
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c8:	3304      	adds	r3, #4
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	460a      	mov	r2, r1
 80050d0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <BSP_TS_GetState+0x3a8>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b298      	uxth	r0, r3
 80050d8:	f107 010c 	add.w	r1, r7, #12
 80050dc:	f107 0210 	add.w	r2, r7, #16
 80050e0:	f107 0308 	add.w	r3, r7, #8
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	460b      	mov	r3, r1
 80050e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80050ea:	f7fb fc5f 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	b2d9      	uxtb	r1, r3
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f6:	4413      	add	r3, r2
 80050f8:	3316      	adds	r3, #22
 80050fa:	460a      	mov	r2, r1
 80050fc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	b2d9      	uxtb	r1, r3
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005106:	4413      	add	r3, r2
 8005108:	3320      	adds	r3, #32
 800510a:	460a      	mov	r2, r1
 800510c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d827      	bhi.n	8005164 <BSP_TS_GetState+0x364>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <BSP_TS_GetState+0x31c>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800513b 	.word	0x0800513b
 8005124:	08005149 	.word	0x08005149
 8005128:	08005157 	.word	0x08005157
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005130:	4413      	add	r3, r2
 8005132:	331b      	adds	r3, #27
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
          break;
 8005138:	e018      	b.n	800516c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513e:	4413      	add	r3, r2
 8005140:	331b      	adds	r3, #27
 8005142:	2202      	movs	r2, #2
 8005144:	701a      	strb	r2, [r3, #0]
          break;
 8005146:	e011      	b.n	800516c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	4413      	add	r3, r2
 800514e:	331b      	adds	r3, #27
 8005150:	2203      	movs	r2, #3
 8005152:	701a      	strb	r2, [r3, #0]
          break;
 8005154:	e00a      	b.n	800516c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515a:	4413      	add	r3, r2
 800515c:	331b      	adds	r3, #27
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
          break;
 8005162:	e003      	b.n	800516c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800516a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800516c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516e:	3301      	adds	r3, #1
 8005170:	64bb      	str	r3, [r7, #72]	; 0x48
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517a:	4293      	cmp	r3, r2
 800517c:	f4ff ae61 	bcc.w	8004e42 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f813 	bl	80051ac <BSP_TS_Get_GestureId>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800518c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005190:	4618      	mov	r0, r3
 8005192:	3754      	adds	r7, #84	; 0x54
 8005194:	46bd      	mov	sp, r7
 8005196:	bd90      	pop	{r4, r7, pc}
 8005198:	20001560 	.word	0x20001560
 800519c:	20001568 	.word	0x20001568
 80051a0:	20001562 	.word	0x20001562
 80051a4:	2000157c 	.word	0x2000157c
 80051a8:	20001565 	.word	0x20001565

080051ac <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <BSP_TS_Get_GestureId+0x90>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f107 0208 	add.w	r2, r7, #8
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fb fbd6 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b18      	cmp	r3, #24
 80051d2:	d01b      	beq.n	800520c <BSP_TS_Get_GestureId+0x60>
 80051d4:	2b18      	cmp	r3, #24
 80051d6:	d806      	bhi.n	80051e6 <BSP_TS_Get_GestureId+0x3a>
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d00f      	beq.n	80051fc <BSP_TS_Get_GestureId+0x50>
 80051dc:	2b14      	cmp	r3, #20
 80051de:	d011      	beq.n	8005204 <BSP_TS_Get_GestureId+0x58>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <BSP_TS_Get_GestureId+0x48>
 80051e4:	e022      	b.n	800522c <BSP_TS_Get_GestureId+0x80>
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d018      	beq.n	800521c <BSP_TS_Get_GestureId+0x70>
 80051ea:	2b49      	cmp	r3, #73	; 0x49
 80051ec:	d01a      	beq.n	8005224 <BSP_TS_Get_GestureId+0x78>
 80051ee:	2b1c      	cmp	r3, #28
 80051f0:	d010      	beq.n	8005214 <BSP_TS_Get_GestureId+0x68>
 80051f2:	e01b      	b.n	800522c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80051fa:	e01a      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005202:	e016      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800520a:	e012      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2203      	movs	r2, #3
 8005210:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005212:	e00e      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2204      	movs	r2, #4
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800521a:	e00a      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2205      	movs	r2, #5
 8005220:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005222:	e006      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2206      	movs	r2, #6
 8005228:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800522a:	e002      	b.n	8005232 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20001565 	.word	0x20001565

08005240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <HAL_MspInit+0x4c>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <HAL_MspInit+0x4c>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005250:	6413      	str	r3, [r2, #64]	; 0x40
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <HAL_MspInit+0x4c>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_MspInit+0x4c>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	4a0a      	ldr	r2, [pc, #40]	; (800528c <HAL_MspInit+0x4c>)
 8005264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005268:	6453      	str	r3, [r2, #68]	; 0x44
 800526a:	4b08      	ldr	r3, [pc, #32]	; (800528c <HAL_MspInit+0x4c>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005276:	2200      	movs	r2, #0
 8005278:	210f      	movs	r1, #15
 800527a:	f06f 0001 	mvn.w	r0, #1
 800527e:	f001 faf5 	bl	800686c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800

08005290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	; 0x30
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 031c 	add.w	r3, r7, #28
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <HAL_ADC_MspInit+0xc8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d124      	bne.n	80052fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <HAL_ADC_MspInit+0xcc>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4a29      	ldr	r2, [pc, #164]	; (800535c <HAL_ADC_MspInit+0xcc>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_ADC_MspInit+0xcc>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_ADC_MspInit+0xcc>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	4a23      	ldr	r2, [pc, #140]	; (800535c <HAL_ADC_MspInit+0xcc>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6313      	str	r3, [r2, #48]	; 0x30
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <HAL_ADC_MspInit+0xcc>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052e6:	2303      	movs	r3, #3
 80052e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ee:	f107 031c 	add.w	r3, r7, #28
 80052f2:	4619      	mov	r1, r3
 80052f4:	481a      	ldr	r0, [pc, #104]	; (8005360 <HAL_ADC_MspInit+0xd0>)
 80052f6:	f001 fff9 	bl	80072ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80052fa:	e029      	b.n	8005350 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_ADC_MspInit+0xd4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d124      	bne.n	8005350 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005306:	4b15      	ldr	r3, [pc, #84]	; (800535c <HAL_ADC_MspInit+0xcc>)
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	4a14      	ldr	r2, [pc, #80]	; (800535c <HAL_ADC_MspInit+0xcc>)
 800530c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005310:	6453      	str	r3, [r2, #68]	; 0x44
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <HAL_ADC_MspInit+0xcc>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800531e:	4b0f      	ldr	r3, [pc, #60]	; (800535c <HAL_ADC_MspInit+0xcc>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a0e      	ldr	r2, [pc, #56]	; (800535c <HAL_ADC_MspInit+0xcc>)
 8005324:	f043 0320 	orr.w	r3, r3, #32
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_ADC_MspInit+0xcc>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8005336:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800533a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800533c:	2303      	movs	r3, #3
 800533e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005344:	f107 031c 	add.w	r3, r7, #28
 8005348:	4619      	mov	r1, r3
 800534a:	4807      	ldr	r0, [pc, #28]	; (8005368 <HAL_ADC_MspInit+0xd8>)
 800534c:	f001 ffce 	bl	80072ec <HAL_GPIO_Init>
}
 8005350:	bf00      	nop
 8005352:	3730      	adds	r7, #48	; 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40012000 	.word	0x40012000
 800535c:	40023800 	.word	0x40023800
 8005360:	40020000 	.word	0x40020000
 8005364:	40012200 	.word	0x40012200
 8005368:	40021400 	.word	0x40021400

0800536c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_DAC_MspInit+0x84>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d12b      	bne.n	80053e6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800538e:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <HAL_DAC_MspInit+0x88>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <HAL_DAC_MspInit+0x88>)
 8005394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005398:	6413      	str	r3, [r2, #64]	; 0x40
 800539a:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <HAL_DAC_MspInit+0x88>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <HAL_DAC_MspInit+0x88>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <HAL_DAC_MspInit+0x88>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6313      	str	r3, [r2, #48]	; 0x30
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_DAC_MspInit+0x88>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80053be:	2310      	movs	r3, #16
 80053c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053c2:	2303      	movs	r3, #3
 80053c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ca:	f107 0314 	add.w	r3, r7, #20
 80053ce:	4619      	mov	r1, r3
 80053d0:	4809      	ldr	r0, [pc, #36]	; (80053f8 <HAL_DAC_MspInit+0x8c>)
 80053d2:	f001 ff8b 	bl	80072ec <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80053d6:	2200      	movs	r2, #0
 80053d8:	2100      	movs	r1, #0
 80053da:	2036      	movs	r0, #54	; 0x36
 80053dc:	f001 fa46 	bl	800686c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053e0:	2036      	movs	r0, #54	; 0x36
 80053e2:	f001 fa5f 	bl	80068a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80053e6:	bf00      	nop
 80053e8:	3728      	adds	r7, #40	; 0x28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40007400 	.word	0x40007400
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40020000 	.word	0x40020000

080053fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <HAL_DMA2D_MspInit+0x38>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10b      	bne.n	8005426 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800540e:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_DMA2D_MspInit+0x3c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <HAL_DMA2D_MspInit+0x3c>)
 8005414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005418:	6313      	str	r3, [r2, #48]	; 0x30
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <HAL_DMA2D_MspInit+0x3c>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	4002b000 	.word	0x4002b000
 8005438:	40023800 	.word	0x40023800

0800543c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005444:	f107 031c 	add.w	r3, r7, #28
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <HAL_I2C_MspInit+0xdc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d129      	bne.n	80054b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_I2C_MspInit+0xe0>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_I2C_MspInit+0xe0>)
 8005464:	f043 0302 	orr.w	r3, r3, #2
 8005468:	6313      	str	r3, [r2, #48]	; 0x30
 800546a:	4b2c      	ldr	r3, [pc, #176]	; (800551c <HAL_I2C_MspInit+0xe0>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8005476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800547a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800547c:	2312      	movs	r3, #18
 800547e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005480:	2301      	movs	r3, #1
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005484:	2300      	movs	r3, #0
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005488:	2304      	movs	r3, #4
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800548c:	f107 031c 	add.w	r3, r7, #28
 8005490:	4619      	mov	r1, r3
 8005492:	4823      	ldr	r0, [pc, #140]	; (8005520 <HAL_I2C_MspInit+0xe4>)
 8005494:	f001 ff2a 	bl	80072ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_I2C_MspInit+0xe0>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	4a1f      	ldr	r2, [pc, #124]	; (800551c <HAL_I2C_MspInit+0xe0>)
 800549e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054a2:	6413      	str	r3, [r2, #64]	; 0x40
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_I2C_MspInit+0xe0>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80054b0:	e02d      	b.n	800550e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_I2C_MspInit+0xe8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d128      	bne.n	800550e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_I2C_MspInit+0xe0>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_I2C_MspInit+0xe0>)
 80054c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c6:	6313      	str	r3, [r2, #48]	; 0x30
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_I2C_MspInit+0xe0>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80054d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80054d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054da:	2312      	movs	r3, #18
 80054dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054de:	2301      	movs	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80054e6:	2304      	movs	r3, #4
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80054ea:	f107 031c 	add.w	r3, r7, #28
 80054ee:	4619      	mov	r1, r3
 80054f0:	480d      	ldr	r0, [pc, #52]	; (8005528 <HAL_I2C_MspInit+0xec>)
 80054f2:	f001 fefb 	bl	80072ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_I2C_MspInit+0xe0>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	4a08      	ldr	r2, [pc, #32]	; (800551c <HAL_I2C_MspInit+0xe0>)
 80054fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005500:	6413      	str	r3, [r2, #64]	; 0x40
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_I2C_MspInit+0xe0>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	bf00      	nop
 8005510:	3730      	adds	r7, #48	; 0x30
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40005400 	.word	0x40005400
 800551c:	40023800 	.word	0x40023800
 8005520:	40020400 	.word	0x40020400
 8005524:	40005c00 	.word	0x40005c00
 8005528:	40021c00 	.word	0x40021c00

0800552c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a15      	ldr	r2, [pc, #84]	; (8005590 <HAL_I2C_MspDeInit+0x64>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d110      	bne.n	8005560 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_I2C_MspDeInit+0x68>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a14      	ldr	r2, [pc, #80]	; (8005594 <HAL_I2C_MspDeInit+0x68>)
 8005544:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005548:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800554a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800554e:	4812      	ldr	r0, [pc, #72]	; (8005598 <HAL_I2C_MspDeInit+0x6c>)
 8005550:	f002 f876 	bl	8007640 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8005554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005558:	480f      	ldr	r0, [pc, #60]	; (8005598 <HAL_I2C_MspDeInit+0x6c>)
 800555a:	f002 f871 	bl	8007640 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800555e:	e013      	b.n	8005588 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <HAL_I2C_MspDeInit+0x70>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d10e      	bne.n	8005588 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <HAL_I2C_MspDeInit+0x68>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <HAL_I2C_MspDeInit+0x68>)
 8005570:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005574:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	4809      	ldr	r0, [pc, #36]	; (80055a0 <HAL_I2C_MspDeInit+0x74>)
 800557a:	f002 f861 	bl	8007640 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800557e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005582:	4807      	ldr	r0, [pc, #28]	; (80055a0 <HAL_I2C_MspDeInit+0x74>)
 8005584:	f002 f85c 	bl	8007640 <HAL_GPIO_DeInit>
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40005400 	.word	0x40005400
 8005594:	40023800 	.word	0x40023800
 8005598:	40020400 	.word	0x40020400
 800559c:	40005c00 	.word	0x40005c00
 80055a0:	40021c00 	.word	0x40021c00

080055a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a55      	ldr	r2, [pc, #340]	; (8005718 <HAL_LTDC_MspInit+0x174>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f040 80a3 	bne.w	800570e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80055c8:	4b54      	ldr	r3, [pc, #336]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055cc:	4a53      	ldr	r2, [pc, #332]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055d2:	6453      	str	r3, [r2, #68]	; 0x44
 80055d4:	4b51      	ldr	r3, [pc, #324]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055e0:	4b4e      	ldr	r3, [pc, #312]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	4a4d      	ldr	r2, [pc, #308]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055e6:	f043 0310 	orr.w	r3, r3, #16
 80055ea:	6313      	str	r3, [r2, #48]	; 0x30
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80055f8:	4b48      	ldr	r3, [pc, #288]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	4a47      	ldr	r2, [pc, #284]	; (800571c <HAL_LTDC_MspInit+0x178>)
 80055fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005602:	6313      	str	r3, [r2, #48]	; 0x30
 8005604:	4b45      	ldr	r3, [pc, #276]	; (800571c <HAL_LTDC_MspInit+0x178>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8005610:	4b42      	ldr	r3, [pc, #264]	; (800571c <HAL_LTDC_MspInit+0x178>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	4a41      	ldr	r2, [pc, #260]	; (800571c <HAL_LTDC_MspInit+0x178>)
 8005616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800561a:	6313      	str	r3, [r2, #48]	; 0x30
 800561c:	4b3f      	ldr	r3, [pc, #252]	; (800571c <HAL_LTDC_MspInit+0x178>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005628:	4b3c      	ldr	r3, [pc, #240]	; (800571c <HAL_LTDC_MspInit+0x178>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	4a3b      	ldr	r2, [pc, #236]	; (800571c <HAL_LTDC_MspInit+0x178>)
 800562e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005632:	6313      	str	r3, [r2, #48]	; 0x30
 8005634:	4b39      	ldr	r3, [pc, #228]	; (800571c <HAL_LTDC_MspInit+0x178>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005640:	4b36      	ldr	r3, [pc, #216]	; (800571c <HAL_LTDC_MspInit+0x178>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	4a35      	ldr	r2, [pc, #212]	; (800571c <HAL_LTDC_MspInit+0x178>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	6313      	str	r3, [r2, #48]	; 0x30
 800564c:	4b33      	ldr	r3, [pc, #204]	; (800571c <HAL_LTDC_MspInit+0x178>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005658:	2310      	movs	r3, #16
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565c:	2302      	movs	r3, #2
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005660:	2300      	movs	r3, #0
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005664:	2300      	movs	r3, #0
 8005666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005668:	230e      	movs	r3, #14
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800566c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005670:	4619      	mov	r1, r3
 8005672:	482b      	ldr	r0, [pc, #172]	; (8005720 <HAL_LTDC_MspInit+0x17c>)
 8005674:	f001 fe3a 	bl	80072ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005678:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567e:	2302      	movs	r3, #2
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005682:	2300      	movs	r3, #0
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005686:	2300      	movs	r3, #0
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800568a:	230e      	movs	r3, #14
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800568e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005692:	4619      	mov	r1, r3
 8005694:	4823      	ldr	r0, [pc, #140]	; (8005724 <HAL_LTDC_MspInit+0x180>)
 8005696:	f001 fe29 	bl	80072ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800569a:	23f7      	movs	r3, #247	; 0xf7
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800569e:	2302      	movs	r3, #2
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a6:	2300      	movs	r3, #0
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056aa:	230e      	movs	r3, #14
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80056ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b2:	4619      	mov	r1, r3
 80056b4:	481c      	ldr	r0, [pc, #112]	; (8005728 <HAL_LTDC_MspInit+0x184>)
 80056b6:	f001 fe19 	bl	80072ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80056ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c0:	2302      	movs	r3, #2
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c8:	2300      	movs	r3, #0
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80056cc:	2309      	movs	r3, #9
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80056d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056d4:	4619      	mov	r1, r3
 80056d6:	4815      	ldr	r0, [pc, #84]	; (800572c <HAL_LTDC_MspInit+0x188>)
 80056d8:	f001 fe08 	bl	80072ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80056dc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e2:	2302      	movs	r3, #2
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ea:	2300      	movs	r3, #0
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056ee:	230e      	movs	r3, #14
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80056f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f6:	4619      	mov	r1, r3
 80056f8:	480d      	ldr	r0, [pc, #52]	; (8005730 <HAL_LTDC_MspInit+0x18c>)
 80056fa:	f001 fdf7 	bl	80072ec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2105      	movs	r1, #5
 8005702:	2058      	movs	r0, #88	; 0x58
 8005704:	f001 f8b2 	bl	800686c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005708:	2058      	movs	r0, #88	; 0x58
 800570a:	f001 f8cb 	bl	80068a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800570e:	bf00      	nop
 8005710:	3738      	adds	r7, #56	; 0x38
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40016800 	.word	0x40016800
 800571c:	40023800 	.word	0x40023800
 8005720:	40021000 	.word	0x40021000
 8005724:	40022400 	.word	0x40022400
 8005728:	40022800 	.word	0x40022800
 800572c:	40021800 	.word	0x40021800
 8005730:	40022000 	.word	0x40022000

08005734 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a07      	ldr	r2, [pc, #28]	; (8005760 <HAL_RTC_MspInit+0x2c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d105      	bne.n	8005752 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <HAL_RTC_MspInit+0x30>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	4a06      	ldr	r2, [pc, #24]	; (8005764 <HAL_RTC_MspInit+0x30>)
 800574c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005750:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40002800 	.word	0x40002800
 8005764:	40023800 	.word	0x40023800

08005768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a2d      	ldr	r2, [pc, #180]	; (800583c <HAL_SPI_MspInit+0xd4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d154      	bne.n	8005834 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 8005790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005794:	6413      	str	r3, [r2, #64]	; 0x40
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80057a2:	4b27      	ldr	r3, [pc, #156]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	4a26      	ldr	r2, [pc, #152]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ac:	6313      	str	r3, [r2, #48]	; 0x30
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ba:	4b21      	ldr	r3, [pc, #132]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	4a20      	ldr	r2, [pc, #128]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6313      	str	r3, [r2, #48]	; 0x30
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_SPI_MspInit+0xd8>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80057d2:	2302      	movs	r3, #2
 80057d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d6:	2302      	movs	r3, #2
 80057d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057de:	2300      	movs	r3, #0
 80057e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80057e2:	2305      	movs	r3, #5
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80057e6:	f107 0314 	add.w	r3, r7, #20
 80057ea:	4619      	mov	r1, r3
 80057ec:	4815      	ldr	r0, [pc, #84]	; (8005844 <HAL_SPI_MspInit+0xdc>)
 80057ee:	f001 fd7d 	bl	80072ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057f2:	2301      	movs	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f6:	2302      	movs	r3, #2
 80057f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fe:	2303      	movs	r3, #3
 8005800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005802:	2305      	movs	r3, #5
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	4619      	mov	r1, r3
 800580c:	480d      	ldr	r0, [pc, #52]	; (8005844 <HAL_SPI_MspInit+0xdc>)
 800580e:	f001 fd6d 	bl	80072ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005812:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005818:	2302      	movs	r3, #2
 800581a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005820:	2303      	movs	r3, #3
 8005822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005824:	2305      	movs	r3, #5
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005828:	f107 0314 	add.w	r3, r7, #20
 800582c:	4619      	mov	r1, r3
 800582e:	4806      	ldr	r0, [pc, #24]	; (8005848 <HAL_SPI_MspInit+0xe0>)
 8005830:	f001 fd5c 	bl	80072ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005834:	bf00      	nop
 8005836:	3728      	adds	r7, #40	; 0x28
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40003800 	.word	0x40003800
 8005840:	40023800 	.word	0x40023800
 8005844:	40022000 	.word	0x40022000
 8005848:	40020400 	.word	0x40020400

0800584c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800584c:	b480      	push	{r7}
 800584e:	b089      	sub	sp, #36	; 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2e      	ldr	r2, [pc, #184]	; (8005914 <HAL_TIM_Base_MspInit+0xc8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d10c      	bne.n	8005878 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	6453      	str	r3, [r2, #68]	; 0x44
 800586a:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005876:	e046      	b.n	8005906 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d10c      	bne.n	800589c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005882:	4b25      	ldr	r3, [pc, #148]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a24      	ldr	r2, [pc, #144]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	69bb      	ldr	r3, [r7, #24]
}
 800589a:	e034      	b.n	8005906 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <HAL_TIM_Base_MspInit+0xd0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10c      	bne.n	80058c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	6413      	str	r3, [r2, #64]	; 0x40
 80058b2:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	697b      	ldr	r3, [r7, #20]
}
 80058be:	e022      	b.n	8005906 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <HAL_TIM_Base_MspInit+0xd4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10c      	bne.n	80058e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80058ca:	4b13      	ldr	r3, [pc, #76]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058d0:	f043 0308 	orr.w	r3, r3, #8
 80058d4:	6413      	str	r3, [r2, #64]	; 0x40
 80058d6:	4b10      	ldr	r3, [pc, #64]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	693b      	ldr	r3, [r7, #16]
}
 80058e2:	e010      	b.n	8005906 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a0e      	ldr	r2, [pc, #56]	; (8005924 <HAL_TIM_Base_MspInit+0xd8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10b      	bne.n	8005906 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058f4:	f043 0302 	orr.w	r3, r3, #2
 80058f8:	6453      	str	r3, [r2, #68]	; 0x44
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <HAL_TIM_Base_MspInit+0xcc>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	bf00      	nop
 8005908:	3724      	adds	r7, #36	; 0x24
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40010000 	.word	0x40010000
 8005918:	40023800 	.word	0x40023800
 800591c:	40000400 	.word	0x40000400
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40010400 	.word	0x40010400

08005928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005930:	f107 0314 	add.w	r3, r7, #20
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <HAL_TIM_MspPostInit+0xa8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d11c      	bne.n	8005984 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800594a:	4b22      	ldr	r3, [pc, #136]	; (80059d4 <HAL_TIM_MspPostInit+0xac>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_TIM_MspPostInit+0xac>)
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	6313      	str	r3, [r2, #48]	; 0x30
 8005956:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <HAL_TIM_MspPostInit+0xac>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005962:	2310      	movs	r3, #16
 8005964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005966:	2302      	movs	r3, #2
 8005968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596e:	2300      	movs	r3, #0
 8005970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005972:	2302      	movs	r3, #2
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005976:	f107 0314 	add.w	r3, r7, #20
 800597a:	4619      	mov	r1, r3
 800597c:	4816      	ldr	r0, [pc, #88]	; (80059d8 <HAL_TIM_MspPostInit+0xb0>)
 800597e:	f001 fcb5 	bl	80072ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005982:	e020      	b.n	80059c6 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a14      	ldr	r2, [pc, #80]	; (80059dc <HAL_TIM_MspPostInit+0xb4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d11b      	bne.n	80059c6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <HAL_TIM_MspPostInit+0xac>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <HAL_TIM_MspPostInit+0xac>)
 8005994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005998:	6313      	str	r3, [r2, #48]	; 0x30
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <HAL_TIM_MspPostInit+0xac>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059a6:	2304      	movs	r3, #4
 80059a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059aa:	2302      	movs	r3, #2
 80059ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b2:	2300      	movs	r3, #0
 80059b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80059b6:	2303      	movs	r3, #3
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80059ba:	f107 0314 	add.w	r3, r7, #20
 80059be:	4619      	mov	r1, r3
 80059c0:	4807      	ldr	r0, [pc, #28]	; (80059e0 <HAL_TIM_MspPostInit+0xb8>)
 80059c2:	f001 fc93 	bl	80072ec <HAL_GPIO_Init>
}
 80059c6:	bf00      	nop
 80059c8:	3728      	adds	r7, #40	; 0x28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40023800 	.word	0x40023800
 80059d8:	40020400 	.word	0x40020400
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40022000 	.word	0x40022000

080059e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	; 0x38
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a53      	ldr	r2, [pc, #332]	; (8005b50 <HAL_UART_MspInit+0x16c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d128      	bne.n	8005a58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005a06:	4b53      	ldr	r3, [pc, #332]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	4a52      	ldr	r2, [pc, #328]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a10:	6413      	str	r3, [r2, #64]	; 0x40
 8005a12:	4b50      	ldr	r3, [pc, #320]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	623b      	str	r3, [r7, #32]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a1e:	4b4d      	ldr	r3, [pc, #308]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	4a4c      	ldr	r2, [pc, #304]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a24:	f043 0320 	orr.w	r3, r3, #32
 8005a28:	6313      	str	r3, [r2, #48]	; 0x30
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005a36:	23c0      	movs	r3, #192	; 0xc0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a42:	2303      	movs	r3, #3
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005a46:	2308      	movs	r3, #8
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4841      	ldr	r0, [pc, #260]	; (8005b58 <HAL_UART_MspInit+0x174>)
 8005a52:	f001 fc4b 	bl	80072ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005a56:	e077      	b.n	8005b48 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a3f      	ldr	r2, [pc, #252]	; (8005b5c <HAL_UART_MspInit+0x178>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d145      	bne.n	8005aee <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a62:	4b3c      	ldr	r3, [pc, #240]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	4a3b      	ldr	r2, [pc, #236]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a68:	f043 0310 	orr.w	r3, r3, #16
 8005a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a7a:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	4a35      	ldr	r2, [pc, #212]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	6313      	str	r3, [r2, #48]	; 0x30
 8005a86:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a92:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4a2f      	ldr	r2, [pc, #188]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b2d      	ldr	r3, [pc, #180]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005aba:	2307      	movs	r3, #7
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4826      	ldr	r0, [pc, #152]	; (8005b60 <HAL_UART_MspInit+0x17c>)
 8005ac6:	f001 fc11 	bl	80072ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005adc:	2307      	movs	r3, #7
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	481f      	ldr	r0, [pc, #124]	; (8005b64 <HAL_UART_MspInit+0x180>)
 8005ae8:	f001 fc00 	bl	80072ec <HAL_GPIO_Init>
}
 8005aec:	e02c      	b.n	8005b48 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <HAL_UART_MspInit+0x184>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d127      	bne.n	8005b48 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005af8:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005afe:	f043 0320 	orr.w	r3, r3, #32
 8005b02:	6453      	str	r3, [r2, #68]	; 0x44
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b10:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_UART_MspInit+0x170>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005b28:	23c0      	movs	r3, #192	; 0xc0
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b34:	2303      	movs	r3, #3
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005b38:	2308      	movs	r3, #8
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b40:	4619      	mov	r1, r3
 8005b42:	480a      	ldr	r0, [pc, #40]	; (8005b6c <HAL_UART_MspInit+0x188>)
 8005b44:	f001 fbd2 	bl	80072ec <HAL_GPIO_Init>
}
 8005b48:	bf00      	nop
 8005b4a:	3738      	adds	r7, #56	; 0x38
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40007800 	.word	0x40007800
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40021400 	.word	0x40021400
 8005b5c:	40011000 	.word	0x40011000
 8005b60:	40020400 	.word	0x40020400
 8005b64:	40020000 	.word	0x40020000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	40020800 	.word	0x40020800

08005b70 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005b84:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <HAL_FMC_MspInit+0x100>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d16d      	bne.n	8005c68 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005b8c:	4b38      	ldr	r3, [pc, #224]	; (8005c70 <HAL_FMC_MspInit+0x100>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005b92:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <HAL_FMC_MspInit+0x104>)
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	4a37      	ldr	r2, [pc, #220]	; (8005c74 <HAL_FMC_MspInit+0x104>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6393      	str	r3, [r2, #56]	; 0x38
 8005b9e:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <HAL_FMC_MspInit+0x104>)
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8005baa:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005bae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	482c      	ldr	r0, [pc, #176]	; (8005c78 <HAL_FMC_MspInit+0x108>)
 8005bc6:	f001 fb91 	bl	80072ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8005bca:	f248 1333 	movw	r3, #33075	; 0x8133
 8005bce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005bdc:	230c      	movs	r3, #12
 8005bde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4825      	ldr	r0, [pc, #148]	; (8005c7c <HAL_FMC_MspInit+0x10c>)
 8005be6:	f001 fb81 	bl	80072ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8005bea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005bee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	4619      	mov	r1, r3
 8005c04:	481e      	ldr	r0, [pc, #120]	; (8005c80 <HAL_FMC_MspInit+0x110>)
 8005c06:	f001 fb71 	bl	80072ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005c0a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005c0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c10:	2302      	movs	r3, #2
 8005c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c20:	1d3b      	adds	r3, r7, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4817      	ldr	r0, [pc, #92]	; (8005c84 <HAL_FMC_MspInit+0x114>)
 8005c26:	f001 fb61 	bl	80072ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8005c2a:	2328      	movs	r3, #40	; 0x28
 8005c2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c36:	2303      	movs	r3, #3
 8005c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4811      	ldr	r0, [pc, #68]	; (8005c88 <HAL_FMC_MspInit+0x118>)
 8005c44:	f001 fb52 	bl	80072ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005c48:	2308      	movs	r3, #8
 8005c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c54:	2303      	movs	r3, #3
 8005c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c58:	230c      	movs	r3, #12
 8005c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	480a      	ldr	r0, [pc, #40]	; (8005c8c <HAL_FMC_MspInit+0x11c>)
 8005c62:	f001 fb43 	bl	80072ec <HAL_GPIO_Init>
 8005c66:	e000      	b.n	8005c6a <HAL_FMC_MspInit+0xfa>
    return;
 8005c68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20001590 	.word	0x20001590
 8005c74:	40023800 	.word	0x40023800
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40021800 	.word	0x40021800
 8005c80:	40020c00 	.word	0x40020c00
 8005c84:	40021400 	.word	0x40021400
 8005c88:	40021c00 	.word	0x40021c00
 8005c8c:	40020800 	.word	0x40020800

08005c90 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005c98:	f7ff ff6a 	bl	8005b70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	2036      	movs	r0, #54	; 0x36
 8005cba:	f000 fdd7 	bl	800686c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005cbe:	2036      	movs	r0, #54	; 0x36
 8005cc0:	f000 fdf0 	bl	80068a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <HAL_InitTick+0xa0>)
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_InitTick+0xa0>)
 8005cca:	f043 0310 	orr.w	r3, r3, #16
 8005cce:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd0:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <HAL_InitTick+0xa0>)
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cdc:	f107 0210 	add.w	r2, r7, #16
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 fbfc 	bl	80094e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005cec:	f003 fbd2 	bl	8009494 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <HAL_InitTick+0xa4>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	0c9b      	lsrs	r3, r3, #18
 8005d00:	3b01      	subs	r3, #1
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005d04:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d06:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <HAL_InitTick+0xac>)
 8005d08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005d12:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005d24:	4809      	ldr	r0, [pc, #36]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d26:	f004 fcd0 	bl	800a6ca <HAL_TIM_Base_Init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005d30:	4806      	ldr	r0, [pc, #24]	; (8005d4c <HAL_InitTick+0xa8>)
 8005d32:	f004 fcf5 	bl	800a720 <HAL_TIM_Base_Start_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	e000      	b.n	8005d3c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3730      	adds	r7, #48	; 0x30
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	431bde83 	.word	0x431bde83
 8005d4c:	20009d88 	.word	0x20009d88
 8005d50:	40001000 	.word	0x40001000

08005d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d58:	e7fe      	b.n	8005d58 <NMI_Handler+0x4>

08005d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d5e:	e7fe      	b.n	8005d5e <HardFault_Handler+0x4>

08005d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d64:	e7fe      	b.n	8005d64 <MemManage_Handler+0x4>

08005d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d6a:	e7fe      	b.n	8005d6a <BusFault_Handler+0x4>

08005d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d70:	e7fe      	b.n	8005d70 <UsageFault_Handler+0x4>

08005d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005d84:	2080      	movs	r0, #128	; 0x80
 8005d86:	f001 fd97 	bl	80078b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8005d94:	4803      	ldr	r0, [pc, #12]	; (8005da4 <TIM6_DAC_IRQHandler+0x14>)
 8005d96:	f000 fdb5 	bl	8006904 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8005d9a:	4803      	ldr	r0, [pc, #12]	; (8005da8 <TIM6_DAC_IRQHandler+0x18>)
 8005d9c:	f004 fd1f 	bl	800a7de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20009aec 	.word	0x20009aec
 8005da8:	20009d88 	.word	0x20009d88

08005dac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005db0:	4802      	ldr	r0, [pc, #8]	; (8005dbc <LTDC_IRQHandler+0x10>)
 8005db2:	f002 fc19 	bl	80085e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005db6:	bf00      	nop
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20009934 	.word	0x20009934

08005dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005dc8:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <_sbrk+0x5c>)
 8005dca:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <_sbrk+0x60>)
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005dd4:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <_sbrk+0x64>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <_sbrk+0x64>)
 8005dde:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <_sbrk+0x68>)
 8005de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <_sbrk+0x64>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d207      	bcs.n	8005e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005df0:	f008 fd96 	bl	800e920 <__errno>
 8005df4:	4602      	mov	r2, r0
 8005df6:	230c      	movs	r3, #12
 8005df8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	e009      	b.n	8005e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <_sbrk+0x64>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <_sbrk+0x64>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	4a05      	ldr	r2, [pc, #20]	; (8005e24 <_sbrk+0x64>)
 8005e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20050000 	.word	0x20050000
 8005e20:	00000400 	.word	0x00000400
 8005e24:	20001594 	.word	0x20001594
 8005e28:	20009dd0 	.word	0x20009dd0

08005e2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <SystemInit+0x28>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	4a07      	ldr	r2, [pc, #28]	; (8005e54 <SystemInit+0x28>)
 8005e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e40:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <SystemInit+0x28>)
 8005e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e46:	609a      	str	r2, [r3, #8]
#endif
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	e000ed00 	.word	0xe000ed00

08005e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e5e:	e003      	b.n	8005e68 <LoopCopyDataInit>

08005e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e66:	3104      	adds	r1, #4

08005e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e68:	480b      	ldr	r0, [pc, #44]	; (8005e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e70:	d3f6      	bcc.n	8005e60 <CopyDataInit>
  ldr  r2, =_sbss
 8005e72:	4a0b      	ldr	r2, [pc, #44]	; (8005ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005e74:	e002      	b.n	8005e7c <LoopFillZerobss>

08005e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005e78:	f842 3b04 	str.w	r3, [r2], #4

08005e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e80:	d3f9      	bcc.n	8005e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e82:	f7ff ffd3 	bl	8005e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e86:	f008 fd51 	bl	800e92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e8a:	f7fa fe67 	bl	8000b5c <main>
  bx  lr    
 8005e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e90:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005e94:	08011314 	.word	0x08011314
  ldr  r0, =_sdata
 8005e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e9c:	200010a4 	.word	0x200010a4
  ldr  r2, =_sbss
 8005ea0:	200010a4 	.word	0x200010a4
  ldr  r3, = _ebss
 8005ea4:	20009dd0 	.word	0x20009dd0

08005ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ea8:	e7fe      	b.n	8005ea8 <ADC_IRQHandler>

08005eaa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eae:	2003      	movs	r0, #3
 8005eb0:	f000 fcd1 	bl	8006856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f7ff fef5 	bl	8005ca4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005eba:	f7ff f9c1 	bl	8005240 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_IncTick+0x20>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <HAL_IncTick+0x24>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <HAL_IncTick+0x24>)
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20001038 	.word	0x20001038
 8005ee8:	20009dc8 	.word	0x20009dc8

08005eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return uwTick;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_GetTick+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20009dc8 	.word	0x20009dc8

08005f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f0c:	f7ff ffee 	bl	8005eec <HAL_GetTick>
 8005f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d005      	beq.n	8005f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_Delay+0x40>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f2a:	bf00      	nop
 8005f2c:	f7ff ffde 	bl	8005eec <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d8f7      	bhi.n	8005f2c <HAL_Delay+0x28>
  {
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20001038 	.word	0x20001038

08005f48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e031      	b.n	8005fc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff f992 	bl	8005290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <HAL_ADC_Init+0x84>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	f043 0202 	orr.w	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fab6 	bl	8006508 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	f043 0201 	orr.w	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8005fb2:	e001      	b.n	8005fb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	ffffeefd 	.word	0xffffeefd

08005fd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_ADC_Start+0x1a>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e0a0      	b.n	800612c <HAL_ADC_Start+0x15c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d018      	beq.n	8006032 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006010:	4b49      	ldr	r3, [pc, #292]	; (8006138 <HAL_ADC_Start+0x168>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a49      	ldr	r2, [pc, #292]	; (800613c <HAL_ADC_Start+0x16c>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	0c9a      	lsrs	r2, r3, #18
 800601c:	4613      	mov	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	4413      	add	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006024:	e002      	b.n	800602c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3b01      	subs	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f9      	bne.n	8006026 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b01      	cmp	r3, #1
 800603e:	d174      	bne.n	800612a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006044:	4b3e      	ldr	r3, [pc, #248]	; (8006140 <HAL_ADC_Start+0x170>)
 8006046:	4013      	ands	r3, r2
 8006048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006066:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d106      	bne.n	800608a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006080:	f023 0206 	bic.w	r2, r3, #6
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
 8006088:	e002      	b.n	8006090 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80060a2:	4b28      	ldr	r3, [pc, #160]	; (8006144 <HAL_ADC_Start+0x174>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d136      	bne.n	800612a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060ca:	609a      	str	r2, [r3, #8]
 80060cc:	e02d      	b.n	800612a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <HAL_ADC_Start+0x178>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d10e      	bne.n	80060f6 <HAL_ADC_Start+0x126>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d107      	bne.n	80060f6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060f4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_ADC_Start+0x174>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d113      	bne.n	800612a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a11      	ldr	r2, [pc, #68]	; (800614c <HAL_ADC_Start+0x17c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10e      	bne.n	800612a <HAL_ADC_Start+0x15a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006128:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	20001030 	.word	0x20001030
 800613c:	431bde83 	.word	0x431bde83
 8006140:	fffff8fe 	.word	0xfffff8fe
 8006144:	40012300 	.word	0x40012300
 8006148:	40012000 	.word	0x40012000
 800614c:	40012200 	.word	0x40012200

08006150 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616c:	d113      	bne.n	8006196 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d10b      	bne.n	8006196 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e05c      	b.n	8006250 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006196:	f7ff fea9 	bl	8005eec <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800619c:	e01a      	b.n	80061d4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d016      	beq.n	80061d4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <HAL_ADC_PollForConversion+0x6c>
 80061ac:	f7ff fe9e 	bl	8005eec <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d20b      	bcs.n	80061d4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e03d      	b.n	8006250 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d1dd      	bne.n	800619e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f06f 0212 	mvn.w	r2, #18
 80061ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d123      	bne.n	800624e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11f      	bne.n	800624e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006218:	2b00      	cmp	r3, #0
 800621a:	d006      	beq.n	800622a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006226:	2b00      	cmp	r3, #0
 8006228:	d111      	bne.n	800624e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0201 	orr.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x1c>
 800628c:	2302      	movs	r3, #2
 800628e:	e12a      	b.n	80064e6 <HAL_ADC_ConfigChannel+0x272>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b09      	cmp	r3, #9
 800629e:	d93a      	bls.n	8006316 <HAL_ADC_ConfigChannel+0xa2>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a8:	d035      	beq.n	8006316 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68d9      	ldr	r1, [r3, #12]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	3b1e      	subs	r3, #30
 80062c0:	2207      	movs	r2, #7
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43da      	mvns	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	400a      	ands	r2, r1
 80062ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a87      	ldr	r2, [pc, #540]	; (80064f4 <HAL_ADC_ConfigChannel+0x280>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10a      	bne.n	80062f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68d9      	ldr	r1, [r3, #12]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	061a      	lsls	r2, r3, #24
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062ee:	e035      	b.n	800635c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	4618      	mov	r0, r3
 8006302:	4603      	mov	r3, r0
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4403      	add	r3, r0
 8006308:	3b1e      	subs	r3, #30
 800630a:	409a      	lsls	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006314:	e022      	b.n	800635c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6919      	ldr	r1, [r3, #16]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	2207      	movs	r2, #7
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43da      	mvns	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	400a      	ands	r2, r1
 8006338:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6919      	ldr	r1, [r3, #16]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4618      	mov	r0, r3
 800634c:	4603      	mov	r3, r0
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4403      	add	r3, r0
 8006352:	409a      	lsls	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d824      	bhi.n	80063ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	3b05      	subs	r3, #5
 8006376:	221f      	movs	r2, #31
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43da      	mvns	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	400a      	ands	r2, r1
 8006384:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	4618      	mov	r0, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	3b05      	subs	r3, #5
 80063a0:	fa00 f203 	lsl.w	r2, r0, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34
 80063ac:	e04c      	b.n	8006448 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b0c      	cmp	r3, #12
 80063b4:	d824      	bhi.n	8006400 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	3b23      	subs	r3, #35	; 0x23
 80063c8:	221f      	movs	r2, #31
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43da      	mvns	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	400a      	ands	r2, r1
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	4618      	mov	r0, r3
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	3b23      	subs	r3, #35	; 0x23
 80063f2:	fa00 f203 	lsl.w	r2, r0, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
 80063fe:	e023      	b.n	8006448 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	3b41      	subs	r3, #65	; 0x41
 8006412:	221f      	movs	r2, #31
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43da      	mvns	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	400a      	ands	r2, r1
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	4618      	mov	r0, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	3b41      	subs	r3, #65	; 0x41
 800643c:	fa00 f203 	lsl.w	r2, r0, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <HAL_ADC_ConfigChannel+0x284>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d10a      	bne.n	8006468 <HAL_ADC_ConfigChannel+0x1f4>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645a:	d105      	bne.n	8006468 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800645c:	4b27      	ldr	r3, [pc, #156]	; (80064fc <HAL_ADC_ConfigChannel+0x288>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4a26      	ldr	r2, [pc, #152]	; (80064fc <HAL_ADC_ConfigChannel+0x288>)
 8006462:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006466:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a22      	ldr	r2, [pc, #136]	; (80064f8 <HAL_ADC_ConfigChannel+0x284>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d109      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x212>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b12      	cmp	r3, #18
 8006478:	d105      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800647a:	4b20      	ldr	r3, [pc, #128]	; (80064fc <HAL_ADC_ConfigChannel+0x288>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_ADC_ConfigChannel+0x288>)
 8006480:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006484:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_ADC_ConfigChannel+0x284>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d125      	bne.n	80064dc <HAL_ADC_ConfigChannel+0x268>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <HAL_ADC_ConfigChannel+0x280>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <HAL_ADC_ConfigChannel+0x22e>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b11      	cmp	r3, #17
 80064a0:	d11c      	bne.n	80064dc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80064a2:	4b16      	ldr	r3, [pc, #88]	; (80064fc <HAL_ADC_ConfigChannel+0x288>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_ADC_ConfigChannel+0x288>)
 80064a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <HAL_ADC_ConfigChannel+0x280>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d111      	bne.n	80064dc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80064b8:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_ADC_ConfigChannel+0x28c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <HAL_ADC_ConfigChannel+0x290>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	0c9a      	lsrs	r2, r3, #18
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80064ce:	e002      	b.n	80064d6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f9      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	10000012 	.word	0x10000012
 80064f8:	40012000 	.word	0x40012000
 80064fc:	40012300 	.word	0x40012300
 8006500:	20001030 	.word	0x20001030
 8006504:	431bde83 	.word	0x431bde83

08006508 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006510:	4b78      	ldr	r3, [pc, #480]	; (80066f4 <ADC_Init+0x1ec>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4a77      	ldr	r2, [pc, #476]	; (80066f4 <ADC_Init+0x1ec>)
 8006516:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800651a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800651c:	4b75      	ldr	r3, [pc, #468]	; (80066f4 <ADC_Init+0x1ec>)
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4973      	ldr	r1, [pc, #460]	; (80066f4 <ADC_Init+0x1ec>)
 8006526:	4313      	orrs	r3, r2
 8006528:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6859      	ldr	r1, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	021a      	lsls	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800655c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6859      	ldr	r1, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800657e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6899      	ldr	r1, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	4a58      	ldr	r2, [pc, #352]	; (80066f8 <ADC_Init+0x1f0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6899      	ldr	r1, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6899      	ldr	r1, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	609a      	str	r2, [r3, #8]
 80065e0:	e00f      	b.n	8006602 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006600:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0202 	bic.w	r2, r2, #2
 8006610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	005a      	lsls	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01b      	beq.n	8006668 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800664e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	3b01      	subs	r3, #1
 800665c:	035a      	lsls	r2, r3, #13
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	e007      	b.n	8006678 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006676:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	3b01      	subs	r3, #1
 8006694:	051a      	lsls	r2, r3, #20
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6899      	ldr	r1, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066ba:	025a      	lsls	r2, r3, #9
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6899      	ldr	r1, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	029a      	lsls	r2, r3, #10
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	40012300 	.word	0x40012300
 80066f8:	0f000001 	.word	0x0f000001

080066fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <__NVIC_SetPriorityGrouping+0x40>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006718:	4013      	ands	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <__NVIC_SetPriorityGrouping+0x44>)
 8006726:	4313      	orrs	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800672a:	4a04      	ldr	r2, [pc, #16]	; (800673c <__NVIC_SetPriorityGrouping+0x40>)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	60d3      	str	r3, [r2, #12]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	e000ed00 	.word	0xe000ed00
 8006740:	05fa0000 	.word	0x05fa0000

08006744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <__NVIC_GetPriorityGrouping+0x18>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	0a1b      	lsrs	r3, r3, #8
 800674e:	f003 0307 	and.w	r3, r3, #7
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	e000ed00 	.word	0xe000ed00

08006760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800676a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	db0b      	blt.n	800678a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	f003 021f 	and.w	r2, r3, #31
 8006778:	4907      	ldr	r1, [pc, #28]	; (8006798 <__NVIC_EnableIRQ+0x38>)
 800677a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	2001      	movs	r0, #1
 8006782:	fa00 f202 	lsl.w	r2, r0, r2
 8006786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	e000e100 	.word	0xe000e100

0800679c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	db0a      	blt.n	80067c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	490c      	ldr	r1, [pc, #48]	; (80067e8 <__NVIC_SetPriority+0x4c>)
 80067b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ba:	0112      	lsls	r2, r2, #4
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	440b      	add	r3, r1
 80067c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067c4:	e00a      	b.n	80067dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4908      	ldr	r1, [pc, #32]	; (80067ec <__NVIC_SetPriority+0x50>)
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	3b04      	subs	r3, #4
 80067d4:	0112      	lsls	r2, r2, #4
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	440b      	add	r3, r1
 80067da:	761a      	strb	r2, [r3, #24]
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	e000e100 	.word	0xe000e100
 80067ec:	e000ed00 	.word	0xe000ed00

080067f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f1c3 0307 	rsb	r3, r3, #7
 800680a:	2b04      	cmp	r3, #4
 800680c:	bf28      	it	cs
 800680e:	2304      	movcs	r3, #4
 8006810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	3304      	adds	r3, #4
 8006816:	2b06      	cmp	r3, #6
 8006818:	d902      	bls.n	8006820 <NVIC_EncodePriority+0x30>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3b03      	subs	r3, #3
 800681e:	e000      	b.n	8006822 <NVIC_EncodePriority+0x32>
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006824:	f04f 32ff 	mov.w	r2, #4294967295
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43da      	mvns	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	401a      	ands	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006838:	f04f 31ff 	mov.w	r1, #4294967295
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	fa01 f303 	lsl.w	r3, r1, r3
 8006842:	43d9      	mvns	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006848:	4313      	orrs	r3, r2
         );
}
 800684a:	4618      	mov	r0, r3
 800684c:	3724      	adds	r7, #36	; 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ff4c 	bl	80066fc <__NVIC_SetPriorityGrouping>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800687e:	f7ff ff61 	bl	8006744 <__NVIC_GetPriorityGrouping>
 8006882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	6978      	ldr	r0, [r7, #20]
 800688a:	f7ff ffb1 	bl	80067f0 <NVIC_EncodePriority>
 800688e:	4602      	mov	r2, r0
 8006890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff ff80 	bl	800679c <__NVIC_SetPriority>
}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff ff54 	bl	8006760 <__NVIC_EnableIRQ>
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e014      	b.n	80068fc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	791b      	ldrb	r3, [r3, #4]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe fd42 	bl	800536c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691a:	d118      	bne.n	800694e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2204      	movs	r2, #4
 8006920:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006946:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f825 	bl	8006998 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695c:	d118      	bne.n	8006990 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2204      	movs	r2, #4
 8006962:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f043 0202 	orr.w	r2, r3, #2
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006978:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f85b 	bl	8006a46 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	795b      	ldrb	r3, [r3, #5]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_DAC_ConfigChannel+0x20>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e036      	b.n	8006a3a <HAL_DAC_ConfigChannel+0x8e>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80069e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43db      	mvns	r3, r3
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4013      	ands	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	22c0      	movs	r2, #192	; 0xc0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	43da      	mvns	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	400a      	ands	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a68:	f7ff fa40 	bl	8005eec <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e099      	b.n	8006bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a98:	e00f      	b.n	8006aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a9a:	f7ff fa27 	bl	8005eec <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d908      	bls.n	8006aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e078      	b.n	8006bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e8      	bne.n	8006a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4b38      	ldr	r3, [pc, #224]	; (8006bb4 <HAL_DMA_Init+0x158>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d117      	bne.n	8006b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8bd 	bl	8006ce0 <DMA_CheckFifoParam>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2240      	movs	r2, #64	; 0x40
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e016      	b.n	8006bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f874 	bl	8006c74 <DMA_CalcBaseAndBitshift>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	223f      	movs	r2, #63	; 0x3f
 8006b96:	409a      	lsls	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	f010803f 	.word	0xf010803f

08006bb8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e050      	b.n	8006c6c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d101      	bne.n	8006bda <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e048      	b.n	8006c6c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2221      	movs	r2, #33	; 0x21
 8006c18:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f82a 	bl	8006c74 <DMA_CalcBaseAndBitshift>
 8006c20:	4603      	mov	r3, r0
 8006c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c28:	223f      	movs	r2, #63	; 0x3f
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	3b10      	subs	r3, #16
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <DMA_CalcBaseAndBitshift+0x60>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	091b      	lsrs	r3, r3, #4
 8006c8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c8e:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d908      	bls.n	8006cb4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <DMA_CalcBaseAndBitshift+0x68>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	1d1a      	adds	r2, r3, #4
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8006cb2:	e006      	b.n	8006cc2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <DMA_CalcBaseAndBitshift+0x68>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	aaaaaaab 	.word	0xaaaaaaab
 8006cd8:	080112c8 	.word	0x080112c8
 8006cdc:	fffffc00 	.word	0xfffffc00

08006ce0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d11f      	bne.n	8006d3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d855      	bhi.n	8006dac <DMA_CheckFifoParam+0xcc>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <DMA_CheckFifoParam+0x28>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d2b 	.word	0x08006d2b
 8006d10:	08006d19 	.word	0x08006d19
 8006d14:	08006dad 	.word	0x08006dad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d045      	beq.n	8006db0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d28:	e042      	b.n	8006db0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d32:	d13f      	bne.n	8006db4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d38:	e03c      	b.n	8006db4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d42:	d121      	bne.n	8006d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d836      	bhi.n	8006db8 <DMA_CheckFifoParam+0xd8>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <DMA_CheckFifoParam+0x70>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d67 	.word	0x08006d67
 8006d58:	08006d61 	.word	0x08006d61
 8006d5c:	08006d79 	.word	0x08006d79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      break;
 8006d64:	e02f      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d024      	beq.n	8006dbc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d76:	e021      	b.n	8006dbc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d80:	d11e      	bne.n	8006dc0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d86:	e01b      	b.n	8006dc0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d902      	bls.n	8006d94 <DMA_CheckFifoParam+0xb4>
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d003      	beq.n	8006d9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d92:	e018      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
      break;
 8006d98:	e015      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00e      	beq.n	8006dc4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	e00b      	b.n	8006dc4 <DMA_CheckFifoParam+0xe4>
      break;
 8006dac:	bf00      	nop
 8006dae:	e00a      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8006db0:	bf00      	nop
 8006db2:	e008      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8006db4:	bf00      	nop
 8006db6:	e006      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8006db8:	bf00      	nop
 8006dba:	e004      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      break;   
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dc4:	bf00      	nop
    }
  } 
  
  return status; 
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e039      	b.n	8006e5a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fe fafe 	bl	80053fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	f023 0107 	bic.w	r1, r3, #7
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <HAL_DMA2D_Init+0x90>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68d1      	ldr	r1, [r2, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	430b      	orrs	r3, r1
 8006e48:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	ffffc000 	.word	0xffffc000

08006e68 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_DMA2D_Start+0x1c>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e018      	b.n	8006eb6 <HAL_DMA2D_Start+0x4e>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 f988 	bl	80071b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d056      	beq.n	8006f88 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006eda:	f7ff f807 	bl	8005eec <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ee0:	e04b      	b.n	8006f7a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d023      	beq.n	8006f3c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	f043 0202 	orr.w	r2, r3, #2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f18:	f043 0201 	orr.w	r2, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2221      	movs	r2, #33	; 0x21
 8006f26:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0a5      	b.n	8007088 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d01a      	beq.n	8006f7a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006f44:	f7fe ffd2 	bl	8005eec <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <HAL_DMA2D_PollForTransfer+0x9c>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e086      	b.n	8007088 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ac      	beq.n	8006ee2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d061      	beq.n	800706e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006faa:	f7fe ff9f 	bl	8005eec <HAL_GetTick>
 8006fae:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006fb0:	e056      	b.n	8007060 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02e      	beq.n	8007022 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	f043 0202 	orr.w	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	f043 0201 	orr.w	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2229      	movs	r2, #41	; 0x29
 800700c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2204      	movs	r2, #4
 8007012:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e032      	b.n	8007088 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d01a      	beq.n	8007060 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800702a:	f7fe ff5f 	bl	8005eec <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <HAL_DMA2D_PollForTransfer+0x182>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10f      	bne.n	8007060 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2203      	movs	r2, #3
 8007050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e013      	b.n	8007088 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0a1      	beq.n	8006fb2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2212      	movs	r2, #18
 8007074:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_DMA2D_ConfigLayer+0x20>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e079      	b.n	80071a4 <HAL_DMA2D_ConfigLayer+0x114>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	3318      	adds	r3, #24
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80070da:	4b35      	ldr	r3, [pc, #212]	; (80071b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80070dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b0a      	cmp	r3, #10
 80070e4:	d003      	beq.n	80070ee <HAL_DMA2D_ConfigLayer+0x5e>
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b09      	cmp	r3, #9
 80070ec:	d107      	bne.n	80070fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e005      	b.n	800710a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d120      	bne.n	8007152 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	43db      	mvns	r3, r3
 800711a:	ea02 0103 	and.w	r1, r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	430a      	orrs	r2, r1
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b0a      	cmp	r3, #10
 8007138:	d003      	beq.n	8007142 <HAL_DMA2D_ConfigLayer+0xb2>
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b09      	cmp	r3, #9
 8007140:	d127      	bne.n	8007192 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
 8007150:	e01f      	b.n	8007192 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	43db      	mvns	r3, r3
 800715c:	ea02 0103 	and.w	r1, r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	430a      	orrs	r2, r1
 8007168:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b0a      	cmp	r3, #10
 800717a:	d003      	beq.n	8007184 <HAL_DMA2D_ConfigLayer+0xf4>
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b09      	cmp	r3, #9
 8007182:	d106      	bne.n	8007192 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007190:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	ff03000f 	.word	0xff03000f

080071b4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b08b      	sub	sp, #44	; 0x2c
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	041a      	lsls	r2, r3, #16
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ec:	d174      	bne.n	80072d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007204:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	431a      	orrs	r2, r3
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	4313      	orrs	r3, r2
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
 8007224:	e053      	b.n	80072ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d106      	bne.n	800723c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	4313      	orrs	r3, r2
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	e048      	b.n	80072ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d111      	bne.n	8007268 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	0cdb      	lsrs	r3, r3, #19
 8007248:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	0a9b      	lsrs	r3, r3, #10
 800724e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	08db      	lsrs	r3, r3, #3
 8007254:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	02db      	lsls	r3, r3, #11
 800725e:	4313      	orrs	r3, r2
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	e032      	b.n	80072ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d117      	bne.n	80072a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	0fdb      	lsrs	r3, r3, #31
 8007274:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	0cdb      	lsrs	r3, r3, #19
 800727a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	0adb      	lsrs	r3, r3, #11
 8007280:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	08db      	lsrs	r3, r3, #3
 8007286:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	029b      	lsls	r3, r3, #10
 8007290:	431a      	orrs	r2, r3
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	03db      	lsls	r3, r3, #15
 8007296:	4313      	orrs	r3, r2
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
 800729e:	e016      	b.n	80072ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	0f1b      	lsrs	r3, r3, #28
 80072a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	0d1b      	lsrs	r3, r3, #20
 80072aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	0b1b      	lsrs	r3, r3, #12
 80072b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	011a      	lsls	r2, r3, #4
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	431a      	orrs	r2, r3
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	031b      	lsls	r3, r3, #12
 80072c6:	4313      	orrs	r3, r2
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80072d6:	e003      	b.n	80072e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	60da      	str	r2, [r3, #12]
}
 80072e0:	bf00      	nop
 80072e2:	372c      	adds	r7, #44	; 0x2c
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007302:	2300      	movs	r3, #0
 8007304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	e175      	b.n	80075f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800730c:	2201      	movs	r2, #1
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4013      	ands	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	429a      	cmp	r2, r3
 8007326:	f040 8164 	bne.w	80075f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d00b      	beq.n	800734a <HAL_GPIO_Init+0x5e>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d007      	beq.n	800734a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800733e:	2b11      	cmp	r3, #17
 8007340:	d003      	beq.n	800734a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b12      	cmp	r3, #18
 8007348:	d130      	bne.n	80073ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	2203      	movs	r2, #3
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4013      	ands	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007380:	2201      	movs	r2, #1
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	43db      	mvns	r3, r3
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	4013      	ands	r3, r2
 800738e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	f003 0201 	and.w	r2, r3, #1
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	2203      	movs	r2, #3
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43db      	mvns	r3, r3
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4013      	ands	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0x100>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b12      	cmp	r3, #18
 80073ea:	d123      	bne.n	8007434 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	08da      	lsrs	r2, r3, #3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3208      	adds	r2, #8
 80073f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	220f      	movs	r2, #15
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	43db      	mvns	r3, r3
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4013      	ands	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	08da      	lsrs	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3208      	adds	r2, #8
 800742e:	69b9      	ldr	r1, [r7, #24]
 8007430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	2203      	movs	r2, #3
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 0203 	and.w	r2, r3, #3
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4313      	orrs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80be 	beq.w	80075f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007476:	4b65      	ldr	r3, [pc, #404]	; (800760c <HAL_GPIO_Init+0x320>)
 8007478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747a:	4a64      	ldr	r2, [pc, #400]	; (800760c <HAL_GPIO_Init+0x320>)
 800747c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007480:	6453      	str	r3, [r2, #68]	; 0x44
 8007482:	4b62      	ldr	r3, [pc, #392]	; (800760c <HAL_GPIO_Init+0x320>)
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800748e:	4a60      	ldr	r2, [pc, #384]	; (8007610 <HAL_GPIO_Init+0x324>)
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	3302      	adds	r3, #2
 8007496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	220f      	movs	r2, #15
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43db      	mvns	r3, r3
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	4013      	ands	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a57      	ldr	r2, [pc, #348]	; (8007614 <HAL_GPIO_Init+0x328>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d037      	beq.n	800752a <HAL_GPIO_Init+0x23e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a56      	ldr	r2, [pc, #344]	; (8007618 <HAL_GPIO_Init+0x32c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d031      	beq.n	8007526 <HAL_GPIO_Init+0x23a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a55      	ldr	r2, [pc, #340]	; (800761c <HAL_GPIO_Init+0x330>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d02b      	beq.n	8007522 <HAL_GPIO_Init+0x236>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a54      	ldr	r2, [pc, #336]	; (8007620 <HAL_GPIO_Init+0x334>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d025      	beq.n	800751e <HAL_GPIO_Init+0x232>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a53      	ldr	r2, [pc, #332]	; (8007624 <HAL_GPIO_Init+0x338>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01f      	beq.n	800751a <HAL_GPIO_Init+0x22e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a52      	ldr	r2, [pc, #328]	; (8007628 <HAL_GPIO_Init+0x33c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d019      	beq.n	8007516 <HAL_GPIO_Init+0x22a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a51      	ldr	r2, [pc, #324]	; (800762c <HAL_GPIO_Init+0x340>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <HAL_GPIO_Init+0x226>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a50      	ldr	r2, [pc, #320]	; (8007630 <HAL_GPIO_Init+0x344>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00d      	beq.n	800750e <HAL_GPIO_Init+0x222>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a4f      	ldr	r2, [pc, #316]	; (8007634 <HAL_GPIO_Init+0x348>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <HAL_GPIO_Init+0x21e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a4e      	ldr	r2, [pc, #312]	; (8007638 <HAL_GPIO_Init+0x34c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d101      	bne.n	8007506 <HAL_GPIO_Init+0x21a>
 8007502:	2309      	movs	r3, #9
 8007504:	e012      	b.n	800752c <HAL_GPIO_Init+0x240>
 8007506:	230a      	movs	r3, #10
 8007508:	e010      	b.n	800752c <HAL_GPIO_Init+0x240>
 800750a:	2308      	movs	r3, #8
 800750c:	e00e      	b.n	800752c <HAL_GPIO_Init+0x240>
 800750e:	2307      	movs	r3, #7
 8007510:	e00c      	b.n	800752c <HAL_GPIO_Init+0x240>
 8007512:	2306      	movs	r3, #6
 8007514:	e00a      	b.n	800752c <HAL_GPIO_Init+0x240>
 8007516:	2305      	movs	r3, #5
 8007518:	e008      	b.n	800752c <HAL_GPIO_Init+0x240>
 800751a:	2304      	movs	r3, #4
 800751c:	e006      	b.n	800752c <HAL_GPIO_Init+0x240>
 800751e:	2303      	movs	r3, #3
 8007520:	e004      	b.n	800752c <HAL_GPIO_Init+0x240>
 8007522:	2302      	movs	r3, #2
 8007524:	e002      	b.n	800752c <HAL_GPIO_Init+0x240>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <HAL_GPIO_Init+0x240>
 800752a:	2300      	movs	r3, #0
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	f002 0203 	and.w	r2, r2, #3
 8007532:	0092      	lsls	r2, r2, #2
 8007534:	4093      	lsls	r3, r2
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	4313      	orrs	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800753c:	4934      	ldr	r1, [pc, #208]	; (8007610 <HAL_GPIO_Init+0x324>)
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	089b      	lsrs	r3, r3, #2
 8007542:	3302      	adds	r3, #2
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800754a:	4b3c      	ldr	r3, [pc, #240]	; (800763c <HAL_GPIO_Init+0x350>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	43db      	mvns	r3, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4013      	ands	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800756e:	4a33      	ldr	r2, [pc, #204]	; (800763c <HAL_GPIO_Init+0x350>)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007574:	4b31      	ldr	r3, [pc, #196]	; (800763c <HAL_GPIO_Init+0x350>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	43db      	mvns	r3, r3
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	4013      	ands	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007598:	4a28      	ldr	r2, [pc, #160]	; (800763c <HAL_GPIO_Init+0x350>)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800759e:	4b27      	ldr	r3, [pc, #156]	; (800763c <HAL_GPIO_Init+0x350>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	43db      	mvns	r3, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	4013      	ands	r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075c2:	4a1e      	ldr	r2, [pc, #120]	; (800763c <HAL_GPIO_Init+0x350>)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	; (800763c <HAL_GPIO_Init+0x350>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	4013      	ands	r3, r2
 80075d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075ec:	4a13      	ldr	r2, [pc, #76]	; (800763c <HAL_GPIO_Init+0x350>)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b0f      	cmp	r3, #15
 80075fc:	f67f ae86 	bls.w	800730c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007600:	bf00      	nop
 8007602:	3724      	adds	r7, #36	; 0x24
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40023800 	.word	0x40023800
 8007610:	40013800 	.word	0x40013800
 8007614:	40020000 	.word	0x40020000
 8007618:	40020400 	.word	0x40020400
 800761c:	40020800 	.word	0x40020800
 8007620:	40020c00 	.word	0x40020c00
 8007624:	40021000 	.word	0x40021000
 8007628:	40021400 	.word	0x40021400
 800762c:	40021800 	.word	0x40021800
 8007630:	40021c00 	.word	0x40021c00
 8007634:	40022000 	.word	0x40022000
 8007638:	40022400 	.word	0x40022400
 800763c:	40013c00 	.word	0x40013c00

08007640 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e0d9      	b.n	8007810 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800765c:	2201      	movs	r2, #1
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4013      	ands	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	f040 80c9 	bne.w	800780a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007678:	4a6a      	ldr	r2, [pc, #424]	; (8007824 <HAL_GPIO_DeInit+0x1e4>)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	089b      	lsrs	r3, r3, #2
 800767e:	3302      	adds	r3, #2
 8007680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007684:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	220f      	movs	r2, #15
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	4013      	ands	r3, r2
 8007698:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a62      	ldr	r2, [pc, #392]	; (8007828 <HAL_GPIO_DeInit+0x1e8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d037      	beq.n	8007712 <HAL_GPIO_DeInit+0xd2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a61      	ldr	r2, [pc, #388]	; (800782c <HAL_GPIO_DeInit+0x1ec>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d031      	beq.n	800770e <HAL_GPIO_DeInit+0xce>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a60      	ldr	r2, [pc, #384]	; (8007830 <HAL_GPIO_DeInit+0x1f0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d02b      	beq.n	800770a <HAL_GPIO_DeInit+0xca>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a5f      	ldr	r2, [pc, #380]	; (8007834 <HAL_GPIO_DeInit+0x1f4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d025      	beq.n	8007706 <HAL_GPIO_DeInit+0xc6>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a5e      	ldr	r2, [pc, #376]	; (8007838 <HAL_GPIO_DeInit+0x1f8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01f      	beq.n	8007702 <HAL_GPIO_DeInit+0xc2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a5d      	ldr	r2, [pc, #372]	; (800783c <HAL_GPIO_DeInit+0x1fc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d019      	beq.n	80076fe <HAL_GPIO_DeInit+0xbe>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a5c      	ldr	r2, [pc, #368]	; (8007840 <HAL_GPIO_DeInit+0x200>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_GPIO_DeInit+0xba>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a5b      	ldr	r2, [pc, #364]	; (8007844 <HAL_GPIO_DeInit+0x204>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00d      	beq.n	80076f6 <HAL_GPIO_DeInit+0xb6>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a5a      	ldr	r2, [pc, #360]	; (8007848 <HAL_GPIO_DeInit+0x208>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d007      	beq.n	80076f2 <HAL_GPIO_DeInit+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a59      	ldr	r2, [pc, #356]	; (800784c <HAL_GPIO_DeInit+0x20c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d101      	bne.n	80076ee <HAL_GPIO_DeInit+0xae>
 80076ea:	2309      	movs	r3, #9
 80076ec:	e012      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 80076ee:	230a      	movs	r3, #10
 80076f0:	e010      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 80076f2:	2308      	movs	r3, #8
 80076f4:	e00e      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 80076f6:	2307      	movs	r3, #7
 80076f8:	e00c      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 80076fa:	2306      	movs	r3, #6
 80076fc:	e00a      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 80076fe:	2305      	movs	r3, #5
 8007700:	e008      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 8007702:	2304      	movs	r3, #4
 8007704:	e006      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 8007706:	2303      	movs	r3, #3
 8007708:	e004      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 800770a:	2302      	movs	r3, #2
 800770c:	e002      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <HAL_GPIO_DeInit+0xd4>
 8007712:	2300      	movs	r3, #0
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	f002 0203 	and.w	r2, r2, #3
 800771a:	0092      	lsls	r2, r2, #2
 800771c:	4093      	lsls	r3, r2
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	429a      	cmp	r2, r3
 8007722:	d132      	bne.n	800778a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007724:	4b4a      	ldr	r3, [pc, #296]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	43db      	mvns	r3, r3
 800772c:	4948      	ldr	r1, [pc, #288]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 800772e:	4013      	ands	r3, r2
 8007730:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007732:	4b47      	ldr	r3, [pc, #284]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	43db      	mvns	r3, r3
 800773a:	4945      	ldr	r1, [pc, #276]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 800773c:	4013      	ands	r3, r2
 800773e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007740:	4b43      	ldr	r3, [pc, #268]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	43db      	mvns	r3, r3
 8007748:	4941      	ldr	r1, [pc, #260]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 800774a:	4013      	ands	r3, r2
 800774c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800774e:	4b40      	ldr	r3, [pc, #256]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	43db      	mvns	r3, r3
 8007756:	493e      	ldr	r1, [pc, #248]	; (8007850 <HAL_GPIO_DeInit+0x210>)
 8007758:	4013      	ands	r3, r2
 800775a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	220f      	movs	r2, #15
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800776c:	4a2d      	ldr	r2, [pc, #180]	; (8007824 <HAL_GPIO_DeInit+0x1e4>)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	089b      	lsrs	r3, r3, #2
 8007772:	3302      	adds	r3, #2
 8007774:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	43da      	mvns	r2, r3
 800777c:	4829      	ldr	r0, [pc, #164]	; (8007824 <HAL_GPIO_DeInit+0x1e4>)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	089b      	lsrs	r3, r3, #2
 8007782:	400a      	ands	r2, r1
 8007784:	3302      	adds	r3, #2
 8007786:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	2103      	movs	r1, #3
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	401a      	ands	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	08da      	lsrs	r2, r3, #3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3208      	adds	r2, #8
 80077a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	220f      	movs	r2, #15
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	43db      	mvns	r3, r3
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	08d2      	lsrs	r2, r2, #3
 80077c0:	4019      	ands	r1, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3208      	adds	r2, #8
 80077c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	2103      	movs	r1, #3
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	43db      	mvns	r3, r3
 80077da:	401a      	ands	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	2101      	movs	r1, #1
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ec:	43db      	mvns	r3, r3
 80077ee:	401a      	ands	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	2103      	movs	r1, #3
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	401a      	ands	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	3301      	adds	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	f67f af22 	bls.w	800765c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007818:	bf00      	nop
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	40013800 	.word	0x40013800
 8007828:	40020000 	.word	0x40020000
 800782c:	40020400 	.word	0x40020400
 8007830:	40020800 	.word	0x40020800
 8007834:	40020c00 	.word	0x40020c00
 8007838:	40021000 	.word	0x40021000
 800783c:	40021400 	.word	0x40021400
 8007840:	40021800 	.word	0x40021800
 8007844:	40021c00 	.word	0x40021c00
 8007848:	40022000 	.word	0x40022000
 800784c:	40022400 	.word	0x40022400
 8007850:	40013c00 	.word	0x40013c00

08007854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	887b      	ldrh	r3, [r7, #2]
 8007866:	4013      	ands	r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	e001      	b.n	8007876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	807b      	strh	r3, [r7, #2]
 8007890:	4613      	mov	r3, r2
 8007892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007894:	787b      	ldrb	r3, [r7, #1]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800789a:	887a      	ldrh	r2, [r7, #2]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80078a0:	e003      	b.n	80078aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	041a      	lsls	r2, r3, #16
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	619a      	str	r2, [r3, #24]
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078c4:	695a      	ldr	r2, [r3, #20]
 80078c6:	88fb      	ldrh	r3, [r7, #6]
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d006      	beq.n	80078dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fa fb92 	bl	8002000 <HAL_GPIO_EXTI_Callback>
  }
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40013c00 	.word	0x40013c00

080078e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e07f      	b.n	80079fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fd fd94 	bl	800543c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	; 0x24
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007938:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007948:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d107      	bne.n	8007962 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	e006      	b.n	8007970 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800796e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d104      	bne.n	8007982 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6859      	ldr	r1, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4b1d      	ldr	r3, [pc, #116]	; (8007a04 <HAL_I2C_Init+0x11c>)
 800798e:	430b      	orrs	r3, r1
 8007990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	ea42 0103 	orr.w	r1, r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	021a      	lsls	r2, r3, #8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69d9      	ldr	r1, [r3, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	02008000 	.word	0x02008000

08007a08 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e021      	b.n	8007a5e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2224      	movs	r2, #36	; 0x24
 8007a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0201 	bic.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fd fd7a 	bl	800552c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	817b      	strh	r3, [r7, #10]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	813b      	strh	r3, [r7, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	f040 80f9 	bne.w	8007c82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_I2C_Mem_Write+0x34>
 8007a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0ed      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_I2C_Mem_Write+0x4e>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e0e6      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007abe:	f7fe fa15 	bl	8005eec <HAL_GetTick>
 8007ac2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	2319      	movs	r3, #25
 8007aca:	2201      	movs	r2, #1
 8007acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fad1 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e0d1      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2221      	movs	r2, #33	; 0x21
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2240      	movs	r2, #64	; 0x40
 8007aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a3a      	ldr	r2, [r7, #32]
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b08:	88f8      	ldrh	r0, [r7, #6]
 8007b0a:	893a      	ldrh	r2, [r7, #8]
 8007b0c:	8979      	ldrh	r1, [r7, #10]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4603      	mov	r3, r0
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f9e1 	bl	8007ee0 <I2C_RequestMemoryWrite>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e0a9      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2bff      	cmp	r3, #255	; 0xff
 8007b38:	d90e      	bls.n	8007b58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	22ff      	movs	r2, #255	; 0xff
 8007b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	8979      	ldrh	r1, [r7, #10]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fbb3 	bl	80082bc <I2C_TransferConfig>
 8007b56:	e00f      	b.n	8007b78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	8979      	ldrh	r1, [r7, #10]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fba2 	bl	80082bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fabb 	bl	80080f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e07b      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d034      	beq.n	8007c30 <HAL_I2C_Mem_Write+0x1c8>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d130      	bne.n	8007c30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fa4d 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e04d      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2bff      	cmp	r3, #255	; 0xff
 8007bf0:	d90e      	bls.n	8007c10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	22ff      	movs	r2, #255	; 0xff
 8007bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	8979      	ldrh	r1, [r7, #10]
 8007c00:	2300      	movs	r3, #0
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fb57 	bl	80082bc <I2C_TransferConfig>
 8007c0e:	e00f      	b.n	8007c30 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	8979      	ldrh	r1, [r7, #10]
 8007c22:	2300      	movs	r3, #0
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fb46 	bl	80082bc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d19e      	bne.n	8007b78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fa9a 	bl	8008178 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e01a      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2220      	movs	r2, #32
 8007c54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <HAL_I2C_Mem_Write+0x224>)
 8007c62:	400b      	ands	r3, r1
 8007c64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e000      	b.n	8007c84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c82:	2302      	movs	r3, #2
  }
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	fe00e800 	.word	0xfe00e800

08007c90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	4608      	mov	r0, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	817b      	strh	r3, [r7, #10]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	813b      	strh	r3, [r7, #8]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	f040 80fd 	bne.w	8007eb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_I2C_Mem_Read+0x34>
 8007cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d105      	bne.n	8007cd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0f1      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_I2C_Mem_Read+0x4e>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e0ea      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ce6:	f7fe f901 	bl	8005eec <HAL_GetTick>
 8007cea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2319      	movs	r3, #25
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f9bd 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0d5      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2222      	movs	r2, #34	; 0x22
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2240      	movs	r2, #64	; 0x40
 8007d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a3a      	ldr	r2, [r7, #32]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d30:	88f8      	ldrh	r0, [r7, #6]
 8007d32:	893a      	ldrh	r2, [r7, #8]
 8007d34:	8979      	ldrh	r1, [r7, #10]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4603      	mov	r3, r0
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f921 	bl	8007f88 <I2C_RequestMemoryRead>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0ad      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2bff      	cmp	r3, #255	; 0xff
 8007d60:	d90e      	bls.n	8007d80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	22ff      	movs	r2, #255	; 0xff
 8007d66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	8979      	ldrh	r1, [r7, #10]
 8007d70:	4b52      	ldr	r3, [pc, #328]	; (8007ebc <HAL_I2C_Mem_Read+0x22c>)
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fa9f 	bl	80082bc <I2C_TransferConfig>
 8007d7e:	e00f      	b.n	8007da0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	8979      	ldrh	r1, [r7, #10]
 8007d92:	4b4a      	ldr	r3, [pc, #296]	; (8007ebc <HAL_I2C_Mem_Read+0x22c>)
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 fa8e 	bl	80082bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2200      	movs	r2, #0
 8007da8:	2104      	movs	r1, #4
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f964 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e07c      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d034      	beq.n	8007e60 <HAL_I2C_Mem_Read+0x1d0>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d130      	bne.n	8007e60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	2200      	movs	r2, #0
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f935 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e04d      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2bff      	cmp	r3, #255	; 0xff
 8007e20:	d90e      	bls.n	8007e40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	8979      	ldrh	r1, [r7, #10]
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fa3f 	bl	80082bc <I2C_TransferConfig>
 8007e3e:	e00f      	b.n	8007e60 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	8979      	ldrh	r1, [r7, #10]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fa2e 	bl	80082bc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d19a      	bne.n	8007da0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f982 	bl	8008178 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e01a      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2220      	movs	r2, #32
 8007e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6859      	ldr	r1, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <HAL_I2C_Mem_Read+0x230>)
 8007e92:	400b      	ands	r3, r1
 8007e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e000      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	80002400 	.word	0x80002400
 8007ec0:	fe00e800 	.word	0xfe00e800

08007ec4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	817b      	strh	r3, [r7, #10]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	813b      	strh	r3, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	8979      	ldrh	r1, [r7, #10]
 8007f00:	4b20      	ldr	r3, [pc, #128]	; (8007f84 <I2C_RequestMemoryWrite+0xa4>)
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f9d7 	bl	80082bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	69b9      	ldr	r1, [r7, #24]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f8f0 	bl	80080f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e02c      	b.n	8007f7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d105      	bne.n	8007f34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f28:	893b      	ldrh	r3, [r7, #8]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	629a      	str	r2, [r3, #40]	; 0x28
 8007f32:	e015      	b.n	8007f60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f34:	893b      	ldrh	r3, [r7, #8]
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	69b9      	ldr	r1, [r7, #24]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f8d6 	bl	80080f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e012      	b.n	8007f7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f56:	893b      	ldrh	r3, [r7, #8]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2200      	movs	r2, #0
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f884 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	80002000 	.word	0x80002000

08007f88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	461a      	mov	r2, r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	817b      	strh	r3, [r7, #10]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	813b      	strh	r3, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	8979      	ldrh	r1, [r7, #10]
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <I2C_RequestMemoryRead+0xa4>)
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	2300      	movs	r3, #0
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f984 	bl	80082bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	69b9      	ldr	r1, [r7, #24]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f89d 	bl	80080f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e02c      	b.n	8008022 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d105      	bne.n	8007fda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fce:	893b      	ldrh	r3, [r7, #8]
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fd8:	e015      	b.n	8008006 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007fda:	893b      	ldrh	r3, [r7, #8]
 8007fdc:	0a1b      	lsrs	r3, r3, #8
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	69b9      	ldr	r1, [r7, #24]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f883 	bl	80080f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e012      	b.n	8008022 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ffc:	893b      	ldrh	r3, [r7, #8]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2200      	movs	r2, #0
 800800e:	2140      	movs	r1, #64	; 0x40
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f831 	bl	8008078 <I2C_WaitOnFlagUntilTimeout>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	80002000 	.word	0x80002000

08008030 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d103      	bne.n	800804e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b01      	cmp	r3, #1
 800805a:	d007      	beq.n	800806c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699a      	ldr	r2, [r3, #24]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	619a      	str	r2, [r3, #24]
  }
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008088:	e022      	b.n	80080d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d01e      	beq.n	80080d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008092:	f7fd ff2b 	bl	8005eec <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d302      	bcc.n	80080a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d113      	bne.n	80080d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ac:	f043 0220 	orr.w	r2, r3, #32
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e00f      	b.n	80080f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4013      	ands	r3, r2
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	429a      	cmp	r2, r3
 80080de:	bf0c      	ite	eq
 80080e0:	2301      	moveq	r3, #1
 80080e2:	2300      	movne	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d0cd      	beq.n	800808a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008104:	e02c      	b.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f870 	bl	80081f0 <I2C_IsAcknowledgeFailed>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e02a      	b.n	8008170 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008120:	d01e      	beq.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008122:	f7fd fee3 	bl	8005eec <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	d302      	bcc.n	8008138 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d113      	bne.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813c:	f043 0220 	orr.w	r2, r3, #32
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e007      	b.n	8008170 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b02      	cmp	r3, #2
 800816c:	d1cb      	bne.n	8008106 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008184:	e028      	b.n	80081d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f830 	bl	80081f0 <I2C_IsAcknowledgeFailed>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e026      	b.n	80081e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819a:	f7fd fea7 	bl	8005eec <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d302      	bcc.n	80081b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d113      	bne.n	80081d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b4:	f043 0220 	orr.w	r2, r3, #32
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e007      	b.n	80081e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d1cf      	bne.n	8008186 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f003 0310 	and.w	r3, r3, #16
 8008206:	2b10      	cmp	r3, #16
 8008208:	d151      	bne.n	80082ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800820a:	e022      	b.n	8008252 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d01e      	beq.n	8008252 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008214:	f7fd fe6a 	bl	8005eec <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <I2C_IsAcknowledgeFailed+0x3a>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d113      	bne.n	8008252 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e02e      	b.n	80082b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b20      	cmp	r3, #32
 800825e:	d1d5      	bne.n	800820c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2210      	movs	r2, #16
 8008266:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2220      	movs	r2, #32
 800826e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fedd 	bl	8008030 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8008282:	400b      	ands	r3, r1
 8008284:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828a:	f043 0204 	orr.w	r2, r3, #4
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2220      	movs	r2, #32
 8008296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	fe00e800 	.word	0xfe00e800

080082bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	817b      	strh	r3, [r7, #10]
 80082ca:	4613      	mov	r3, r2
 80082cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	0d5b      	lsrs	r3, r3, #21
 80082d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <I2C_TransferConfig+0x58>)
 80082de:	430b      	orrs	r3, r1
 80082e0:	43db      	mvns	r3, r3
 80082e2:	ea02 0103 	and.w	r1, r2, r3
 80082e6:	897b      	ldrh	r3, [r7, #10]
 80082e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80082ec:	7a7b      	ldrb	r3, [r7, #9]
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	431a      	orrs	r2, r3
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	03ff63ff 	.word	0x03ff63ff

08008318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b20      	cmp	r3, #32
 800832c:	d138      	bne.n	80083a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008338:	2302      	movs	r3, #2
 800833a:	e032      	b.n	80083a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2224      	movs	r2, #36	; 0x24
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0201 	bic.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800836a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6819      	ldr	r1, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d139      	bne.n	8008438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e033      	b.n	800843a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2224      	movs	r2, #36	; 0x24
 80083de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f042 0201 	orr.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	e000      	b.n	800843a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008438:	2302      	movs	r3, #2
  }
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e0bf      	b.n	80085da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fd f898 	bl	80055a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800848a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6999      	ldr	r1, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80084a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6899      	ldr	r1, [r3, #8]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	4b4a      	ldr	r3, [pc, #296]	; (80085e4 <HAL_LTDC_Init+0x19c>)
 80084bc:	400b      	ands	r3, r1
 80084be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6899      	ldr	r1, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68d9      	ldr	r1, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4b3e      	ldr	r3, [pc, #248]	; (80085e4 <HAL_LTDC_Init+0x19c>)
 80084ea:	400b      	ands	r3, r1
 80084ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	041b      	lsls	r3, r3, #16
 80084f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68d9      	ldr	r1, [r3, #12]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1a      	ldr	r2, [r3, #32]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6919      	ldr	r1, [r3, #16]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b33      	ldr	r3, [pc, #204]	; (80085e4 <HAL_LTDC_Init+0x19c>)
 8008518:	400b      	ands	r3, r1
 800851a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6919      	ldr	r1, [r3, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6959      	ldr	r1, [r3, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	4b27      	ldr	r3, [pc, #156]	; (80085e4 <HAL_LTDC_Init+0x19c>)
 8008546:	400b      	ands	r3, r1
 8008548:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6959      	ldr	r1, [r3, #20]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	431a      	orrs	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800858a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0206 	orr.w	r2, r2, #6
 80085b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	f000f800 	.word	0xf000f800

080085e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d023      	beq.n	8008652 <HAL_LTDC_IRQHandler+0x6a>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01e      	beq.n	8008652 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0204 	bic.w	r2, r2, #4
 8008622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2204      	movs	r2, #4
 800862a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008632:	f043 0201 	orr.w	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2204      	movs	r2, #4
 8008640:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f86f 	bl	8008730 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d023      	beq.n	80086a4 <HAL_LTDC_IRQHandler+0xbc>
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01e      	beq.n	80086a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0202 	bic.w	r2, r2, #2
 8008674:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2202      	movs	r2, #2
 800867c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008684:	f043 0202 	orr.w	r2, r3, #2
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2204      	movs	r2, #4
 8008692:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f846 	bl	8008730 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01b      	beq.n	80086e6 <HAL_LTDC_IRQHandler+0xfe>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d016      	beq.n	80086e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f82f 	bl	8008744 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01b      	beq.n	8008728 <HAL_LTDC_IRQHandler+0x140>
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d016      	beq.n	8008728 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0208 	bic.w	r2, r2, #8
 8008708:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2208      	movs	r2, #8
 8008710:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f818 	bl	8008758 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800876c:	b5b0      	push	{r4, r5, r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800877e:	2b01      	cmp	r3, #1
 8008780:	d101      	bne.n	8008786 <HAL_LTDC_ConfigLayer+0x1a>
 8008782:	2302      	movs	r3, #2
 8008784:	e02c      	b.n	80087e0 <HAL_LTDC_ConfigLayer+0x74>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2202      	movs	r2, #2
 8008792:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2134      	movs	r1, #52	; 0x34
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	4413      	add	r3, r2
 80087a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4614      	mov	r4, r2
 80087aa:	461d      	mov	r5, r3
 80087ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f81f 	bl	8008804 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2201      	movs	r2, #1
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bdb0      	pop	{r4, r5, r7, pc}

080087e8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80087f6:	b2db      	uxtb	r3, r3
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008804:	b480      	push	{r7}
 8008806:	b089      	sub	sp, #36	; 0x24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	0c1b      	lsrs	r3, r3, #16
 800881c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008820:	4413      	add	r3, r2
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	01db      	lsls	r3, r3, #7
 8008830:	4413      	add	r3, r2
 8008832:	3384      	adds	r3, #132	; 0x84
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	4611      	mov	r1, r2
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	01d2      	lsls	r2, r2, #7
 8008840:	440a      	add	r2, r1
 8008842:	3284      	adds	r2, #132	; 0x84
 8008844:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008848:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	0c1b      	lsrs	r3, r3, #16
 8008856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800885a:	4413      	add	r3, r2
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4619      	mov	r1, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	01db      	lsls	r3, r3, #7
 8008868:	440b      	add	r3, r1
 800886a:	3384      	adds	r3, #132	; 0x84
 800886c:	4619      	mov	r1, r3
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4313      	orrs	r3, r2
 8008872:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008882:	4413      	add	r3, r2
 8008884:	041b      	lsls	r3, r3, #16
 8008886:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	01db      	lsls	r3, r3, #7
 8008892:	4413      	add	r3, r2
 8008894:	3384      	adds	r3, #132	; 0x84
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	6812      	ldr	r2, [r2, #0]
 800889c:	4611      	mov	r1, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	01d2      	lsls	r2, r2, #7
 80088a2:	440a      	add	r2, r1
 80088a4:	3284      	adds	r2, #132	; 0x84
 80088a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80088aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088ba:	4413      	add	r3, r2
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	01db      	lsls	r3, r3, #7
 80088c8:	440b      	add	r3, r1
 80088ca:	3384      	adds	r3, #132	; 0x84
 80088cc:	4619      	mov	r1, r3
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	01db      	lsls	r3, r3, #7
 80088de:	4413      	add	r3, r2
 80088e0:	3384      	adds	r3, #132	; 0x84
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	4611      	mov	r1, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	01d2      	lsls	r2, r2, #7
 80088ee:	440a      	add	r2, r1
 80088f0:	3284      	adds	r2, #132	; 0x84
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	01db      	lsls	r3, r3, #7
 8008902:	4413      	add	r3, r2
 8008904:	3384      	adds	r3, #132	; 0x84
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	061b      	lsls	r3, r3, #24
 8008928:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	01db      	lsls	r3, r3, #7
 8008934:	4413      	add	r3, r2
 8008936:	3384      	adds	r3, #132	; 0x84
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	01db      	lsls	r3, r3, #7
 8008944:	4413      	add	r3, r2
 8008946:	3384      	adds	r3, #132	; 0x84
 8008948:	461a      	mov	r2, r3
 800894a:	2300      	movs	r3, #0
 800894c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008954:	461a      	mov	r2, r3
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	431a      	orrs	r2, r3
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	431a      	orrs	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	01db      	lsls	r3, r3, #7
 8008968:	440b      	add	r3, r1
 800896a:	3384      	adds	r3, #132	; 0x84
 800896c:	4619      	mov	r1, r3
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	01db      	lsls	r3, r3, #7
 800897e:	4413      	add	r3, r2
 8008980:	3384      	adds	r3, #132	; 0x84
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	4611      	mov	r1, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	01d2      	lsls	r2, r2, #7
 800898e:	440a      	add	r2, r1
 8008990:	3284      	adds	r2, #132	; 0x84
 8008992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008996:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	01db      	lsls	r3, r3, #7
 80089a2:	4413      	add	r3, r2
 80089a4:	3384      	adds	r3, #132	; 0x84
 80089a6:	461a      	mov	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	01db      	lsls	r3, r3, #7
 80089b8:	4413      	add	r3, r2
 80089ba:	3384      	adds	r3, #132	; 0x84
 80089bc:	69da      	ldr	r2, [r3, #28]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	01db      	lsls	r3, r3, #7
 80089c8:	440b      	add	r3, r1
 80089ca:	3384      	adds	r3, #132	; 0x84
 80089cc:	4619      	mov	r1, r3
 80089ce:	4b58      	ldr	r3, [pc, #352]	; (8008b30 <LTDC_SetConfig+0x32c>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	69da      	ldr	r2, [r3, #28]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	6809      	ldr	r1, [r1, #0]
 80089e0:	4608      	mov	r0, r1
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	01c9      	lsls	r1, r1, #7
 80089e6:	4401      	add	r1, r0
 80089e8:	3184      	adds	r1, #132	; 0x84
 80089ea:	4313      	orrs	r3, r2
 80089ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	01db      	lsls	r3, r3, #7
 80089f8:	4413      	add	r3, r2
 80089fa:	3384      	adds	r3, #132	; 0x84
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	01db      	lsls	r3, r3, #7
 8008a08:	4413      	add	r3, r2
 8008a0a:	3384      	adds	r3, #132	; 0x84
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	01db      	lsls	r3, r3, #7
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3384      	adds	r3, #132	; 0x84
 8008a20:	461a      	mov	r2, r3
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d102      	bne.n	8008a36 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008a30:	2304      	movs	r3, #4
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e01b      	b.n	8008a6e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d102      	bne.n	8008a44 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	e014      	b.n	8008a6e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	d00b      	beq.n	8008a64 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d007      	beq.n	8008a64 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d003      	beq.n	8008a64 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008a60:	2b07      	cmp	r3, #7
 8008a62:	d102      	bne.n	8008a6a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008a64:	2302      	movs	r3, #2
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	e001      	b.n	8008a6e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	01db      	lsls	r3, r3, #7
 8008a78:	4413      	add	r3, r2
 8008a7a:	3384      	adds	r3, #132	; 0x84
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	4611      	mov	r1, r2
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	01d2      	lsls	r2, r2, #7
 8008a88:	440a      	add	r2, r1
 8008a8a:	3284      	adds	r2, #132	; 0x84
 8008a8c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008a90:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	fb02 f303 	mul.w	r3, r2, r3
 8008a9c:	041a      	lsls	r2, r3, #16
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6859      	ldr	r1, [r3, #4]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	1acb      	subs	r3, r1, r3
 8008aa8:	69f9      	ldr	r1, [r7, #28]
 8008aaa:	fb01 f303 	mul.w	r3, r1, r3
 8008aae:	3303      	adds	r3, #3
 8008ab0:	68f9      	ldr	r1, [r7, #12]
 8008ab2:	6809      	ldr	r1, [r1, #0]
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	01c9      	lsls	r1, r1, #7
 8008aba:	4401      	add	r1, r0
 8008abc:	3184      	adds	r1, #132	; 0x84
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	01db      	lsls	r3, r3, #7
 8008acc:	4413      	add	r3, r2
 8008ace:	3384      	adds	r3, #132	; 0x84
 8008ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	01db      	lsls	r3, r3, #7
 8008adc:	440b      	add	r3, r1
 8008ade:	3384      	adds	r3, #132	; 0x84
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <LTDC_SetConfig+0x330>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	01db      	lsls	r3, r3, #7
 8008af2:	4413      	add	r3, r2
 8008af4:	3384      	adds	r3, #132	; 0x84
 8008af6:	461a      	mov	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	01db      	lsls	r3, r3, #7
 8008b08:	4413      	add	r3, r2
 8008b0a:	3384      	adds	r3, #132	; 0x84
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	6812      	ldr	r2, [r2, #0]
 8008b12:	4611      	mov	r1, r2
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	01d2      	lsls	r2, r2, #7
 8008b18:	440a      	add	r2, r1
 8008b1a:	3284      	adds	r2, #132	; 0x84
 8008b1c:	f043 0301 	orr.w	r3, r3, #1
 8008b20:	6013      	str	r3, [r2, #0]
}
 8008b22:	bf00      	nop
 8008b24:	3724      	adds	r7, #36	; 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	fffff8f8 	.word	0xfffff8f8
 8008b34:	fffff800 	.word	0xfffff800

08008b38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b46:	6013      	str	r3, [r2, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40007000 	.word	0x40007000

08008b58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008b62:	4b23      	ldr	r3, [pc, #140]	; (8008bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	4a22      	ldr	r2, [pc, #136]	; (8008bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b6e:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008b7a:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a1d      	ldr	r2, [pc, #116]	; (8008bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b86:	f7fd f9b1 	bl	8005eec <HAL_GetTick>
 8008b8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b8c:	e009      	b.n	8008ba2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b8e:	f7fd f9ad 	bl	8005eec <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b9c:	d901      	bls.n	8008ba2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e022      	b.n	8008be8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ba2:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bae:	d1ee      	bne.n	8008b8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008bb0:	4b10      	ldr	r3, [pc, #64]	; (8008bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a0f      	ldr	r2, [pc, #60]	; (8008bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008bbc:	f7fd f996 	bl	8005eec <HAL_GetTick>
 8008bc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008bc2:	e009      	b.n	8008bd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008bc4:	f7fd f992 	bl	8005eec <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bd2:	d901      	bls.n	8008bd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e007      	b.n	8008be8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be4:	d1ee      	bne.n	8008bc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	40023800 	.word	0x40023800
 8008bf4:	40007000 	.word	0x40007000

08008bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e291      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8087 	beq.w	8008d2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c1c:	4b96      	ldr	r3, [pc, #600]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 030c 	and.w	r3, r3, #12
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d00c      	beq.n	8008c42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c28:	4b93      	ldr	r3, [pc, #588]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f003 030c 	and.w	r3, r3, #12
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d112      	bne.n	8008c5a <HAL_RCC_OscConfig+0x62>
 8008c34:	4b90      	ldr	r3, [pc, #576]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c40:	d10b      	bne.n	8008c5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c42:	4b8d      	ldr	r3, [pc, #564]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d06c      	beq.n	8008d28 <HAL_RCC_OscConfig+0x130>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d168      	bne.n	8008d28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e26b      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c62:	d106      	bne.n	8008c72 <HAL_RCC_OscConfig+0x7a>
 8008c64:	4b84      	ldr	r3, [pc, #528]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a83      	ldr	r2, [pc, #524]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	e02e      	b.n	8008cd0 <HAL_RCC_OscConfig+0xd8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10c      	bne.n	8008c94 <HAL_RCC_OscConfig+0x9c>
 8008c7a:	4b7f      	ldr	r3, [pc, #508]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a7e      	ldr	r2, [pc, #504]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4b7c      	ldr	r3, [pc, #496]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a7b      	ldr	r2, [pc, #492]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e01d      	b.n	8008cd0 <HAL_RCC_OscConfig+0xd8>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c9c:	d10c      	bne.n	8008cb8 <HAL_RCC_OscConfig+0xc0>
 8008c9e:	4b76      	ldr	r3, [pc, #472]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a75      	ldr	r2, [pc, #468]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	4b73      	ldr	r3, [pc, #460]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a72      	ldr	r2, [pc, #456]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	e00b      	b.n	8008cd0 <HAL_RCC_OscConfig+0xd8>
 8008cb8:	4b6f      	ldr	r3, [pc, #444]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a6e      	ldr	r2, [pc, #440]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	4b6c      	ldr	r3, [pc, #432]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a6b      	ldr	r2, [pc, #428]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d013      	beq.n	8008d00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd8:	f7fd f908 	bl	8005eec <HAL_GetTick>
 8008cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ce0:	f7fd f904 	bl	8005eec <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b64      	cmp	r3, #100	; 0x64
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e21f      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cf2:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCC_OscConfig+0xe8>
 8008cfe:	e014      	b.n	8008d2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d00:	f7fd f8f4 	bl	8005eec <HAL_GetTick>
 8008d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d08:	f7fd f8f0 	bl	8005eec <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b64      	cmp	r3, #100	; 0x64
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e20b      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d1a:	4b57      	ldr	r3, [pc, #348]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1f0      	bne.n	8008d08 <HAL_RCC_OscConfig+0x110>
 8008d26:	e000      	b.n	8008d2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d069      	beq.n	8008e0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d36:	4b50      	ldr	r3, [pc, #320]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 030c 	and.w	r3, r3, #12
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d42:	4b4d      	ldr	r3, [pc, #308]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f003 030c 	and.w	r3, r3, #12
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d11c      	bne.n	8008d88 <HAL_RCC_OscConfig+0x190>
 8008d4e:	4b4a      	ldr	r3, [pc, #296]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d116      	bne.n	8008d88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d5a:	4b47      	ldr	r3, [pc, #284]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <HAL_RCC_OscConfig+0x17a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d001      	beq.n	8008d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e1df      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d72:	4b41      	ldr	r3, [pc, #260]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	493d      	ldr	r1, [pc, #244]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d86:	e040      	b.n	8008e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d023      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d90:	4b39      	ldr	r3, [pc, #228]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7fd f8a6 	bl	8005eec <HAL_GetTick>
 8008da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008da4:	f7fd f8a2 	bl	8005eec <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e1bd      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008db6:	4b30      	ldr	r3, [pc, #192]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0f0      	beq.n	8008da4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dc2:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4929      	ldr	r1, [pc, #164]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	600b      	str	r3, [r1, #0]
 8008dd6:	e018      	b.n	8008e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dd8:	4b27      	ldr	r3, [pc, #156]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a26      	ldr	r2, [pc, #152]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008dde:	f023 0301 	bic.w	r3, r3, #1
 8008de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de4:	f7fd f882 	bl	8005eec <HAL_GetTick>
 8008de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dea:	e008      	b.n	8008dfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dec:	f7fd f87e 	bl	8005eec <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d901      	bls.n	8008dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e199      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1f0      	bne.n	8008dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0308 	and.w	r3, r3, #8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d038      	beq.n	8008e88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d019      	beq.n	8008e52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e1e:	4b16      	ldr	r3, [pc, #88]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e22:	4a15      	ldr	r2, [pc, #84]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008e24:	f043 0301 	orr.w	r3, r3, #1
 8008e28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2a:	f7fd f85f 	bl	8005eec <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e30:	e008      	b.n	8008e44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e32:	f7fd f85b 	bl	8005eec <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d901      	bls.n	8008e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e176      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e44:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0f0      	beq.n	8008e32 <HAL_RCC_OscConfig+0x23a>
 8008e50:	e01a      	b.n	8008e88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e56:	4a08      	ldr	r2, [pc, #32]	; (8008e78 <HAL_RCC_OscConfig+0x280>)
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5e:	f7fd f845 	bl	8005eec <HAL_GetTick>
 8008e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e64:	e00a      	b.n	8008e7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e66:	f7fd f841 	bl	8005eec <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d903      	bls.n	8008e7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e15c      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
 8008e78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e7c:	4b91      	ldr	r3, [pc, #580]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1ee      	bne.n	8008e66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80a4 	beq.w	8008fde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e96:	4b8b      	ldr	r3, [pc, #556]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ea2:	4b88      	ldr	r3, [pc, #544]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	4a87      	ldr	r2, [pc, #540]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eac:	6413      	str	r3, [r2, #64]	; 0x40
 8008eae:	4b85      	ldr	r3, [pc, #532]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	60bb      	str	r3, [r7, #8]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ebe:	4b82      	ldr	r3, [pc, #520]	; (80090c8 <HAL_RCC_OscConfig+0x4d0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d118      	bne.n	8008efc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008eca:	4b7f      	ldr	r3, [pc, #508]	; (80090c8 <HAL_RCC_OscConfig+0x4d0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a7e      	ldr	r2, [pc, #504]	; (80090c8 <HAL_RCC_OscConfig+0x4d0>)
 8008ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ed6:	f7fd f809 	bl	8005eec <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ede:	f7fd f805 	bl	8005eec <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b64      	cmp	r3, #100	; 0x64
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e120      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ef0:	4b75      	ldr	r3, [pc, #468]	; (80090c8 <HAL_RCC_OscConfig+0x4d0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d106      	bne.n	8008f12 <HAL_RCC_OscConfig+0x31a>
 8008f04:	4b6f      	ldr	r3, [pc, #444]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f08:	4a6e      	ldr	r2, [pc, #440]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f0a:	f043 0301 	orr.w	r3, r3, #1
 8008f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f10:	e02d      	b.n	8008f6e <HAL_RCC_OscConfig+0x376>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10c      	bne.n	8008f34 <HAL_RCC_OscConfig+0x33c>
 8008f1a:	4b6a      	ldr	r3, [pc, #424]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1e:	4a69      	ldr	r2, [pc, #420]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	6713      	str	r3, [r2, #112]	; 0x70
 8008f26:	4b67      	ldr	r3, [pc, #412]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2a:	4a66      	ldr	r2, [pc, #408]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f2c:	f023 0304 	bic.w	r3, r3, #4
 8008f30:	6713      	str	r3, [r2, #112]	; 0x70
 8008f32:	e01c      	b.n	8008f6e <HAL_RCC_OscConfig+0x376>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b05      	cmp	r3, #5
 8008f3a:	d10c      	bne.n	8008f56 <HAL_RCC_OscConfig+0x35e>
 8008f3c:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f40:	4a60      	ldr	r2, [pc, #384]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f42:	f043 0304 	orr.w	r3, r3, #4
 8008f46:	6713      	str	r3, [r2, #112]	; 0x70
 8008f48:	4b5e      	ldr	r3, [pc, #376]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4c:	4a5d      	ldr	r2, [pc, #372]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f4e:	f043 0301 	orr.w	r3, r3, #1
 8008f52:	6713      	str	r3, [r2, #112]	; 0x70
 8008f54:	e00b      	b.n	8008f6e <HAL_RCC_OscConfig+0x376>
 8008f56:	4b5b      	ldr	r3, [pc, #364]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5a:	4a5a      	ldr	r2, [pc, #360]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f5c:	f023 0301 	bic.w	r3, r3, #1
 8008f60:	6713      	str	r3, [r2, #112]	; 0x70
 8008f62:	4b58      	ldr	r3, [pc, #352]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f66:	4a57      	ldr	r2, [pc, #348]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f68:	f023 0304 	bic.w	r3, r3, #4
 8008f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d015      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f76:	f7fc ffb9 	bl	8005eec <HAL_GetTick>
 8008f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f7c:	e00a      	b.n	8008f94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f7e:	f7fc ffb5 	bl	8005eec <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e0ce      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f94:	4b4b      	ldr	r3, [pc, #300]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0ee      	beq.n	8008f7e <HAL_RCC_OscConfig+0x386>
 8008fa0:	e014      	b.n	8008fcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa2:	f7fc ffa3 	bl	8005eec <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fa8:	e00a      	b.n	8008fc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008faa:	f7fc ff9f 	bl	8005eec <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e0b8      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fc0:	4b40      	ldr	r3, [pc, #256]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1ee      	bne.n	8008faa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d105      	bne.n	8008fde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fd2:	4b3c      	ldr	r3, [pc, #240]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	4a3b      	ldr	r2, [pc, #236]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 80a4 	beq.w	8009130 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fe8:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 030c 	and.w	r3, r3, #12
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d06b      	beq.n	80090cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d149      	bne.n	8009090 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ffc:	4b31      	ldr	r3, [pc, #196]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a30      	ldr	r2, [pc, #192]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009008:	f7fc ff70 	bl	8005eec <HAL_GetTick>
 800900c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800900e:	e008      	b.n	8009022 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009010:	f7fc ff6c 	bl	8005eec <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e087      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009022:	4b28      	ldr	r3, [pc, #160]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1f0      	bne.n	8009010 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69da      	ldr	r2, [r3, #28]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	431a      	orrs	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	019b      	lsls	r3, r3, #6
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	085b      	lsrs	r3, r3, #1
 8009046:	3b01      	subs	r3, #1
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	061b      	lsls	r3, r3, #24
 8009052:	4313      	orrs	r3, r2
 8009054:	4a1b      	ldr	r2, [pc, #108]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800905a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800905c:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a18      	ldr	r2, [pc, #96]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009068:	f7fc ff40 	bl	8005eec <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009070:	f7fc ff3c 	bl	8005eec <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e057      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009082:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0f0      	beq.n	8009070 <HAL_RCC_OscConfig+0x478>
 800908e:	e04f      	b.n	8009130 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009090:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a0b      	ldr	r2, [pc, #44]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 8009096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800909a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800909c:	f7fc ff26 	bl	8005eec <HAL_GetTick>
 80090a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090a2:	e008      	b.n	80090b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090a4:	f7fc ff22 	bl	8005eec <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e03d      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <HAL_RCC_OscConfig+0x4cc>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f0      	bne.n	80090a4 <HAL_RCC_OscConfig+0x4ac>
 80090c2:	e035      	b.n	8009130 <HAL_RCC_OscConfig+0x538>
 80090c4:	40023800 	.word	0x40023800
 80090c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80090cc:	4b1b      	ldr	r3, [pc, #108]	; (800913c <HAL_RCC_OscConfig+0x544>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d028      	beq.n	800912c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d121      	bne.n	800912c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d11a      	bne.n	800912c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090fc:	4013      	ands	r3, r2
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009102:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009104:	4293      	cmp	r3, r2
 8009106:	d111      	bne.n	800912c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	085b      	lsrs	r3, r3, #1
 8009114:	3b01      	subs	r3, #1
 8009116:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009118:	429a      	cmp	r2, r3
 800911a:	d107      	bne.n	800912c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009128:	429a      	cmp	r2, r3
 800912a:	d001      	beq.n	8009130 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40023800 	.word	0x40023800

08009140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e0d0      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009158:	4b6a      	ldr	r3, [pc, #424]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	429a      	cmp	r2, r3
 8009164:	d910      	bls.n	8009188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009166:	4b67      	ldr	r3, [pc, #412]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f023 020f 	bic.w	r2, r3, #15
 800916e:	4965      	ldr	r1, [pc, #404]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	4313      	orrs	r3, r2
 8009174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009176:	4b63      	ldr	r3, [pc, #396]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d001      	beq.n	8009188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e0b8      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d020      	beq.n	80091d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091a0:	4b59      	ldr	r3, [pc, #356]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	4a58      	ldr	r2, [pc, #352]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0308 	and.w	r3, r3, #8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091b8:	4b53      	ldr	r3, [pc, #332]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	4a52      	ldr	r2, [pc, #328]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c4:	4b50      	ldr	r3, [pc, #320]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	494d      	ldr	r1, [pc, #308]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d040      	beq.n	8009264 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d107      	bne.n	80091fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ea:	4b47      	ldr	r3, [pc, #284]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d115      	bne.n	8009222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e07f      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d107      	bne.n	8009212 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009202:	4b41      	ldr	r3, [pc, #260]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e073      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009212:	4b3d      	ldr	r3, [pc, #244]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e06b      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009222:	4b39      	ldr	r3, [pc, #228]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f023 0203 	bic.w	r2, r3, #3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	4936      	ldr	r1, [pc, #216]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 8009230:	4313      	orrs	r3, r2
 8009232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009234:	f7fc fe5a 	bl	8005eec <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800923a:	e00a      	b.n	8009252 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800923c:	f7fc fe56 	bl	8005eec <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f241 3288 	movw	r2, #5000	; 0x1388
 800924a:	4293      	cmp	r3, r2
 800924c:	d901      	bls.n	8009252 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e053      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009252:	4b2d      	ldr	r3, [pc, #180]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 020c 	and.w	r2, r3, #12
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	429a      	cmp	r2, r3
 8009262:	d1eb      	bne.n	800923c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009264:	4b27      	ldr	r3, [pc, #156]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d210      	bcs.n	8009294 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009272:	4b24      	ldr	r3, [pc, #144]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f023 020f 	bic.w	r2, r3, #15
 800927a:	4922      	ldr	r1, [pc, #136]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	4313      	orrs	r3, r2
 8009280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009282:	4b20      	ldr	r3, [pc, #128]	; (8009304 <HAL_RCC_ClockConfig+0x1c4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d001      	beq.n	8009294 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e032      	b.n	80092fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092a0:	4b19      	ldr	r3, [pc, #100]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4916      	ldr	r1, [pc, #88]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80092be:	4b12      	ldr	r3, [pc, #72]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	490e      	ldr	r1, [pc, #56]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80092d2:	f000 f821 	bl	8009318 <HAL_RCC_GetSysClockFreq>
 80092d6:	4601      	mov	r1, r0
 80092d8:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <HAL_RCC_ClockConfig+0x1c8>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	4a0a      	ldr	r2, [pc, #40]	; (800930c <HAL_RCC_ClockConfig+0x1cc>)
 80092e4:	5cd3      	ldrb	r3, [r2, r3]
 80092e6:	fa21 f303 	lsr.w	r3, r1, r3
 80092ea:	4a09      	ldr	r2, [pc, #36]	; (8009310 <HAL_RCC_ClockConfig+0x1d0>)
 80092ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80092ee:	4b09      	ldr	r3, [pc, #36]	; (8009314 <HAL_RCC_ClockConfig+0x1d4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fc fcd6 	bl	8005ca4 <HAL_InitTick>

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	40023c00 	.word	0x40023c00
 8009308:	40023800 	.word	0x40023800
 800930c:	080112b0 	.word	0x080112b0
 8009310:	20001030 	.word	0x20001030
 8009314:	20001034 	.word	0x20001034

08009318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	2300      	movs	r3, #0
 8009328:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800932e:	4b50      	ldr	r3, [pc, #320]	; (8009470 <HAL_RCC_GetSysClockFreq+0x158>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f003 030c 	and.w	r3, r3, #12
 8009336:	2b04      	cmp	r3, #4
 8009338:	d007      	beq.n	800934a <HAL_RCC_GetSysClockFreq+0x32>
 800933a:	2b08      	cmp	r3, #8
 800933c:	d008      	beq.n	8009350 <HAL_RCC_GetSysClockFreq+0x38>
 800933e:	2b00      	cmp	r3, #0
 8009340:	f040 808d 	bne.w	800945e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009344:	4b4b      	ldr	r3, [pc, #300]	; (8009474 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009346:	60bb      	str	r3, [r7, #8]
      break;
 8009348:	e08c      	b.n	8009464 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800934a:	4b4b      	ldr	r3, [pc, #300]	; (8009478 <HAL_RCC_GetSysClockFreq+0x160>)
 800934c:	60bb      	str	r3, [r7, #8]
      break;
 800934e:	e089      	b.n	8009464 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009350:	4b47      	ldr	r3, [pc, #284]	; (8009470 <HAL_RCC_GetSysClockFreq+0x158>)
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009358:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800935a:	4b45      	ldr	r3, [pc, #276]	; (8009470 <HAL_RCC_GetSysClockFreq+0x158>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d023      	beq.n	80093ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009366:	4b42      	ldr	r3, [pc, #264]	; (8009470 <HAL_RCC_GetSysClockFreq+0x158>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	099b      	lsrs	r3, r3, #6
 800936c:	f04f 0400 	mov.w	r4, #0
 8009370:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009374:	f04f 0200 	mov.w	r2, #0
 8009378:	ea03 0501 	and.w	r5, r3, r1
 800937c:	ea04 0602 	and.w	r6, r4, r2
 8009380:	4a3d      	ldr	r2, [pc, #244]	; (8009478 <HAL_RCC_GetSysClockFreq+0x160>)
 8009382:	fb02 f106 	mul.w	r1, r2, r6
 8009386:	2200      	movs	r2, #0
 8009388:	fb02 f205 	mul.w	r2, r2, r5
 800938c:	440a      	add	r2, r1
 800938e:	493a      	ldr	r1, [pc, #232]	; (8009478 <HAL_RCC_GetSysClockFreq+0x160>)
 8009390:	fba5 0101 	umull	r0, r1, r5, r1
 8009394:	1853      	adds	r3, r2, r1
 8009396:	4619      	mov	r1, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f04f 0400 	mov.w	r4, #0
 800939e:	461a      	mov	r2, r3
 80093a0:	4623      	mov	r3, r4
 80093a2:	f7f6 ff85 	bl	80002b0 <__aeabi_uldivmod>
 80093a6:	4603      	mov	r3, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	e049      	b.n	8009442 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093ae:	4b30      	ldr	r3, [pc, #192]	; (8009470 <HAL_RCC_GetSysClockFreq+0x158>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	099b      	lsrs	r3, r3, #6
 80093b4:	f04f 0400 	mov.w	r4, #0
 80093b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	ea03 0501 	and.w	r5, r3, r1
 80093c4:	ea04 0602 	and.w	r6, r4, r2
 80093c8:	4629      	mov	r1, r5
 80093ca:	4632      	mov	r2, r6
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	f04f 0400 	mov.w	r4, #0
 80093d4:	0154      	lsls	r4, r2, #5
 80093d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80093da:	014b      	lsls	r3, r1, #5
 80093dc:	4619      	mov	r1, r3
 80093de:	4622      	mov	r2, r4
 80093e0:	1b49      	subs	r1, r1, r5
 80093e2:	eb62 0206 	sbc.w	r2, r2, r6
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	f04f 0400 	mov.w	r4, #0
 80093ee:	0194      	lsls	r4, r2, #6
 80093f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80093f4:	018b      	lsls	r3, r1, #6
 80093f6:	1a5b      	subs	r3, r3, r1
 80093f8:	eb64 0402 	sbc.w	r4, r4, r2
 80093fc:	f04f 0100 	mov.w	r1, #0
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	00e2      	lsls	r2, r4, #3
 8009406:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800940a:	00d9      	lsls	r1, r3, #3
 800940c:	460b      	mov	r3, r1
 800940e:	4614      	mov	r4, r2
 8009410:	195b      	adds	r3, r3, r5
 8009412:	eb44 0406 	adc.w	r4, r4, r6
 8009416:	f04f 0100 	mov.w	r1, #0
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	02a2      	lsls	r2, r4, #10
 8009420:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009424:	0299      	lsls	r1, r3, #10
 8009426:	460b      	mov	r3, r1
 8009428:	4614      	mov	r4, r2
 800942a:	4618      	mov	r0, r3
 800942c:	4621      	mov	r1, r4
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f04f 0400 	mov.w	r4, #0
 8009434:	461a      	mov	r2, r3
 8009436:	4623      	mov	r3, r4
 8009438:	f7f6 ff3a 	bl	80002b0 <__aeabi_uldivmod>
 800943c:	4603      	mov	r3, r0
 800943e:	460c      	mov	r4, r1
 8009440:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009442:	4b0b      	ldr	r3, [pc, #44]	; (8009470 <HAL_RCC_GetSysClockFreq+0x158>)
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	0c1b      	lsrs	r3, r3, #16
 8009448:	f003 0303 	and.w	r3, r3, #3
 800944c:	3301      	adds	r3, #1
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	fbb2 f3f3 	udiv	r3, r2, r3
 800945a:	60bb      	str	r3, [r7, #8]
      break;
 800945c:	e002      	b.n	8009464 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009460:	60bb      	str	r3, [r7, #8]
      break;
 8009462:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009464:	68bb      	ldr	r3, [r7, #8]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946e:	bf00      	nop
 8009470:	40023800 	.word	0x40023800
 8009474:	00f42400 	.word	0x00f42400
 8009478:	017d7840 	.word	0x017d7840

0800947c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009480:	4b03      	ldr	r3, [pc, #12]	; (8009490 <HAL_RCC_GetHCLKFreq+0x14>)
 8009482:	681b      	ldr	r3, [r3, #0]
}
 8009484:	4618      	mov	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20001030 	.word	0x20001030

08009494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009498:	f7ff fff0 	bl	800947c <HAL_RCC_GetHCLKFreq>
 800949c:	4601      	mov	r1, r0
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	0a9b      	lsrs	r3, r3, #10
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	4a03      	ldr	r2, [pc, #12]	; (80094b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094aa:	5cd3      	ldrb	r3, [r2, r3]
 80094ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	40023800 	.word	0x40023800
 80094b8:	080112c0 	.word	0x080112c0

080094bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80094c0:	f7ff ffdc 	bl	800947c <HAL_RCC_GetHCLKFreq>
 80094c4:	4601      	mov	r1, r0
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	0b5b      	lsrs	r3, r3, #13
 80094cc:	f003 0307 	and.w	r3, r3, #7
 80094d0:	4a03      	ldr	r2, [pc, #12]	; (80094e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094d2:	5cd3      	ldrb	r3, [r2, r3]
 80094d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80094d8:	4618      	mov	r0, r3
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	40023800 	.word	0x40023800
 80094e0:	080112c0 	.word	0x080112c0

080094e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220f      	movs	r2, #15
 80094f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094f4:	4b12      	ldr	r3, [pc, #72]	; (8009540 <HAL_RCC_GetClockConfig+0x5c>)
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f003 0203 	and.w	r2, r3, #3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009500:	4b0f      	ldr	r3, [pc, #60]	; (8009540 <HAL_RCC_GetClockConfig+0x5c>)
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800950c:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <HAL_RCC_GetClockConfig+0x5c>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <HAL_RCC_GetClockConfig+0x5c>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <HAL_RCC_GetClockConfig+0x60>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 020f 	and.w	r2, r3, #15
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	40023800 	.word	0x40023800
 8009544:	40023c00 	.word	0x40023c00

08009548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d012      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009570:	4b69      	ldr	r3, [pc, #420]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	4a68      	ldr	r2, [pc, #416]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800957a:	6093      	str	r3, [r2, #8]
 800957c:	4b66      	ldr	r3, [pc, #408]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009584:	4964      	ldr	r1, [pc, #400]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009586:	4313      	orrs	r3, r2
 8009588:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009592:	2301      	movs	r3, #1
 8009594:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d017      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095a2:	4b5d      	ldr	r3, [pc, #372]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b0:	4959      	ldr	r1, [pc, #356]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095c0:	d101      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80095ce:	2301      	movs	r3, #1
 80095d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d017      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80095de:	4b4e      	ldr	r3, [pc, #312]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	494a      	ldr	r1, [pc, #296]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095fc:	d101      	bne.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80095fe:	2301      	movs	r3, #1
 8009600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800960a:	2301      	movs	r3, #1
 800960c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 808b 	beq.w	8009742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800962c:	4b3a      	ldr	r3, [pc, #232]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	4a39      	ldr	r2, [pc, #228]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009636:	6413      	str	r3, [r2, #64]	; 0x40
 8009638:	4b37      	ldr	r3, [pc, #220]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800963a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009640:	60bb      	str	r3, [r7, #8]
 8009642:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009644:	4b35      	ldr	r3, [pc, #212]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a34      	ldr	r2, [pc, #208]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800964a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800964e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009650:	f7fc fc4c 	bl	8005eec <HAL_GetTick>
 8009654:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009656:	e008      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009658:	f7fc fc48 	bl	8005eec <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b64      	cmp	r3, #100	; 0x64
 8009664:	d901      	bls.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e355      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800966a:	4b2c      	ldr	r3, [pc, #176]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0f0      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009676:	4b28      	ldr	r3, [pc, #160]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800967e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d035      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	429a      	cmp	r2, r3
 8009692:	d02e      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009694:	4b20      	ldr	r3, [pc, #128]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800969c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800969e:	4b1e      	ldr	r3, [pc, #120]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a2:	4a1d      	ldr	r2, [pc, #116]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096aa:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	4a1a      	ldr	r2, [pc, #104]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80096b6:	4a18      	ldr	r2, [pc, #96]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096bc:	4b16      	ldr	r3, [pc, #88]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d114      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c8:	f7fc fc10 	bl	8005eec <HAL_GetTick>
 80096cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096ce:	e00a      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096d0:	f7fc fc0c 	bl	8005eec <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	f241 3288 	movw	r2, #5000	; 0x1388
 80096de:	4293      	cmp	r3, r2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e317      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096e6:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0ee      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096fe:	d111      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800970c:	4b04      	ldr	r3, [pc, #16]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800970e:	400b      	ands	r3, r1
 8009710:	4901      	ldr	r1, [pc, #4]	; (8009718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009712:	4313      	orrs	r3, r2
 8009714:	608b      	str	r3, [r1, #8]
 8009716:	e00b      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009718:	40023800 	.word	0x40023800
 800971c:	40007000 	.word	0x40007000
 8009720:	0ffffcff 	.word	0x0ffffcff
 8009724:	4bb0      	ldr	r3, [pc, #704]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	4aaf      	ldr	r2, [pc, #700]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800972a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800972e:	6093      	str	r3, [r2, #8]
 8009730:	4bad      	ldr	r3, [pc, #692]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800973c:	49aa      	ldr	r1, [pc, #680]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800973e:	4313      	orrs	r3, r2
 8009740:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b00      	cmp	r3, #0
 800974c:	d010      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800974e:	4ba6      	ldr	r3, [pc, #664]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009754:	4aa4      	ldr	r2, [pc, #656]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800975a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800975e:	4ba2      	ldr	r3, [pc, #648]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009760:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009768:	499f      	ldr	r1, [pc, #636]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800976a:	4313      	orrs	r3, r2
 800976c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800977c:	4b9a      	ldr	r3, [pc, #616]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800977e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800978a:	4997      	ldr	r1, [pc, #604]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800979e:	4b92      	ldr	r3, [pc, #584]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097ac:	498e      	ldr	r1, [pc, #568]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097c0:	4b89      	ldr	r3, [pc, #548]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80097c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ce:	4986      	ldr	r1, [pc, #536]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097e2:	4b81      	ldr	r3, [pc, #516]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80097e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f0:	497d      	ldr	r1, [pc, #500]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009804:	4b78      	ldr	r3, [pc, #480]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980a:	f023 0203 	bic.w	r2, r3, #3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009812:	4975      	ldr	r1, [pc, #468]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009826:	4b70      	ldr	r3, [pc, #448]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800982c:	f023 020c 	bic.w	r2, r3, #12
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009834:	496c      	ldr	r1, [pc, #432]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009836:	4313      	orrs	r3, r2
 8009838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009848:	4b67      	ldr	r3, [pc, #412]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800984a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009856:	4964      	ldr	r1, [pc, #400]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009858:	4313      	orrs	r3, r2
 800985a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800986a:	4b5f      	ldr	r3, [pc, #380]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800986c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009870:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009878:	495b      	ldr	r1, [pc, #364]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800987a:	4313      	orrs	r3, r2
 800987c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800988c:	4b56      	ldr	r3, [pc, #344]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800988e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989a:	4953      	ldr	r1, [pc, #332]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800989c:	4313      	orrs	r3, r2
 800989e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80098ae:	4b4e      	ldr	r3, [pc, #312]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098bc:	494a      	ldr	r1, [pc, #296]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80098d0:	4b45      	ldr	r3, [pc, #276]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098de:	4942      	ldr	r1, [pc, #264]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80098f2:	4b3d      	ldr	r3, [pc, #244]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009900:	4939      	ldr	r1, [pc, #228]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009902:	4313      	orrs	r3, r2
 8009904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00a      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009914:	4b34      	ldr	r3, [pc, #208]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009922:	4931      	ldr	r1, [pc, #196]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009924:	4313      	orrs	r3, r2
 8009926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d011      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009936:	4b2c      	ldr	r3, [pc, #176]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800993c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009944:	4928      	ldr	r1, [pc, #160]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009946:	4313      	orrs	r3, r2
 8009948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009954:	d101      	bne.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009956:	2301      	movs	r3, #1
 8009958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009966:	2301      	movs	r3, #1
 8009968:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009976:	4b1c      	ldr	r3, [pc, #112]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009984:	4918      	ldr	r1, [pc, #96]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009986:	4313      	orrs	r3, r2
 8009988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009998:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099a8:	490f      	ldr	r1, [pc, #60]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d005      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099be:	f040 80d8 	bne.w	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a08      	ldr	r2, [pc, #32]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ce:	f7fc fa8d 	bl	8005eec <HAL_GetTick>
 80099d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099d4:	e00a      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099d6:	f7fc fa89 	bl	8005eec <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	2b64      	cmp	r3, #100	; 0x64
 80099e2:	d903      	bls.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e196      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80099e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099ec:	4b6c      	ldr	r3, [pc, #432]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1ee      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d021      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11d      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a0c:	4b64      	ldr	r3, [pc, #400]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a1a:	4b61      	ldr	r3, [pc, #388]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a20:	0e1b      	lsrs	r3, r3, #24
 8009a22:	f003 030f 	and.w	r3, r3, #15
 8009a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	019a      	lsls	r2, r3, #6
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	431a      	orrs	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	061b      	lsls	r3, r3, #24
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	071b      	lsls	r3, r3, #28
 8009a40:	4957      	ldr	r1, [pc, #348]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a5c:	d00a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d02e      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a72:	d129      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a74:	4b4a      	ldr	r3, [pc, #296]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a7a:	0c1b      	lsrs	r3, r3, #16
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a82:	4b47      	ldr	r3, [pc, #284]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a88:	0f1b      	lsrs	r3, r3, #28
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	019a      	lsls	r2, r3, #6
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	041b      	lsls	r3, r3, #16
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	061b      	lsls	r3, r3, #24
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	071b      	lsls	r3, r3, #28
 8009aa8:	493d      	ldr	r1, [pc, #244]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ab0:	4b3b      	ldr	r3, [pc, #236]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab6:	f023 021f 	bic.w	r2, r3, #31
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	4937      	ldr	r1, [pc, #220]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01d      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ad4:	4b32      	ldr	r3, [pc, #200]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ada:	0e1b      	lsrs	r3, r3, #24
 8009adc:	f003 030f 	and.w	r3, r3, #15
 8009ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ae2:	4b2f      	ldr	r3, [pc, #188]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae8:	0f1b      	lsrs	r3, r3, #28
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	019a      	lsls	r2, r3, #6
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	041b      	lsls	r3, r3, #16
 8009afc:	431a      	orrs	r2, r3
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	061b      	lsls	r3, r3, #24
 8009b02:	431a      	orrs	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	071b      	lsls	r3, r3, #28
 8009b08:	4925      	ldr	r1, [pc, #148]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d011      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	019a      	lsls	r2, r3, #6
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	061b      	lsls	r3, r3, #24
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	071b      	lsls	r3, r3, #28
 8009b38:	4919      	ldr	r1, [pc, #100]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b40:	4b17      	ldr	r3, [pc, #92]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a16      	ldr	r2, [pc, #88]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4c:	f7fc f9ce 	bl	8005eec <HAL_GetTick>
 8009b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b52:	e008      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b54:	f7fc f9ca 	bl	8005eec <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b64      	cmp	r3, #100	; 0x64
 8009b60:	d901      	bls.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e0d7      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b66:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0f0      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	f040 80cd 	bne.w	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a08      	ldr	r2, [pc, #32]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b86:	f7fc f9b1 	bl	8005eec <HAL_GetTick>
 8009b8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b8e:	f7fc f9ad 	bl	8005eec <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b64      	cmp	r3, #100	; 0x64
 8009b9a:	d903      	bls.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e0ba      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ba4:	4b5e      	ldr	r3, [pc, #376]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb0:	d0ed      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d02e      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d12a      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009bda:	4b51      	ldr	r3, [pc, #324]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be0:	0c1b      	lsrs	r3, r3, #16
 8009be2:	f003 0303 	and.w	r3, r3, #3
 8009be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009be8:	4b4d      	ldr	r3, [pc, #308]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bee:	0f1b      	lsrs	r3, r3, #28
 8009bf0:	f003 0307 	and.w	r3, r3, #7
 8009bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	019a      	lsls	r2, r3, #6
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	041b      	lsls	r3, r3, #16
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	061b      	lsls	r3, r3, #24
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	071b      	lsls	r3, r3, #28
 8009c0e:	4944      	ldr	r1, [pc, #272]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c16:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	3b01      	subs	r3, #1
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	493d      	ldr	r1, [pc, #244]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d022      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c44:	d11d      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c46:	4b36      	ldr	r3, [pc, #216]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4c:	0e1b      	lsrs	r3, r3, #24
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c54:	4b32      	ldr	r3, [pc, #200]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	0f1b      	lsrs	r3, r3, #28
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	019a      	lsls	r2, r3, #6
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	041b      	lsls	r3, r3, #16
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	061b      	lsls	r3, r3, #24
 8009c74:	431a      	orrs	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	071b      	lsls	r3, r3, #28
 8009c7a:	4929      	ldr	r1, [pc, #164]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0308 	and.w	r3, r3, #8
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d028      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c8e:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c94:	0e1b      	lsrs	r3, r3, #24
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009c9c:	4b20      	ldr	r3, [pc, #128]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	019a      	lsls	r2, r3, #6
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	041b      	lsls	r3, r3, #16
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	061b      	lsls	r3, r3, #24
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	071b      	lsls	r3, r3, #28
 8009cc2:	4917      	ldr	r1, [pc, #92]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	4911      	ldr	r1, [pc, #68]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009ce0:	4b0f      	ldr	r3, [pc, #60]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a0e      	ldr	r2, [pc, #56]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cec:	f7fc f8fe 	bl	8005eec <HAL_GetTick>
 8009cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cf2:	e008      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009cf4:	f7fc f8fa 	bl	8005eec <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b64      	cmp	r3, #100	; 0x64
 8009d00:	d901      	bls.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e007      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d06:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d12:	d1ef      	bne.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40023800 	.word	0x40023800

08009d24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e06b      	b.n	8009e0e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	7f5b      	ldrb	r3, [r3, #29]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d105      	bne.n	8009d4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7fb fcf4 	bl	8005734 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	22ca      	movs	r2, #202	; 0xca
 8009d58:	625a      	str	r2, [r3, #36]	; 0x24
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2253      	movs	r2, #83	; 0x53
 8009d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fb00 	bl	800a368 <RTC_EnterInitMode>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d008      	beq.n	8009d80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	22ff      	movs	r2, #255	; 0xff
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2204      	movs	r2, #4
 8009d7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e046      	b.n	8009e0e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6899      	ldr	r1, [r3, #8]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b23      	ldr	r3, [pc, #140]	; (8009e18 <HAL_RTC_Init+0xf4>)
 8009d8c:	400b      	ands	r3, r1
 8009d8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6899      	ldr	r1, [r3, #8]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	431a      	orrs	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68d2      	ldr	r2, [r2, #12]
 8009db6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6919      	ldr	r1, [r3, #16]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	041a      	lsls	r2, r3, #16
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dda:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0208 	bic.w	r2, r2, #8
 8009dea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	22ff      	movs	r2, #255	; 0xff
 8009e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
  }
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	ff8fffbf 	.word	0xff8fffbf

08009e1c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	7f1b      	ldrb	r3, [r3, #28]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <HAL_RTC_SetTime+0x1c>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e0a8      	b.n	8009f8a <HAL_RTC_SetTime+0x16e>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2202      	movs	r2, #2
 8009e42:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d126      	bne.n	8009e98 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 faac 	bl	800a3c0 <RTC_ByteToBcd2>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	785b      	ldrb	r3, [r3, #1]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 faa5 	bl	800a3c0 <RTC_ByteToBcd2>
 8009e76:	4603      	mov	r3, r0
 8009e78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009e7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	789b      	ldrb	r3, [r3, #2]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fa9d 	bl	800a3c0 <RTC_ByteToBcd2>
 8009e86:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009e88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	7b1b      	ldrb	r3, [r3, #12]
 8009e90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009e92:	4313      	orrs	r3, r2
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	e018      	b.n	8009eca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	785b      	ldrb	r3, [r3, #1]
 8009eb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009eb8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009ebe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	7b1b      	ldrb	r3, [r3, #12]
 8009ec4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	22ca      	movs	r2, #202	; 0xca
 8009ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2253      	movs	r2, #83	; 0x53
 8009ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fa44 	bl	800a368 <RTC_EnterInitMode>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00b      	beq.n	8009efe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	22ff      	movs	r2, #255	; 0xff
 8009eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e045      	b.n	8009f8a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	6979      	ldr	r1, [r7, #20]
 8009f04:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <HAL_RTC_SetTime+0x178>)
 8009f06:	400b      	ands	r3, r1
 8009f08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6899      	ldr	r1, [r3, #8]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68da      	ldr	r2, [r3, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f003 0320 	and.w	r3, r3, #32
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d111      	bne.n	8009f74 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f9e1 	bl	800a318 <HAL_RTC_WaitForSynchro>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	22ff      	movs	r2, #255	; 0xff
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2204      	movs	r2, #4
 8009f68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e00a      	b.n	8009f8a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	22ff      	movs	r2, #255	; 0xff
 8009f7a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009f88:	2300      	movs	r3, #0
  }
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	371c      	adds	r7, #28
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd90      	pop	{r4, r7, pc}
 8009f92:	bf00      	nop
 8009f94:	007f7f7f 	.word	0x007f7f7f

08009f98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	7f1b      	ldrb	r3, [r3, #28]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_RTC_SetDate+0x1c>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e092      	b.n	800a0da <HAL_RTC_SetDate+0x142>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_RTC_SetDate+0x4c>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d008      	beq.n	8009fe4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	f023 0310 	bic.w	r3, r3, #16
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	330a      	adds	r3, #10
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d11c      	bne.n	800a024 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	78db      	ldrb	r3, [r3, #3]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f9e6 	bl	800a3c0 <RTC_ByteToBcd2>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f9df 	bl	800a3c0 <RTC_ByteToBcd2>
 800a002:	4603      	mov	r3, r0
 800a004:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a006:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	789b      	ldrb	r3, [r3, #2]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 f9d7 	bl	800a3c0 <RTC_ByteToBcd2>
 800a012:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a014:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a01e:	4313      	orrs	r3, r2
 800a020:	617b      	str	r3, [r7, #20]
 800a022:	e00e      	b.n	800a042 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	78db      	ldrb	r3, [r3, #3]
 800a028:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	785b      	ldrb	r3, [r3, #1]
 800a02e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a030:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a036:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	22ca      	movs	r2, #202	; 0xca
 800a048:	625a      	str	r2, [r3, #36]	; 0x24
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2253      	movs	r2, #83	; 0x53
 800a050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 f988 	bl	800a368 <RTC_EnterInitMode>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	22ff      	movs	r2, #255	; 0xff
 800a064:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2204      	movs	r2, #4
 800a06a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e031      	b.n	800a0da <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	6979      	ldr	r1, [r7, #20]
 800a07c:	4b19      	ldr	r3, [pc, #100]	; (800a0e4 <HAL_RTC_SetDate+0x14c>)
 800a07e:	400b      	ands	r3, r1
 800a080:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68da      	ldr	r2, [r3, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a090:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d111      	bne.n	800a0c4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f939 	bl	800a318 <HAL_RTC_WaitForSynchro>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00b      	beq.n	800a0c4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	22ff      	movs	r2, #255	; 0xff
 800a0b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e00a      	b.n	800a0da <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	22ff      	movs	r2, #255	; 0xff
 800a0ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
  }
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd90      	pop	{r4, r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	00ffff3f 	.word	0x00ffff3f

0800a0e8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b089      	sub	sp, #36	; 0x24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	7f1b      	ldrb	r3, [r3, #28]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d101      	bne.n	800a10c <HAL_RTC_SetAlarm+0x24>
 800a108:	2302      	movs	r3, #2
 800a10a:	e101      	b.n	800a310 <HAL_RTC_SetAlarm+0x228>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2201      	movs	r2, #1
 800a110:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2202      	movs	r2, #2
 800a116:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d137      	bne.n	800a18e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f942 	bl	800a3c0 <RTC_ByteToBcd2>
 800a13c:	4603      	mov	r3, r0
 800a13e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 f93b 	bl	800a3c0 <RTC_ByteToBcd2>
 800a14a:	4603      	mov	r3, r0
 800a14c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a14e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	789b      	ldrb	r3, [r3, #2]
 800a154:	4618      	mov	r0, r3
 800a156:	f000 f933 	bl	800a3c0 <RTC_ByteToBcd2>
 800a15a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a15c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	7b1b      	ldrb	r3, [r3, #12]
 800a164:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a166:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a170:	4618      	mov	r0, r3
 800a172:	f000 f925 	bl	800a3c0 <RTC_ByteToBcd2>
 800a176:	4603      	mov	r3, r0
 800a178:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a17a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a182:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a188:	4313      	orrs	r3, r2
 800a18a:	61fb      	str	r3, [r7, #28]
 800a18c:	e023      	b.n	800a1d6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a1ae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a1b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	7b1b      	ldrb	r3, [r3, #12]
 800a1ba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a1bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a1c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a1cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	22ca      	movs	r2, #202	; 0xca
 800a1e8:	625a      	str	r2, [r3, #36]	; 0x24
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2253      	movs	r2, #83	; 0x53
 800a1f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fa:	d13f      	bne.n	800a27c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a20a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a21a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a21c:	f7fb fe66 	bl	8005eec <HAL_GetTick>
 800a220:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a222:	e013      	b.n	800a24c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a224:	f7fb fe62 	bl	8005eec <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a232:	d90b      	bls.n	800a24c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	22ff      	movs	r2, #255	; 0xff
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2203      	movs	r2, #3
 800a240:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e061      	b.n	800a310 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0e4      	beq.n	800a224 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69fa      	ldr	r2, [r7, #28]
 800a260:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a278:	609a      	str	r2, [r3, #8]
 800a27a:	e03e      	b.n	800a2fa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a28a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a29a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a29c:	f7fb fe26 	bl	8005eec <HAL_GetTick>
 800a2a0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a2a2:	e013      	b.n	800a2cc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a2a4:	f7fb fe22 	bl	8005eec <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2b2:	d90b      	bls.n	800a2cc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	22ff      	movs	r2, #255	; 0xff
 800a2ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e021      	b.n	800a310 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0e4      	beq.n	800a2a4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69fa      	ldr	r2, [r7, #28]
 800a2e0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	22ff      	movs	r2, #255	; 0xff
 800a300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3724      	adds	r7, #36	; 0x24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd90      	pop	{r4, r7, pc}

0800a318 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a332:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a334:	f7fb fdda 	bl	8005eec <HAL_GetTick>
 800a338:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a33a:	e009      	b.n	800a350 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a33c:	f7fb fdd6 	bl	8005eec <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a34a:	d901      	bls.n	800a350 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e007      	b.n	800a360 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0ee      	beq.n	800a33c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d119      	bne.n	800a3b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f04f 32ff 	mov.w	r2, #4294967295
 800a38a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a38c:	f7fb fdae 	bl	8005eec <HAL_GetTick>
 800a390:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a392:	e009      	b.n	800a3a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a394:	f7fb fdaa 	bl	8005eec <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3a2:	d901      	bls.n	800a3a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e007      	b.n	800a3b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0ee      	beq.n	800a394 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a3ce:	e005      	b.n	800a3dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	3b0a      	subs	r3, #10
 800a3da:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a3dc:	79fb      	ldrb	r3, [r7, #7]
 800a3de:	2b09      	cmp	r3, #9
 800a3e0:	d8f6      	bhi.n	800a3d0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	b2db      	uxtb	r3, r3
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	7f1b      	ldrb	r3, [r3, #28]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d101      	bne.n	800a418 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a414:	2302      	movs	r3, #2
 800a416:	e03e      	b.n	800a496 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2201      	movs	r2, #1
 800a41c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2202      	movs	r2, #2
 800a422:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	4b1e      	ldr	r3, [pc, #120]	; (800a4a4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4313      	orrs	r3, r2
 800a436:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	22ca      	movs	r2, #202	; 0xca
 800a43e:	625a      	str	r2, [r3, #36]	; 0x24
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2253      	movs	r2, #83	; 0x53
 800a446:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0206 	bic.w	r2, r2, #6
 800a456:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	430a      	orrs	r2, r1
 800a466:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689a      	ldr	r2, [r3, #8]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a47e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	22ff      	movs	r2, #255	; 0xff
 800a486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	fffff7f7 	.word	0xfffff7f7

0800a4a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e025      	b.n	800a508 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fb fbdd 	bl	8005c90 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f001 fe61 	bl	800c1b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	f001 fecb 	bl	800c294 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	d101      	bne.n	800a52c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a528:	2302      	movs	r3, #2
 800a52a:	e018      	b.n	800a55e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f001 ff29 	bl	800c394 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d104      	bne.n	800a554 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2205      	movs	r2, #5
 800a54e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a552:	e003      	b.n	800a55c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d101      	bne.n	800a580 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a57c:	2302      	movs	r3, #2
 800a57e:	e00e      	b.n	800a59e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f001 ff21 	bl	800c3d6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e084      	b.n	800a6c2 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d106      	bne.n	800a5d8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7fb f8c8 	bl	8005768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5f8:	d902      	bls.n	800a600 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	e002      	b.n	800a606 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a604:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a60e:	d007      	beq.n	800a620 <HAL_SPI_Init+0x7a>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a618:	d002      	beq.n	800a620 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10b      	bne.n	800a640 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a630:	d903      	bls.n	800a63a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	631a      	str	r2, [r3, #48]	; 0x30
 800a638:	e002      	b.n	800a640 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	431a      	orrs	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	431a      	orrs	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	ea42 0103 	orr.w	r1, r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	0c1b      	lsrs	r3, r3, #16
 800a680:	f003 0204 	and.w	r2, r3, #4
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	431a      	orrs	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68e:	431a      	orrs	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	ea42 0103 	orr.w	r1, r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69da      	ldr	r2, [r3, #28]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e01d      	b.n	800a718 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7fb f8ab 	bl	800584c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3304      	adds	r3, #4
 800a706:	4619      	mov	r1, r3
 800a708:	4610      	mov	r0, r2
 800a70a:	f000 fbc3 	bl	800ae94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689a      	ldr	r2, [r3, #8]
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <HAL_TIM_Base_Start_IT+0x50>)
 800a740:	4013      	ands	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b06      	cmp	r3, #6
 800a748:	d00b      	beq.n	800a762 <HAL_TIM_Base_Start_IT+0x42>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a750:	d007      	beq.n	800a762 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f042 0201 	orr.w	r2, r2, #1
 800a760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	00010007 	.word	0x00010007

0800a774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e01d      	b.n	800a7c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f815 	bl	800a7ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f000 fb6e 	bl	800ae94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b083      	sub	sp, #12
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a7d2:	bf00      	nop
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f003 0302 	and.w	r3, r3, #2
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d122      	bne.n	800a83a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d11b      	bne.n	800a83a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f06f 0202 	mvn.w	r2, #2
 800a80a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fb19 	bl	800ae58 <HAL_TIM_IC_CaptureCallback>
 800a826:	e005      	b.n	800a834 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fb0b 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fb1c 	bl	800ae6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b04      	cmp	r3, #4
 800a846:	d122      	bne.n	800a88e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b04      	cmp	r3, #4
 800a854:	d11b      	bne.n	800a88e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f06f 0204 	mvn.w	r2, #4
 800a85e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 faef 	bl	800ae58 <HAL_TIM_IC_CaptureCallback>
 800a87a:	e005      	b.n	800a888 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fae1 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 faf2 	bl	800ae6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	f003 0308 	and.w	r3, r3, #8
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d122      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	f003 0308 	and.w	r3, r3, #8
 800a8a6:	2b08      	cmp	r3, #8
 800a8a8:	d11b      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f06f 0208 	mvn.w	r2, #8
 800a8b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2204      	movs	r2, #4
 800a8b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fac5 	bl	800ae58 <HAL_TIM_IC_CaptureCallback>
 800a8ce:	e005      	b.n	800a8dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fab7 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fac8 	bl	800ae6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0310 	and.w	r3, r3, #16
 800a8ec:	2b10      	cmp	r3, #16
 800a8ee:	d122      	bne.n	800a936 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0310 	and.w	r3, r3, #16
 800a8fa:	2b10      	cmp	r3, #16
 800a8fc:	d11b      	bne.n	800a936 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f06f 0210 	mvn.w	r2, #16
 800a906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2208      	movs	r2, #8
 800a90c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fa9b 	bl	800ae58 <HAL_TIM_IC_CaptureCallback>
 800a922:	e005      	b.n	800a930 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa8d 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa9e 	bl	800ae6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b01      	cmp	r3, #1
 800a942:	d10e      	bne.n	800a962 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d107      	bne.n	800a962 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0201 	mvn.w	r2, #1
 800a95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7f8 fec3 	bl	80036e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96c:	2b80      	cmp	r3, #128	; 0x80
 800a96e:	d10e      	bne.n	800a98e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97a:	2b80      	cmp	r3, #128	; 0x80
 800a97c:	d107      	bne.n	800a98e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 ffb9 	bl	800b900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99c:	d10e      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a8:	2b80      	cmp	r3, #128	; 0x80
 800a9aa:	d107      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 ffac 	bl	800b914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c6:	2b40      	cmp	r3, #64	; 0x40
 800a9c8:	d10e      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d4:	2b40      	cmp	r3, #64	; 0x40
 800a9d6:	d107      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fa4c 	bl	800ae80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b20      	cmp	r3, #32
 800a9f4:	d10e      	bne.n	800aa14 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b20      	cmp	r3, #32
 800aa02:	d107      	bne.n	800aa14 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0220 	mvn.w	r2, #32
 800aa0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 ff6c 	bl	800b8ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d101      	bne.n	800aa36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aa32:	2302      	movs	r3, #2
 800aa34:	e105      	b.n	800ac42 <HAL_TIM_PWM_ConfigChannel+0x226>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b14      	cmp	r3, #20
 800aa4a:	f200 80f0 	bhi.w	800ac2e <HAL_TIM_PWM_ConfigChannel+0x212>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aaa9 	.word	0x0800aaa9
 800aa58:	0800ac2f 	.word	0x0800ac2f
 800aa5c:	0800ac2f 	.word	0x0800ac2f
 800aa60:	0800ac2f 	.word	0x0800ac2f
 800aa64:	0800aae9 	.word	0x0800aae9
 800aa68:	0800ac2f 	.word	0x0800ac2f
 800aa6c:	0800ac2f 	.word	0x0800ac2f
 800aa70:	0800ac2f 	.word	0x0800ac2f
 800aa74:	0800ab2b 	.word	0x0800ab2b
 800aa78:	0800ac2f 	.word	0x0800ac2f
 800aa7c:	0800ac2f 	.word	0x0800ac2f
 800aa80:	0800ac2f 	.word	0x0800ac2f
 800aa84:	0800ab6b 	.word	0x0800ab6b
 800aa88:	0800ac2f 	.word	0x0800ac2f
 800aa8c:	0800ac2f 	.word	0x0800ac2f
 800aa90:	0800ac2f 	.word	0x0800ac2f
 800aa94:	0800abad 	.word	0x0800abad
 800aa98:	0800ac2f 	.word	0x0800ac2f
 800aa9c:	0800ac2f 	.word	0x0800ac2f
 800aaa0:	0800ac2f 	.word	0x0800ac2f
 800aaa4:	0800abed 	.word	0x0800abed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fa90 	bl	800afd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f042 0208 	orr.w	r2, r2, #8
 800aac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699a      	ldr	r2, [r3, #24]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0204 	bic.w	r2, r2, #4
 800aad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6999      	ldr	r1, [r3, #24]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	619a      	str	r2, [r3, #24]
      break;
 800aae6:	e0a3      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fae2 	bl	800b0b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	699a      	ldr	r2, [r3, #24]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	699a      	ldr	r2, [r3, #24]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6999      	ldr	r1, [r3, #24]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	021a      	lsls	r2, r3, #8
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	619a      	str	r2, [r3, #24]
      break;
 800ab28:	e082      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fb39 	bl	800b1a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69da      	ldr	r2, [r3, #28]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f042 0208 	orr.w	r2, r2, #8
 800ab44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69da      	ldr	r2, [r3, #28]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 0204 	bic.w	r2, r2, #4
 800ab54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69d9      	ldr	r1, [r3, #28]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	691a      	ldr	r2, [r3, #16]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	61da      	str	r2, [r3, #28]
      break;
 800ab68:	e062      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fb8f 	bl	800b294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	69da      	ldr	r2, [r3, #28]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	69da      	ldr	r2, [r3, #28]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69d9      	ldr	r1, [r3, #28]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	021a      	lsls	r2, r3, #8
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	61da      	str	r2, [r3, #28]
      break;
 800abaa:	e041      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fbc6 	bl	800b344 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 0208 	orr.w	r2, r2, #8
 800abc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0204 	bic.w	r2, r2, #4
 800abd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800abea:	e021      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fbf8 	bl	800b3e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	021a      	lsls	r2, r3, #8
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac2c:	e000      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800ac2e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop

0800ac4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d101      	bne.n	800ac64 <HAL_TIM_ConfigClockSource+0x18>
 800ac60:	2302      	movs	r3, #2
 800ac62:	e0a6      	b.n	800adb2 <HAL_TIM_ConfigClockSource+0x166>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4b4f      	ldr	r3, [pc, #316]	; (800adbc <HAL_TIM_ConfigClockSource+0x170>)
 800ac80:	4013      	ands	r3, r2
 800ac82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b40      	cmp	r3, #64	; 0x40
 800ac9a:	d067      	beq.n	800ad6c <HAL_TIM_ConfigClockSource+0x120>
 800ac9c:	2b40      	cmp	r3, #64	; 0x40
 800ac9e:	d80b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x6c>
 800aca0:	2b10      	cmp	r3, #16
 800aca2:	d073      	beq.n	800ad8c <HAL_TIM_ConfigClockSource+0x140>
 800aca4:	2b10      	cmp	r3, #16
 800aca6:	d802      	bhi.n	800acae <HAL_TIM_ConfigClockSource+0x62>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d06f      	beq.n	800ad8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800acac:	e078      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800acae:	2b20      	cmp	r3, #32
 800acb0:	d06c      	beq.n	800ad8c <HAL_TIM_ConfigClockSource+0x140>
 800acb2:	2b30      	cmp	r3, #48	; 0x30
 800acb4:	d06a      	beq.n	800ad8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800acb6:	e073      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800acb8:	2b70      	cmp	r3, #112	; 0x70
 800acba:	d00d      	beq.n	800acd8 <HAL_TIM_ConfigClockSource+0x8c>
 800acbc:	2b70      	cmp	r3, #112	; 0x70
 800acbe:	d804      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x7e>
 800acc0:	2b50      	cmp	r3, #80	; 0x50
 800acc2:	d033      	beq.n	800ad2c <HAL_TIM_ConfigClockSource+0xe0>
 800acc4:	2b60      	cmp	r3, #96	; 0x60
 800acc6:	d041      	beq.n	800ad4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800acc8:	e06a      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800acca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acce:	d066      	beq.n	800ad9e <HAL_TIM_ConfigClockSource+0x152>
 800acd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd4:	d017      	beq.n	800ad06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800acd6:	e063      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6818      	ldr	r0, [r3, #0]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	6899      	ldr	r1, [r3, #8]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	f000 fcd4 	bl	800b694 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	609a      	str	r2, [r3, #8]
      break;
 800ad04:	e04c      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6818      	ldr	r0, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	6899      	ldr	r1, [r3, #8]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f000 fcbd 	bl	800b694 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad28:	609a      	str	r2, [r3, #8]
      break;
 800ad2a:	e039      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	6859      	ldr	r1, [r3, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	f000 fc31 	bl	800b5a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2150      	movs	r1, #80	; 0x50
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fc8a 	bl	800b65e <TIM_ITRx_SetConfig>
      break;
 800ad4a:	e029      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	6859      	ldr	r1, [r3, #4]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	f000 fc50 	bl	800b5fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2160      	movs	r1, #96	; 0x60
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 fc7a 	bl	800b65e <TIM_ITRx_SetConfig>
      break;
 800ad6a:	e019      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	6859      	ldr	r1, [r3, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	f000 fc11 	bl	800b5a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2140      	movs	r1, #64	; 0x40
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fc6a 	bl	800b65e <TIM_ITRx_SetConfig>
      break;
 800ad8a:	e009      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f000 fc61 	bl	800b65e <TIM_ITRx_SetConfig>
      break;
 800ad9c:	e000      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ad9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	fffeff88 	.word	0xfffeff88

0800adc0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800add4:	2302      	movs	r3, #2
 800add6:	e031      	b.n	800ae3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fb50 	bl	800b490 <TIM_SlaveTimer_SetConfig>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d009      	beq.n	800ae0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e018      	b.n	800ae3c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68da      	ldr	r2, [r3, #12]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a40      	ldr	r2, [pc, #256]	; (800afa8 <TIM_Base_SetConfig+0x114>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d013      	beq.n	800aed4 <TIM_Base_SetConfig+0x40>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb2:	d00f      	beq.n	800aed4 <TIM_Base_SetConfig+0x40>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a3d      	ldr	r2, [pc, #244]	; (800afac <TIM_Base_SetConfig+0x118>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00b      	beq.n	800aed4 <TIM_Base_SetConfig+0x40>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a3c      	ldr	r2, [pc, #240]	; (800afb0 <TIM_Base_SetConfig+0x11c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d007      	beq.n	800aed4 <TIM_Base_SetConfig+0x40>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a3b      	ldr	r2, [pc, #236]	; (800afb4 <TIM_Base_SetConfig+0x120>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d003      	beq.n	800aed4 <TIM_Base_SetConfig+0x40>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a3a      	ldr	r2, [pc, #232]	; (800afb8 <TIM_Base_SetConfig+0x124>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d108      	bne.n	800aee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a2f      	ldr	r2, [pc, #188]	; (800afa8 <TIM_Base_SetConfig+0x114>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d02b      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef4:	d027      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a2c      	ldr	r2, [pc, #176]	; (800afac <TIM_Base_SetConfig+0x118>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d023      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a2b      	ldr	r2, [pc, #172]	; (800afb0 <TIM_Base_SetConfig+0x11c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d01f      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a2a      	ldr	r2, [pc, #168]	; (800afb4 <TIM_Base_SetConfig+0x120>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d01b      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a29      	ldr	r2, [pc, #164]	; (800afb8 <TIM_Base_SetConfig+0x124>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d017      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a28      	ldr	r2, [pc, #160]	; (800afbc <TIM_Base_SetConfig+0x128>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d013      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a27      	ldr	r2, [pc, #156]	; (800afc0 <TIM_Base_SetConfig+0x12c>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d00f      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a26      	ldr	r2, [pc, #152]	; (800afc4 <TIM_Base_SetConfig+0x130>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00b      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a25      	ldr	r2, [pc, #148]	; (800afc8 <TIM_Base_SetConfig+0x134>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a24      	ldr	r2, [pc, #144]	; (800afcc <TIM_Base_SetConfig+0x138>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d003      	beq.n	800af46 <TIM_Base_SetConfig+0xb2>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a23      	ldr	r2, [pc, #140]	; (800afd0 <TIM_Base_SetConfig+0x13c>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d108      	bne.n	800af58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	4313      	orrs	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689a      	ldr	r2, [r3, #8]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a0a      	ldr	r2, [pc, #40]	; (800afa8 <TIM_Base_SetConfig+0x114>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d003      	beq.n	800af8c <TIM_Base_SetConfig+0xf8>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a0c      	ldr	r2, [pc, #48]	; (800afb8 <TIM_Base_SetConfig+0x124>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d103      	bne.n	800af94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	691a      	ldr	r2, [r3, #16]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	615a      	str	r2, [r3, #20]
}
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	40010000 	.word	0x40010000
 800afac:	40000400 	.word	0x40000400
 800afb0:	40000800 	.word	0x40000800
 800afb4:	40000c00 	.word	0x40000c00
 800afb8:	40010400 	.word	0x40010400
 800afbc:	40014000 	.word	0x40014000
 800afc0:	40014400 	.word	0x40014400
 800afc4:	40014800 	.word	0x40014800
 800afc8:	40001800 	.word	0x40001800
 800afcc:	40001c00 	.word	0x40001c00
 800afd0:	40002000 	.word	0x40002000

0800afd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	f023 0201 	bic.w	r2, r3, #1
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4b2b      	ldr	r3, [pc, #172]	; (800b0ac <TIM_OC1_SetConfig+0xd8>)
 800b000:	4013      	ands	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 0303 	bic.w	r3, r3, #3
 800b00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f023 0302 	bic.w	r3, r3, #2
 800b01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	4313      	orrs	r3, r2
 800b026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a21      	ldr	r2, [pc, #132]	; (800b0b0 <TIM_OC1_SetConfig+0xdc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d003      	beq.n	800b038 <TIM_OC1_SetConfig+0x64>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a20      	ldr	r2, [pc, #128]	; (800b0b4 <TIM_OC1_SetConfig+0xe0>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d10c      	bne.n	800b052 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f023 0308 	bic.w	r3, r3, #8
 800b03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	4313      	orrs	r3, r2
 800b048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f023 0304 	bic.w	r3, r3, #4
 800b050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a16      	ldr	r2, [pc, #88]	; (800b0b0 <TIM_OC1_SetConfig+0xdc>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d003      	beq.n	800b062 <TIM_OC1_SetConfig+0x8e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a15      	ldr	r2, [pc, #84]	; (800b0b4 <TIM_OC1_SetConfig+0xe0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d111      	bne.n	800b086 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4313      	orrs	r3, r2
 800b084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	621a      	str	r2, [r3, #32]
}
 800b0a0:	bf00      	nop
 800b0a2:	371c      	adds	r7, #28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	fffeff8f 	.word	0xfffeff8f
 800b0b0:	40010000 	.word	0x40010000
 800b0b4:	40010400 	.word	0x40010400

0800b0b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	f023 0210 	bic.w	r2, r3, #16
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4b2e      	ldr	r3, [pc, #184]	; (800b19c <TIM_OC2_SetConfig+0xe4>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	021b      	lsls	r3, r3, #8
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f023 0320 	bic.w	r3, r3, #32
 800b102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a23      	ldr	r2, [pc, #140]	; (800b1a0 <TIM_OC2_SetConfig+0xe8>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d003      	beq.n	800b120 <TIM_OC2_SetConfig+0x68>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a22      	ldr	r2, [pc, #136]	; (800b1a4 <TIM_OC2_SetConfig+0xec>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d10d      	bne.n	800b13c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	011b      	lsls	r3, r3, #4
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b13a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a18      	ldr	r2, [pc, #96]	; (800b1a0 <TIM_OC2_SetConfig+0xe8>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d003      	beq.n	800b14c <TIM_OC2_SetConfig+0x94>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a17      	ldr	r2, [pc, #92]	; (800b1a4 <TIM_OC2_SetConfig+0xec>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d113      	bne.n	800b174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b15a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4313      	orrs	r3, r2
 800b166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	4313      	orrs	r3, r2
 800b172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	621a      	str	r2, [r3, #32]
}
 800b18e:	bf00      	nop
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	feff8fff 	.word	0xfeff8fff
 800b1a0:	40010000 	.word	0x40010000
 800b1a4:	40010400 	.word	0x40010400

0800b1a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4b2d      	ldr	r3, [pc, #180]	; (800b288 <TIM_OC3_SetConfig+0xe0>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a22      	ldr	r2, [pc, #136]	; (800b28c <TIM_OC3_SetConfig+0xe4>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <TIM_OC3_SetConfig+0x66>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a21      	ldr	r2, [pc, #132]	; (800b290 <TIM_OC3_SetConfig+0xe8>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d10d      	bne.n	800b22a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	021b      	lsls	r3, r3, #8
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a17      	ldr	r2, [pc, #92]	; (800b28c <TIM_OC3_SetConfig+0xe4>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d003      	beq.n	800b23a <TIM_OC3_SetConfig+0x92>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a16      	ldr	r2, [pc, #88]	; (800b290 <TIM_OC3_SetConfig+0xe8>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d113      	bne.n	800b262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	011b      	lsls	r3, r3, #4
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	011b      	lsls	r3, r3, #4
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4313      	orrs	r3, r2
 800b260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	621a      	str	r2, [r3, #32]
}
 800b27c:	bf00      	nop
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	fffeff8f 	.word	0xfffeff8f
 800b28c:	40010000 	.word	0x40010000
 800b290:	40010400 	.word	0x40010400

0800b294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <TIM_OC4_SetConfig+0xa4>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	031b      	lsls	r3, r3, #12
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a13      	ldr	r2, [pc, #76]	; (800b33c <TIM_OC4_SetConfig+0xa8>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d003      	beq.n	800b2fc <TIM_OC4_SetConfig+0x68>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a12      	ldr	r2, [pc, #72]	; (800b340 <TIM_OC4_SetConfig+0xac>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d109      	bne.n	800b310 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	019b      	lsls	r3, r3, #6
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	621a      	str	r2, [r3, #32]
}
 800b32a:	bf00      	nop
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	feff8fff 	.word	0xfeff8fff
 800b33c:	40010000 	.word	0x40010000
 800b340:	40010400 	.word	0x40010400

0800b344 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	4b1b      	ldr	r3, [pc, #108]	; (800b3dc <TIM_OC5_SetConfig+0x98>)
 800b370:	4013      	ands	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	4313      	orrs	r3, r2
 800b390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a12      	ldr	r2, [pc, #72]	; (800b3e0 <TIM_OC5_SetConfig+0x9c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d003      	beq.n	800b3a2 <TIM_OC5_SetConfig+0x5e>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a11      	ldr	r2, [pc, #68]	; (800b3e4 <TIM_OC5_SetConfig+0xa0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d109      	bne.n	800b3b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	021b      	lsls	r3, r3, #8
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	621a      	str	r2, [r3, #32]
}
 800b3d0:	bf00      	nop
 800b3d2:	371c      	adds	r7, #28
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	fffeff8f 	.word	0xfffeff8f
 800b3e0:	40010000 	.word	0x40010000
 800b3e4:	40010400 	.word	0x40010400

0800b3e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4b1c      	ldr	r3, [pc, #112]	; (800b484 <TIM_OC6_SetConfig+0x9c>)
 800b414:	4013      	ands	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	021b      	lsls	r3, r3, #8
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b42a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	051b      	lsls	r3, r3, #20
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	4313      	orrs	r3, r2
 800b436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a13      	ldr	r2, [pc, #76]	; (800b488 <TIM_OC6_SetConfig+0xa0>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d003      	beq.n	800b448 <TIM_OC6_SetConfig+0x60>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a12      	ldr	r2, [pc, #72]	; (800b48c <TIM_OC6_SetConfig+0xa4>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d109      	bne.n	800b45c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b44e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	029b      	lsls	r3, r3, #10
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	4313      	orrs	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	bf00      	nop
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	feff8fff 	.word	0xfeff8fff
 800b488:	40010000 	.word	0x40010000
 800b48c:	40010400 	.word	0x40010400

0800b490 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	4b39      	ldr	r3, [pc, #228]	; (800b59c <TIM_SlaveTimer_SetConfig+0x10c>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	2b30      	cmp	r3, #48	; 0x30
 800b4d4:	d05c      	beq.n	800b590 <TIM_SlaveTimer_SetConfig+0x100>
 800b4d6:	2b30      	cmp	r3, #48	; 0x30
 800b4d8:	d806      	bhi.n	800b4e8 <TIM_SlaveTimer_SetConfig+0x58>
 800b4da:	2b10      	cmp	r3, #16
 800b4dc:	d058      	beq.n	800b590 <TIM_SlaveTimer_SetConfig+0x100>
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	d056      	beq.n	800b590 <TIM_SlaveTimer_SetConfig+0x100>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d054      	beq.n	800b590 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800b4e6:	e054      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b4e8:	2b50      	cmp	r3, #80	; 0x50
 800b4ea:	d03d      	beq.n	800b568 <TIM_SlaveTimer_SetConfig+0xd8>
 800b4ec:	2b50      	cmp	r3, #80	; 0x50
 800b4ee:	d802      	bhi.n	800b4f6 <TIM_SlaveTimer_SetConfig+0x66>
 800b4f0:	2b40      	cmp	r3, #64	; 0x40
 800b4f2:	d010      	beq.n	800b516 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800b4f4:	e04d      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b4f6:	2b60      	cmp	r3, #96	; 0x60
 800b4f8:	d040      	beq.n	800b57c <TIM_SlaveTimer_SetConfig+0xec>
 800b4fa:	2b70      	cmp	r3, #112	; 0x70
 800b4fc:	d000      	beq.n	800b500 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800b4fe:	e048      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	68d9      	ldr	r1, [r3, #12]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	f000 f8c0 	bl	800b694 <TIM_ETR_SetConfig>
      break;
 800b514:	e03d      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b05      	cmp	r3, #5
 800b51c:	d101      	bne.n	800b522 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e038      	b.n	800b594 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6a1a      	ldr	r2, [r3, #32]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f022 0201 	bic.w	r2, r2, #1
 800b538:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b548:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	621a      	str	r2, [r3, #32]
      break;
 800b566:	e014      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	6899      	ldr	r1, [r3, #8]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	461a      	mov	r2, r3
 800b576:	f000 f813 	bl	800b5a0 <TIM_TI1_ConfigInputStage>
      break;
 800b57a:	e00a      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	6899      	ldr	r1, [r3, #8]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	461a      	mov	r2, r3
 800b58a:	f000 f838 	bl	800b5fe <TIM_TI2_ConfigInputStage>
      break;
 800b58e:	e000      	b.n	800b592 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800b590:	bf00      	nop
  }
  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	fffefff8 	.word	0xfffefff8

0800b5a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	f023 0201 	bic.w	r2, r3, #1
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	011b      	lsls	r3, r3, #4
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f023 030a 	bic.w	r3, r3, #10
 800b5dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	621a      	str	r2, [r3, #32]
}
 800b5f2:	bf00      	nop
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b087      	sub	sp, #28
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	f023 0210 	bic.w	r2, r3, #16
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b628:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	031b      	lsls	r3, r3, #12
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b63a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	011b      	lsls	r3, r3, #4
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	4313      	orrs	r3, r2
 800b644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	621a      	str	r2, [r3, #32]
}
 800b652:	bf00      	nop
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b65e:	b480      	push	{r7}
 800b660:	b085      	sub	sp, #20
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	f043 0307 	orr.w	r3, r3, #7
 800b680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	609a      	str	r2, [r3, #8]
}
 800b688:	bf00      	nop
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	021a      	lsls	r2, r3, #8
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	609a      	str	r2, [r3, #8]
}
 800b6c8:	bf00      	nop
 800b6ca:	371c      	adds	r7, #28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d101      	bne.n	800b6ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e06d      	b.n	800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a30      	ldr	r2, [pc, #192]	; (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d004      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a2f      	ldr	r2, [pc, #188]	; (800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d108      	bne.n	800b732 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b726:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	4313      	orrs	r3, r2
 800b730:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	4313      	orrs	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a20      	ldr	r2, [pc, #128]	; (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d022      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b75e:	d01d      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a1d      	ldr	r2, [pc, #116]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d018      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a1c      	ldr	r2, [pc, #112]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d013      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a1a      	ldr	r2, [pc, #104]	; (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d00e      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d009      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a16      	ldr	r2, [pc, #88]	; (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d004      	beq.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d10c      	bne.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	40010000 	.word	0x40010000
 800b7d8:	40010400 	.word	0x40010400
 800b7dc:	40000400 	.word	0x40000400
 800b7e0:	40000800 	.word	0x40000800
 800b7e4:	40000c00 	.word	0x40000c00
 800b7e8:	40014000 	.word	0x40014000
 800b7ec:	40001800 	.word	0x40001800

0800b7f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b804:	2b01      	cmp	r3, #1
 800b806:	d101      	bne.n	800b80c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b808:	2302      	movs	r3, #2
 800b80a:	e065      	b.n	800b8d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	4313      	orrs	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	041b      	lsls	r3, r3, #16
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a16      	ldr	r2, [pc, #88]	; (800b8e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d004      	beq.n	800b89a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a14      	ldr	r2, [pc, #80]	; (800b8e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d115      	bne.n	800b8c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	051b      	lsls	r3, r3, #20
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	40010000 	.word	0x40010000
 800b8e8:	40010400 	.word	0x40010400

0800b8ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	e040      	b.n	800b9bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7fa f84a 	bl	80059e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2224      	movs	r2, #36	; 0x24
 800b954:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f82c 	bl	800b9c4 <UART_SetConfig>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d101      	bne.n	800b976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e022      	b.n	800b9bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 faca 	bl	800bf18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f042 0201 	orr.w	r2, r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fb51 	bl	800c05c <UART_CheckIdleState>
 800b9ba:	4603      	mov	r3, r0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	4bb1      	ldr	r3, [pc, #708]	; (800bcb8 <UART_SetConfig+0x2f4>)
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	6939      	ldr	r1, [r7, #16]
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a9f      	ldr	r2, [pc, #636]	; (800bcbc <UART_SetConfig+0x2f8>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d121      	bne.n	800ba88 <UART_SetConfig+0xc4>
 800ba44:	4b9e      	ldr	r3, [pc, #632]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800ba46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d816      	bhi.n	800ba80 <UART_SetConfig+0xbc>
 800ba52:	a201      	add	r2, pc, #4	; (adr r2, 800ba58 <UART_SetConfig+0x94>)
 800ba54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba58:	0800ba69 	.word	0x0800ba69
 800ba5c:	0800ba75 	.word	0x0800ba75
 800ba60:	0800ba6f 	.word	0x0800ba6f
 800ba64:	0800ba7b 	.word	0x0800ba7b
 800ba68:	2301      	movs	r3, #1
 800ba6a:	77fb      	strb	r3, [r7, #31]
 800ba6c:	e151      	b.n	800bd12 <UART_SetConfig+0x34e>
 800ba6e:	2302      	movs	r3, #2
 800ba70:	77fb      	strb	r3, [r7, #31]
 800ba72:	e14e      	b.n	800bd12 <UART_SetConfig+0x34e>
 800ba74:	2304      	movs	r3, #4
 800ba76:	77fb      	strb	r3, [r7, #31]
 800ba78:	e14b      	b.n	800bd12 <UART_SetConfig+0x34e>
 800ba7a:	2308      	movs	r3, #8
 800ba7c:	77fb      	strb	r3, [r7, #31]
 800ba7e:	e148      	b.n	800bd12 <UART_SetConfig+0x34e>
 800ba80:	2310      	movs	r3, #16
 800ba82:	77fb      	strb	r3, [r7, #31]
 800ba84:	bf00      	nop
 800ba86:	e144      	b.n	800bd12 <UART_SetConfig+0x34e>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a8d      	ldr	r2, [pc, #564]	; (800bcc4 <UART_SetConfig+0x300>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d134      	bne.n	800bafc <UART_SetConfig+0x138>
 800ba92:	4b8b      	ldr	r3, [pc, #556]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800ba94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba98:	f003 030c 	and.w	r3, r3, #12
 800ba9c:	2b0c      	cmp	r3, #12
 800ba9e:	d829      	bhi.n	800baf4 <UART_SetConfig+0x130>
 800baa0:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <UART_SetConfig+0xe4>)
 800baa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800badd 	.word	0x0800badd
 800baac:	0800baf5 	.word	0x0800baf5
 800bab0:	0800baf5 	.word	0x0800baf5
 800bab4:	0800baf5 	.word	0x0800baf5
 800bab8:	0800bae9 	.word	0x0800bae9
 800babc:	0800baf5 	.word	0x0800baf5
 800bac0:	0800baf5 	.word	0x0800baf5
 800bac4:	0800baf5 	.word	0x0800baf5
 800bac8:	0800bae3 	.word	0x0800bae3
 800bacc:	0800baf5 	.word	0x0800baf5
 800bad0:	0800baf5 	.word	0x0800baf5
 800bad4:	0800baf5 	.word	0x0800baf5
 800bad8:	0800baef 	.word	0x0800baef
 800badc:	2300      	movs	r3, #0
 800bade:	77fb      	strb	r3, [r7, #31]
 800bae0:	e117      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bae2:	2302      	movs	r3, #2
 800bae4:	77fb      	strb	r3, [r7, #31]
 800bae6:	e114      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bae8:	2304      	movs	r3, #4
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e111      	b.n	800bd12 <UART_SetConfig+0x34e>
 800baee:	2308      	movs	r3, #8
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e10e      	b.n	800bd12 <UART_SetConfig+0x34e>
 800baf4:	2310      	movs	r3, #16
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	bf00      	nop
 800bafa:	e10a      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a71      	ldr	r2, [pc, #452]	; (800bcc8 <UART_SetConfig+0x304>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d120      	bne.n	800bb48 <UART_SetConfig+0x184>
 800bb06:	4b6e      	ldr	r3, [pc, #440]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800bb08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb10:	2b10      	cmp	r3, #16
 800bb12:	d00f      	beq.n	800bb34 <UART_SetConfig+0x170>
 800bb14:	2b10      	cmp	r3, #16
 800bb16:	d802      	bhi.n	800bb1e <UART_SetConfig+0x15a>
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d005      	beq.n	800bb28 <UART_SetConfig+0x164>
 800bb1c:	e010      	b.n	800bb40 <UART_SetConfig+0x17c>
 800bb1e:	2b20      	cmp	r3, #32
 800bb20:	d005      	beq.n	800bb2e <UART_SetConfig+0x16a>
 800bb22:	2b30      	cmp	r3, #48	; 0x30
 800bb24:	d009      	beq.n	800bb3a <UART_SetConfig+0x176>
 800bb26:	e00b      	b.n	800bb40 <UART_SetConfig+0x17c>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	77fb      	strb	r3, [r7, #31]
 800bb2c:	e0f1      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	77fb      	strb	r3, [r7, #31]
 800bb32:	e0ee      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb34:	2304      	movs	r3, #4
 800bb36:	77fb      	strb	r3, [r7, #31]
 800bb38:	e0eb      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	77fb      	strb	r3, [r7, #31]
 800bb3e:	e0e8      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb40:	2310      	movs	r3, #16
 800bb42:	77fb      	strb	r3, [r7, #31]
 800bb44:	bf00      	nop
 800bb46:	e0e4      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a5f      	ldr	r2, [pc, #380]	; (800bccc <UART_SetConfig+0x308>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d120      	bne.n	800bb94 <UART_SetConfig+0x1d0>
 800bb52:	4b5b      	ldr	r3, [pc, #364]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800bb54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb5c:	2b40      	cmp	r3, #64	; 0x40
 800bb5e:	d00f      	beq.n	800bb80 <UART_SetConfig+0x1bc>
 800bb60:	2b40      	cmp	r3, #64	; 0x40
 800bb62:	d802      	bhi.n	800bb6a <UART_SetConfig+0x1a6>
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <UART_SetConfig+0x1b0>
 800bb68:	e010      	b.n	800bb8c <UART_SetConfig+0x1c8>
 800bb6a:	2b80      	cmp	r3, #128	; 0x80
 800bb6c:	d005      	beq.n	800bb7a <UART_SetConfig+0x1b6>
 800bb6e:	2bc0      	cmp	r3, #192	; 0xc0
 800bb70:	d009      	beq.n	800bb86 <UART_SetConfig+0x1c2>
 800bb72:	e00b      	b.n	800bb8c <UART_SetConfig+0x1c8>
 800bb74:	2300      	movs	r3, #0
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	e0cb      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	77fb      	strb	r3, [r7, #31]
 800bb7e:	e0c8      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb80:	2304      	movs	r3, #4
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	e0c5      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb86:	2308      	movs	r3, #8
 800bb88:	77fb      	strb	r3, [r7, #31]
 800bb8a:	e0c2      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb8c:	2310      	movs	r3, #16
 800bb8e:	77fb      	strb	r3, [r7, #31]
 800bb90:	bf00      	nop
 800bb92:	e0be      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a4d      	ldr	r2, [pc, #308]	; (800bcd0 <UART_SetConfig+0x30c>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d124      	bne.n	800bbe8 <UART_SetConfig+0x224>
 800bb9e:	4b48      	ldr	r3, [pc, #288]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800bba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbac:	d012      	beq.n	800bbd4 <UART_SetConfig+0x210>
 800bbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb2:	d802      	bhi.n	800bbba <UART_SetConfig+0x1f6>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d007      	beq.n	800bbc8 <UART_SetConfig+0x204>
 800bbb8:	e012      	b.n	800bbe0 <UART_SetConfig+0x21c>
 800bbba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbbe:	d006      	beq.n	800bbce <UART_SetConfig+0x20a>
 800bbc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbc4:	d009      	beq.n	800bbda <UART_SetConfig+0x216>
 800bbc6:	e00b      	b.n	800bbe0 <UART_SetConfig+0x21c>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	77fb      	strb	r3, [r7, #31]
 800bbcc:	e0a1      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	77fb      	strb	r3, [r7, #31]
 800bbd2:	e09e      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bbd4:	2304      	movs	r3, #4
 800bbd6:	77fb      	strb	r3, [r7, #31]
 800bbd8:	e09b      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bbda:	2308      	movs	r3, #8
 800bbdc:	77fb      	strb	r3, [r7, #31]
 800bbde:	e098      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bbe0:	2310      	movs	r3, #16
 800bbe2:	77fb      	strb	r3, [r7, #31]
 800bbe4:	bf00      	nop
 800bbe6:	e094      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a39      	ldr	r2, [pc, #228]	; (800bcd4 <UART_SetConfig+0x310>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d124      	bne.n	800bc3c <UART_SetConfig+0x278>
 800bbf2:	4b33      	ldr	r3, [pc, #204]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bbfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc00:	d012      	beq.n	800bc28 <UART_SetConfig+0x264>
 800bc02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc06:	d802      	bhi.n	800bc0e <UART_SetConfig+0x24a>
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d007      	beq.n	800bc1c <UART_SetConfig+0x258>
 800bc0c:	e012      	b.n	800bc34 <UART_SetConfig+0x270>
 800bc0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc12:	d006      	beq.n	800bc22 <UART_SetConfig+0x25e>
 800bc14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc18:	d009      	beq.n	800bc2e <UART_SetConfig+0x26a>
 800bc1a:	e00b      	b.n	800bc34 <UART_SetConfig+0x270>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	77fb      	strb	r3, [r7, #31]
 800bc20:	e077      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc22:	2302      	movs	r3, #2
 800bc24:	77fb      	strb	r3, [r7, #31]
 800bc26:	e074      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc28:	2304      	movs	r3, #4
 800bc2a:	77fb      	strb	r3, [r7, #31]
 800bc2c:	e071      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc2e:	2308      	movs	r3, #8
 800bc30:	77fb      	strb	r3, [r7, #31]
 800bc32:	e06e      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc34:	2310      	movs	r3, #16
 800bc36:	77fb      	strb	r3, [r7, #31]
 800bc38:	bf00      	nop
 800bc3a:	e06a      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <UART_SetConfig+0x314>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d124      	bne.n	800bc90 <UART_SetConfig+0x2cc>
 800bc46:	4b1e      	ldr	r3, [pc, #120]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800bc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bc50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc54:	d012      	beq.n	800bc7c <UART_SetConfig+0x2b8>
 800bc56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc5a:	d802      	bhi.n	800bc62 <UART_SetConfig+0x29e>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d007      	beq.n	800bc70 <UART_SetConfig+0x2ac>
 800bc60:	e012      	b.n	800bc88 <UART_SetConfig+0x2c4>
 800bc62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc66:	d006      	beq.n	800bc76 <UART_SetConfig+0x2b2>
 800bc68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc6c:	d009      	beq.n	800bc82 <UART_SetConfig+0x2be>
 800bc6e:	e00b      	b.n	800bc88 <UART_SetConfig+0x2c4>
 800bc70:	2300      	movs	r3, #0
 800bc72:	77fb      	strb	r3, [r7, #31]
 800bc74:	e04d      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc76:	2302      	movs	r3, #2
 800bc78:	77fb      	strb	r3, [r7, #31]
 800bc7a:	e04a      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc7c:	2304      	movs	r3, #4
 800bc7e:	77fb      	strb	r3, [r7, #31]
 800bc80:	e047      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc82:	2308      	movs	r3, #8
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e044      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	77fb      	strb	r3, [r7, #31]
 800bc8c:	bf00      	nop
 800bc8e:	e040      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a11      	ldr	r2, [pc, #68]	; (800bcdc <UART_SetConfig+0x318>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d139      	bne.n	800bd0e <UART_SetConfig+0x34a>
 800bc9a:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <UART_SetConfig+0x2fc>)
 800bc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bca8:	d027      	beq.n	800bcfa <UART_SetConfig+0x336>
 800bcaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcae:	d817      	bhi.n	800bce0 <UART_SetConfig+0x31c>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01c      	beq.n	800bcee <UART_SetConfig+0x32a>
 800bcb4:	e027      	b.n	800bd06 <UART_SetConfig+0x342>
 800bcb6:	bf00      	nop
 800bcb8:	efff69f3 	.word	0xefff69f3
 800bcbc:	40011000 	.word	0x40011000
 800bcc0:	40023800 	.word	0x40023800
 800bcc4:	40004400 	.word	0x40004400
 800bcc8:	40004800 	.word	0x40004800
 800bccc:	40004c00 	.word	0x40004c00
 800bcd0:	40005000 	.word	0x40005000
 800bcd4:	40011400 	.word	0x40011400
 800bcd8:	40007800 	.word	0x40007800
 800bcdc:	40007c00 	.word	0x40007c00
 800bce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce4:	d006      	beq.n	800bcf4 <UART_SetConfig+0x330>
 800bce6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bcea:	d009      	beq.n	800bd00 <UART_SetConfig+0x33c>
 800bcec:	e00b      	b.n	800bd06 <UART_SetConfig+0x342>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	77fb      	strb	r3, [r7, #31]
 800bcf2:	e00e      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	77fb      	strb	r3, [r7, #31]
 800bcf8:	e00b      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bcfa:	2304      	movs	r3, #4
 800bcfc:	77fb      	strb	r3, [r7, #31]
 800bcfe:	e008      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bd00:	2308      	movs	r3, #8
 800bd02:	77fb      	strb	r3, [r7, #31]
 800bd04:	e005      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bd06:	2310      	movs	r3, #16
 800bd08:	77fb      	strb	r3, [r7, #31]
 800bd0a:	bf00      	nop
 800bd0c:	e001      	b.n	800bd12 <UART_SetConfig+0x34e>
 800bd0e:	2310      	movs	r3, #16
 800bd10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd1a:	d17f      	bne.n	800be1c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bd1c:	7ffb      	ldrb	r3, [r7, #31]
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d85c      	bhi.n	800bddc <UART_SetConfig+0x418>
 800bd22:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <UART_SetConfig+0x364>)
 800bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd28:	0800bd4d 	.word	0x0800bd4d
 800bd2c:	0800bd6d 	.word	0x0800bd6d
 800bd30:	0800bd8d 	.word	0x0800bd8d
 800bd34:	0800bddd 	.word	0x0800bddd
 800bd38:	0800bda5 	.word	0x0800bda5
 800bd3c:	0800bddd 	.word	0x0800bddd
 800bd40:	0800bddd 	.word	0x0800bddd
 800bd44:	0800bddd 	.word	0x0800bddd
 800bd48:	0800bdc5 	.word	0x0800bdc5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd4c:	f7fd fba2 	bl	8009494 <HAL_RCC_GetPCLK1Freq>
 800bd50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	005a      	lsls	r2, r3, #1
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	085b      	lsrs	r3, r3, #1
 800bd5c:	441a      	add	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	61bb      	str	r3, [r7, #24]
        break;
 800bd6a:	e03a      	b.n	800bde2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd6c:	f7fd fba6 	bl	80094bc <HAL_RCC_GetPCLK2Freq>
 800bd70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	005a      	lsls	r2, r3, #1
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	441a      	add	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	61bb      	str	r3, [r7, #24]
        break;
 800bd8a:	e02a      	b.n	800bde2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	085a      	lsrs	r2, r3, #1
 800bd92:	4b5f      	ldr	r3, [pc, #380]	; (800bf10 <UART_SetConfig+0x54c>)
 800bd94:	4413      	add	r3, r2
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	6852      	ldr	r2, [r2, #4]
 800bd9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	61bb      	str	r3, [r7, #24]
        break;
 800bda2:	e01e      	b.n	800bde2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bda4:	f7fd fab8 	bl	8009318 <HAL_RCC_GetSysClockFreq>
 800bda8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	005a      	lsls	r2, r3, #1
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	085b      	lsrs	r3, r3, #1
 800bdb4:	441a      	add	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	61bb      	str	r3, [r7, #24]
        break;
 800bdc2:	e00e      	b.n	800bde2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	61bb      	str	r3, [r7, #24]
        break;
 800bdda:	e002      	b.n	800bde2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	75fb      	strb	r3, [r7, #23]
        break;
 800bde0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	2b0f      	cmp	r3, #15
 800bde6:	d916      	bls.n	800be16 <UART_SetConfig+0x452>
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdee:	d212      	bcs.n	800be16 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	f023 030f 	bic.w	r3, r3, #15
 800bdf8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	f003 0307 	and.w	r3, r3, #7
 800be04:	b29a      	uxth	r2, r3
 800be06:	897b      	ldrh	r3, [r7, #10]
 800be08:	4313      	orrs	r3, r2
 800be0a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	897a      	ldrh	r2, [r7, #10]
 800be12:	60da      	str	r2, [r3, #12]
 800be14:	e070      	b.n	800bef8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	75fb      	strb	r3, [r7, #23]
 800be1a:	e06d      	b.n	800bef8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800be1c:	7ffb      	ldrb	r3, [r7, #31]
 800be1e:	2b08      	cmp	r3, #8
 800be20:	d859      	bhi.n	800bed6 <UART_SetConfig+0x512>
 800be22:	a201      	add	r2, pc, #4	; (adr r2, 800be28 <UART_SetConfig+0x464>)
 800be24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be28:	0800be4d 	.word	0x0800be4d
 800be2c:	0800be6b 	.word	0x0800be6b
 800be30:	0800be89 	.word	0x0800be89
 800be34:	0800bed7 	.word	0x0800bed7
 800be38:	0800bea1 	.word	0x0800bea1
 800be3c:	0800bed7 	.word	0x0800bed7
 800be40:	0800bed7 	.word	0x0800bed7
 800be44:	0800bed7 	.word	0x0800bed7
 800be48:	0800bebf 	.word	0x0800bebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be4c:	f7fd fb22 	bl	8009494 <HAL_RCC_GetPCLK1Freq>
 800be50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	085a      	lsrs	r2, r3, #1
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	441a      	add	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	fbb2 f3f3 	udiv	r3, r2, r3
 800be64:	b29b      	uxth	r3, r3
 800be66:	61bb      	str	r3, [r7, #24]
        break;
 800be68:	e038      	b.n	800bedc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be6a:	f7fd fb27 	bl	80094bc <HAL_RCC_GetPCLK2Freq>
 800be6e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	085a      	lsrs	r2, r3, #1
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	441a      	add	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be82:	b29b      	uxth	r3, r3
 800be84:	61bb      	str	r3, [r7, #24]
        break;
 800be86:	e029      	b.n	800bedc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	085a      	lsrs	r2, r3, #1
 800be8e:	4b21      	ldr	r3, [pc, #132]	; (800bf14 <UART_SetConfig+0x550>)
 800be90:	4413      	add	r3, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	6852      	ldr	r2, [r2, #4]
 800be96:	fbb3 f3f2 	udiv	r3, r3, r2
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	61bb      	str	r3, [r7, #24]
        break;
 800be9e:	e01d      	b.n	800bedc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bea0:	f7fd fa3a 	bl	8009318 <HAL_RCC_GetSysClockFreq>
 800bea4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	085a      	lsrs	r2, r3, #1
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	441a      	add	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb8:	b29b      	uxth	r3, r3
 800beba:	61bb      	str	r3, [r7, #24]
        break;
 800bebc:	e00e      	b.n	800bedc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	085b      	lsrs	r3, r3, #1
 800bec4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	61bb      	str	r3, [r7, #24]
        break;
 800bed4:	e002      	b.n	800bedc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	75fb      	strb	r3, [r7, #23]
        break;
 800beda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	2b0f      	cmp	r3, #15
 800bee0:	d908      	bls.n	800bef4 <UART_SetConfig+0x530>
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bee8:	d204      	bcs.n	800bef4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	69ba      	ldr	r2, [r7, #24]
 800bef0:	60da      	str	r2, [r3, #12]
 800bef2:	e001      	b.n	800bef8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3720      	adds	r7, #32
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	01e84800 	.word	0x01e84800
 800bf14:	00f42400 	.word	0x00f42400

0800bf18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf68:	f003 0304 	and.w	r3, r3, #4
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	f003 0308 	and.w	r3, r3, #8
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	f003 0310 	and.w	r3, r3, #16
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00a      	beq.n	800bfca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfce:	f003 0320 	and.w	r3, r3, #32
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00a      	beq.n	800bfec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	430a      	orrs	r2, r1
 800bfea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01a      	beq.n	800c02e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c016:	d10a      	bne.n	800c02e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	605a      	str	r2, [r3, #4]
  }
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af02      	add	r7, sp, #8
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c06a:	f7f9 ff3f 	bl	8005eec <HAL_GetTick>
 800c06e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0308 	and.w	r3, r3, #8
 800c07a:	2b08      	cmp	r3, #8
 800c07c:	d10e      	bne.n	800c09c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c07e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f814 	bl	800c0ba <UART_WaitOnFlagUntilTimeout>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c098:	2303      	movs	r3, #3
 800c09a:	e00a      	b.n	800c0b2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2220      	movs	r2, #32
 800c0a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	603b      	str	r3, [r7, #0]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0ca:	e05d      	b.n	800c188 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d059      	beq.n	800c188 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0d4:	f7f9 ff0a 	bl	8005eec <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d302      	bcc.n	800c0ea <UART_WaitOnFlagUntilTimeout+0x30>
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d11b      	bne.n	800c122 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f022 0201 	bic.w	r2, r2, #1
 800c108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2220      	movs	r2, #32
 800c10e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2220      	movs	r2, #32
 800c114:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c11e:	2303      	movs	r3, #3
 800c120:	e042      	b.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d02b      	beq.n	800c188 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	69db      	ldr	r3, [r3, #28]
 800c136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c13a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c13e:	d123      	bne.n	800c188 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c148:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c158:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 0201 	bic.w	r2, r2, #1
 800c168:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2220      	movs	r2, #32
 800c16e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2220      	movs	r2, #32
 800c174:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2220      	movs	r2, #32
 800c17a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e00f      	b.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	69da      	ldr	r2, [r3, #28]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	4013      	ands	r3, r2
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	429a      	cmp	r2, r3
 800c196:	bf0c      	ite	eq
 800c198:	2301      	moveq	r3, #1
 800c19a:	2300      	movne	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d092      	beq.n	800c0cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d027      	beq.n	800c21a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4b2f      	ldr	r3, [pc, #188]	; (800c290 <FMC_SDRAM_Init+0xe0>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c1e0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c1e6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c1ec:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c1f2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c1f8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c1fe:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c204:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c20a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	4313      	orrs	r3, r2
 800c210:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	e032      	b.n	800c280 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c226:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c230:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c236:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	4b12      	ldr	r3, [pc, #72]	; (800c290 <FMC_SDRAM_Init+0xe0>)
 800c248:	4013      	ands	r3, r2
 800c24a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c254:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c25a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c260:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c266:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c26c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	4313      	orrs	r3, r2
 800c272:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	ffff8000 	.word	0xffff8000

0800c294 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c294:	b480      	push	{r7}
 800c296:	b087      	sub	sp, #28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d02e      	beq.n	800c30c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c2ba:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c2ca:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c2d4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c2de:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c2e8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c2f2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	4313      	orrs	r3, r2
 800c302:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	609a      	str	r2, [r3, #8]
 800c30a:	e039      	b.n	800c380 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	4b1e      	ldr	r3, [pc, #120]	; (800c390 <FMC_SDRAM_Timing_Init+0xfc>)
 800c316:	4013      	ands	r3, r2
 800c318:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	3b01      	subs	r3, #1
 800c320:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	3b01      	subs	r3, #1
 800c328:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c32a:	4313      	orrs	r3, r2
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	4313      	orrs	r3, r2
 800c330:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c33e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c34e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	3b01      	subs	r3, #1
 800c356:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c358:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	3b01      	subs	r3, #1
 800c360:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c362:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	3b01      	subs	r3, #1
 800c36a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c36c:	4313      	orrs	r3, r2
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	4313      	orrs	r3, r2
 800c372:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	ff0f0fff 	.word	0xff0f0fff

0800c394 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c394:	b480      	push	{r7}
 800c396:	b087      	sub	sp, #28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c3ac:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c3b6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	371c      	adds	r7, #28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b083      	sub	sp, #12
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	695a      	ldr	r2, [r3, #20]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	431a      	orrs	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	4603      	mov	r3, r0
 800c404:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c406:	2300      	movs	r3, #0
 800c408:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c40a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c40e:	2b84      	cmp	r3, #132	; 0x84
 800c410:	d005      	beq.n	800c41e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c412:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	3303      	adds	r3, #3
 800c41c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c41e:	68fb      	ldr	r3, [r7, #12]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c430:	f001 f830 	bl	800d494 <vTaskStartScheduler>
  
  return osOK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	bd80      	pop	{r7, pc}

0800c43a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c43a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43c:	b089      	sub	sp, #36	; 0x24
 800c43e:	af04      	add	r7, sp, #16
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d020      	beq.n	800c48e <osThreadCreate+0x54>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d01c      	beq.n	800c48e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685c      	ldr	r4, [r3, #4]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681d      	ldr	r5, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	691e      	ldr	r6, [r3, #16]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff ffc8 	bl	800c3fc <makeFreeRtosPriority>
 800c46c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c476:	9202      	str	r2, [sp, #8]
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	9100      	str	r1, [sp, #0]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	4632      	mov	r2, r6
 800c480:	4629      	mov	r1, r5
 800c482:	4620      	mov	r0, r4
 800c484:	f000 fdae 	bl	800cfe4 <xTaskCreateStatic>
 800c488:	4603      	mov	r3, r0
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	e01c      	b.n	800c4c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685c      	ldr	r4, [r3, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c49a:	b29e      	uxth	r6, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff ffaa 	bl	800c3fc <makeFreeRtosPriority>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	f107 030c 	add.w	r3, r7, #12
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	9200      	str	r2, [sp, #0]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fdf3 	bl	800d0a4 <xTaskCreate>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d001      	beq.n	800c4c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	e000      	b.n	800c4ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <osDelay+0x16>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	e000      	b.n	800c4ea <osDelay+0x18>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 ff9c 	bl	800d428 <vTaskDelay>
  
  return osOK;
 800c4f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d007      	beq.n	800c51a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	4619      	mov	r1, r3
 800c510:	2001      	movs	r0, #1
 800c512:	f000 fa38 	bl	800c986 <xQueueCreateMutexStatic>
 800c516:	4603      	mov	r3, r0
 800c518:	e003      	b.n	800c522 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c51a:	2001      	movs	r0, #1
 800c51c:	f000 fa1b 	bl	800c956 <xQueueCreateMutex>
 800c520:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c52a:	b480      	push	{r7}
 800c52c:	b083      	sub	sp, #12
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f103 0208 	add.w	r2, r3, #8
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f103 0208 	add.w	r2, r3, #8
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f103 0208 	add.w	r2, r3, #8
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c55e:	bf00      	nop
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c56a:	b480      	push	{r7}
 800c56c:	b083      	sub	sp, #12
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	689a      	ldr	r2, [r3, #8]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	601a      	str	r2, [r3, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e2:	d103      	bne.n	800c5ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	60fb      	str	r3, [r7, #12]
 800c5ea:	e00c      	b.n	800c606 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	60fb      	str	r3, [r7, #12]
 800c5f2:	e002      	b.n	800c5fa <vListInsert+0x2e>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	429a      	cmp	r2, r3
 800c604:	d2f6      	bcs.n	800c5f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	601a      	str	r2, [r3, #0]
}
 800c632:	bf00      	nop
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c63e:	b480      	push	{r7}
 800c640:	b085      	sub	sp, #20
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	6892      	ldr	r2, [r2, #8]
 800c654:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6852      	ldr	r2, [r2, #4]
 800c65e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d103      	bne.n	800c672 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689a      	ldr	r2, [r3, #8]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	1e5a      	subs	r2, r3, #1
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
	...

0800c694 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10b      	bne.n	800c6c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	b672      	cpsid	i
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	b662      	cpsie	i
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	e7fe      	b.n	800c6be <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c6c0:	f001 fe6a 	bl	800e398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6cc:	68f9      	ldr	r1, [r7, #12]
 800c6ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6d0:	fb01 f303 	mul.w	r3, r1, r3
 800c6d4:	441a      	add	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6f6:	fb01 f303 	mul.w	r3, r1, r3
 800c6fa:	441a      	add	r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	22ff      	movs	r2, #255	; 0xff
 800c704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	22ff      	movs	r2, #255	; 0xff
 800c70c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d114      	bne.n	800c740 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d01a      	beq.n	800c754 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3310      	adds	r3, #16
 800c722:	4618      	mov	r0, r3
 800c724:	f001 f936 	bl	800d994 <xTaskRemoveFromEventList>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d012      	beq.n	800c754 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c72e:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <xQueueGenericReset+0xd0>)
 800c730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	e009      	b.n	800c754 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3310      	adds	r3, #16
 800c744:	4618      	mov	r0, r3
 800c746:	f7ff fef0 	bl	800c52a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3324      	adds	r3, #36	; 0x24
 800c74e:	4618      	mov	r0, r3
 800c750:	f7ff feeb 	bl	800c52a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c754:	f001 fe52 	bl	800e3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c758:	2301      	movs	r3, #1
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	e000ed04 	.word	0xe000ed04

0800c768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08e      	sub	sp, #56	; 0x38
 800c76c:	af02      	add	r7, sp, #8
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10b      	bne.n	800c794 <xQueueGenericCreateStatic+0x2c>
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	b672      	cpsid	i
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	b662      	cpsie	i
 800c790:	62bb      	str	r3, [r7, #40]	; 0x28
 800c792:	e7fe      	b.n	800c792 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10b      	bne.n	800c7b2 <xQueueGenericCreateStatic+0x4a>
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	b672      	cpsid	i
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	b662      	cpsie	i
 800c7ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c7b0:	e7fe      	b.n	800c7b0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <xQueueGenericCreateStatic+0x56>
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <xQueueGenericCreateStatic+0x5a>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <xQueueGenericCreateStatic+0x5c>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10b      	bne.n	800c7e0 <xQueueGenericCreateStatic+0x78>
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	b672      	cpsid	i
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	b662      	cpsie	i
 800c7dc:	623b      	str	r3, [r7, #32]
 800c7de:	e7fe      	b.n	800c7de <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d102      	bne.n	800c7ec <xQueueGenericCreateStatic+0x84>
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <xQueueGenericCreateStatic+0x88>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e000      	b.n	800c7f2 <xQueueGenericCreateStatic+0x8a>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <xQueueGenericCreateStatic+0xa6>
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	b672      	cpsid	i
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	b662      	cpsie	i
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	e7fe      	b.n	800c80c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c80e:	2348      	movs	r3, #72	; 0x48
 800c810:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b48      	cmp	r3, #72	; 0x48
 800c816:	d00b      	beq.n	800c830 <xQueueGenericCreateStatic+0xc8>
 800c818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81c:	b672      	cpsid	i
 800c81e:	f383 8811 	msr	BASEPRI, r3
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	b662      	cpsie	i
 800c82c:	61bb      	str	r3, [r7, #24]
 800c82e:	e7fe      	b.n	800c82e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c830:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00d      	beq.n	800c858 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c844:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	4613      	mov	r3, r2
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f000 f846 	bl	800c8e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3730      	adds	r7, #48	; 0x30
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c862:	b580      	push	{r7, lr}
 800c864:	b08a      	sub	sp, #40	; 0x28
 800c866:	af02      	add	r7, sp, #8
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	60b9      	str	r1, [r7, #8]
 800c86c:	4613      	mov	r3, r2
 800c86e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10b      	bne.n	800c88e <xQueueGenericCreate+0x2c>
 800c876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87a:	b672      	cpsid	i
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	b662      	cpsie	i
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	e7fe      	b.n	800c88c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d102      	bne.n	800c89a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c894:	2300      	movs	r3, #0
 800c896:	61fb      	str	r3, [r7, #28]
 800c898:	e004      	b.n	800c8a4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	fb02 f303 	mul.w	r3, r2, r3
 800c8a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	3348      	adds	r3, #72	; 0x48
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f001 fe55 	bl	800e558 <pvPortMalloc>
 800c8ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d011      	beq.n	800c8da <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	3348      	adds	r3, #72	; 0x48
 800c8be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8c8:	79fa      	ldrb	r2, [r7, #7]
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f000 f805 	bl	800c8e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8da:	69bb      	ldr	r3, [r7, #24]
	}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d103      	bne.n	800c900 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	e002      	b.n	800c906 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c912:	2101      	movs	r1, #1
 800c914:	69b8      	ldr	r0, [r7, #24]
 800c916:	f7ff febd 	bl	800c694 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00e      	beq.n	800c94e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c942:	2300      	movs	r3, #0
 800c944:	2200      	movs	r2, #0
 800c946:	2100      	movs	r1, #0
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f837 	bl	800c9bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c94e:	bf00      	nop
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c956:	b580      	push	{r7, lr}
 800c958:	b086      	sub	sp, #24
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	4603      	mov	r3, r0
 800c95e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	2300      	movs	r3, #0
 800c966:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	461a      	mov	r2, r3
 800c96c:	6939      	ldr	r1, [r7, #16]
 800c96e:	6978      	ldr	r0, [r7, #20]
 800c970:	f7ff ff77 	bl	800c862 <xQueueGenericCreate>
 800c974:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7ff ffd3 	bl	800c922 <prvInitialiseMutex>

		return xNewQueue;
 800c97c:	68fb      	ldr	r3, [r7, #12]
	}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c986:	b580      	push	{r7, lr}
 800c988:	b088      	sub	sp, #32
 800c98a:	af02      	add	r7, sp, #8
 800c98c:	4603      	mov	r3, r0
 800c98e:	6039      	str	r1, [r7, #0]
 800c990:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c992:	2301      	movs	r3, #1
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	2300      	movs	r3, #0
 800c998:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c99a:	79fb      	ldrb	r3, [r7, #7]
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	6939      	ldr	r1, [r7, #16]
 800c9a4:	6978      	ldr	r0, [r7, #20]
 800c9a6:	f7ff fedf 	bl	800c768 <xQueueGenericCreateStatic>
 800c9aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7ff ffb8 	bl	800c922 <prvInitialiseMutex>

		return xNewQueue;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
	}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08e      	sub	sp, #56	; 0x38
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10b      	bne.n	800c9f0 <xQueueGenericSend+0x34>
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	b672      	cpsid	i
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	b662      	cpsie	i
 800c9ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9ee:	e7fe      	b.n	800c9ee <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d103      	bne.n	800c9fe <xQueueGenericSend+0x42>
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <xQueueGenericSend+0x46>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e000      	b.n	800ca04 <xQueueGenericSend+0x48>
 800ca02:	2300      	movs	r3, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10b      	bne.n	800ca20 <xQueueGenericSend+0x64>
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	b672      	cpsid	i
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	b662      	cpsie	i
 800ca1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca1e:	e7fe      	b.n	800ca1e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d103      	bne.n	800ca2e <xQueueGenericSend+0x72>
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d101      	bne.n	800ca32 <xQueueGenericSend+0x76>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <xQueueGenericSend+0x78>
 800ca32:	2300      	movs	r3, #0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10b      	bne.n	800ca50 <xQueueGenericSend+0x94>
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	b672      	cpsid	i
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	b662      	cpsie	i
 800ca4c:	623b      	str	r3, [r7, #32]
 800ca4e:	e7fe      	b.n	800ca4e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca50:	f001 f960 	bl	800dd14 <xTaskGetSchedulerState>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d102      	bne.n	800ca60 <xQueueGenericSend+0xa4>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <xQueueGenericSend+0xa8>
 800ca60:	2301      	movs	r3, #1
 800ca62:	e000      	b.n	800ca66 <xQueueGenericSend+0xaa>
 800ca64:	2300      	movs	r3, #0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10b      	bne.n	800ca82 <xQueueGenericSend+0xc6>
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	b672      	cpsid	i
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	b662      	cpsie	i
 800ca7e:	61fb      	str	r3, [r7, #28]
 800ca80:	e7fe      	b.n	800ca80 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca82:	f001 fc89 	bl	800e398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d302      	bcc.n	800ca98 <xQueueGenericSend+0xdc>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d129      	bne.n	800caec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca98:	683a      	ldr	r2, [r7, #0]
 800ca9a:	68b9      	ldr	r1, [r7, #8]
 800ca9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca9e:	f000 f9b7 	bl	800ce10 <prvCopyDataToQueue>
 800caa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d010      	beq.n	800cace <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caae:	3324      	adds	r3, #36	; 0x24
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 ff6f 	bl	800d994 <xTaskRemoveFromEventList>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d013      	beq.n	800cae4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cabc:	4b3f      	ldr	r3, [pc, #252]	; (800cbbc <xQueueGenericSend+0x200>)
 800cabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	e00a      	b.n	800cae4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d007      	beq.n	800cae4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cad4:	4b39      	ldr	r3, [pc, #228]	; (800cbbc <xQueueGenericSend+0x200>)
 800cad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cae4:	f001 fc8a 	bl	800e3fc <vPortExitCritical>
				return pdPASS;
 800cae8:	2301      	movs	r3, #1
 800caea:	e063      	b.n	800cbb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d103      	bne.n	800cafa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800caf2:	f001 fc83 	bl	800e3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800caf6:	2300      	movs	r3, #0
 800caf8:	e05c      	b.n	800cbb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d106      	bne.n	800cb0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb00:	f107 0314 	add.w	r3, r7, #20
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 ffa9 	bl	800da5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb0e:	f001 fc75 	bl	800e3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb12:	f000 fd21 	bl	800d558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb16:	f001 fc3f 	bl	800e398 <vPortEnterCritical>
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb20:	b25b      	sxtb	r3, r3
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb26:	d103      	bne.n	800cb30 <xQueueGenericSend+0x174>
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb36:	b25b      	sxtb	r3, r3
 800cb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3c:	d103      	bne.n	800cb46 <xQueueGenericSend+0x18a>
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb46:	f001 fc59 	bl	800e3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb4a:	1d3a      	adds	r2, r7, #4
 800cb4c:	f107 0314 	add.w	r3, r7, #20
 800cb50:	4611      	mov	r1, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 ff98 	bl	800da88 <xTaskCheckForTimeOut>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d124      	bne.n	800cba8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb60:	f000 fa28 	bl	800cfb4 <prvIsQueueFull>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d018      	beq.n	800cb9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	3310      	adds	r3, #16
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	4611      	mov	r1, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 fee8 	bl	800d948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb7a:	f000 f9b3 	bl	800cee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb7e:	f000 fcf9 	bl	800d574 <xTaskResumeAll>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f47f af7c 	bne.w	800ca82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cb8a:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <xQueueGenericSend+0x200>)
 800cb8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	e772      	b.n	800ca82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb9e:	f000 f9a1 	bl	800cee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cba2:	f000 fce7 	bl	800d574 <xTaskResumeAll>
 800cba6:	e76c      	b.n	800ca82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbaa:	f000 f99b 	bl	800cee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbae:	f000 fce1 	bl	800d574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cbb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3738      	adds	r7, #56	; 0x38
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08e      	sub	sp, #56	; 0x38
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10b      	bne.n	800cbf4 <xQueueSemaphoreTake+0x34>
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	b672      	cpsid	i
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	b662      	cpsie	i
 800cbf0:	623b      	str	r3, [r7, #32]
 800cbf2:	e7fe      	b.n	800cbf2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <xQueueSemaphoreTake+0x54>
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	b672      	cpsid	i
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	b662      	cpsie	i
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e7fe      	b.n	800cc12 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc14:	f001 f87e 	bl	800dd14 <xTaskGetSchedulerState>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d102      	bne.n	800cc24 <xQueueSemaphoreTake+0x64>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <xQueueSemaphoreTake+0x68>
 800cc24:	2301      	movs	r3, #1
 800cc26:	e000      	b.n	800cc2a <xQueueSemaphoreTake+0x6a>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10b      	bne.n	800cc46 <xQueueSemaphoreTake+0x86>
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	b672      	cpsid	i
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	b662      	cpsie	i
 800cc42:	61bb      	str	r3, [r7, #24]
 800cc44:	e7fe      	b.n	800cc44 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc46:	f001 fba7 	bl	800e398 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d024      	beq.n	800cca0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	1e5a      	subs	r2, r3, #1
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cc66:	f001 fa17 	bl	800e098 <pvTaskIncrementMutexHeldCount>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00f      	beq.n	800cc98 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	3310      	adds	r3, #16
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fe89 	bl	800d994 <xTaskRemoveFromEventList>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d007      	beq.n	800cc98 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc88:	4b54      	ldr	r3, [pc, #336]	; (800cddc <xQueueSemaphoreTake+0x21c>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc98:	f001 fbb0 	bl	800e3fc <vPortExitCritical>
				return pdPASS;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e098      	b.n	800cdd2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d112      	bne.n	800cccc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00b      	beq.n	800ccc4 <xQueueSemaphoreTake+0x104>
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	b672      	cpsid	i
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	b662      	cpsie	i
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	e7fe      	b.n	800ccc2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ccc4:	f001 fb9a 	bl	800e3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e082      	b.n	800cdd2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccd2:	f107 030c 	add.w	r3, r7, #12
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 fec0 	bl	800da5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cce0:	f001 fb8c 	bl	800e3fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cce4:	f000 fc38 	bl	800d558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cce8:	f001 fb56 	bl	800e398 <vPortEnterCritical>
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccf2:	b25b      	sxtb	r3, r3
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d103      	bne.n	800cd02 <xQueueSemaphoreTake+0x142>
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd08:	b25b      	sxtb	r3, r3
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d103      	bne.n	800cd18 <xQueueSemaphoreTake+0x158>
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd18:	f001 fb70 	bl	800e3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd1c:	463a      	mov	r2, r7
 800cd1e:	f107 030c 	add.w	r3, r7, #12
 800cd22:	4611      	mov	r1, r2
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 feaf 	bl	800da88 <xTaskCheckForTimeOut>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d132      	bne.n	800cd96 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd32:	f000 f929 	bl	800cf88 <prvIsQueueEmpty>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d026      	beq.n	800cd8a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cd44:	f001 fb28 	bl	800e398 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 ffff 	bl	800dd50 <xTaskPriorityInherit>
 800cd52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cd54:	f001 fb52 	bl	800e3fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5a:	3324      	adds	r3, #36	; 0x24
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fdf1 	bl	800d948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd68:	f000 f8bc 	bl	800cee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd6c:	f000 fc02 	bl	800d574 <xTaskResumeAll>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f47f af67 	bne.w	800cc46 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cd78:	4b18      	ldr	r3, [pc, #96]	; (800cddc <xQueueSemaphoreTake+0x21c>)
 800cd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	e75d      	b.n	800cc46 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd8c:	f000 f8aa 	bl	800cee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd90:	f000 fbf0 	bl	800d574 <xTaskResumeAll>
 800cd94:	e757      	b.n	800cc46 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd98:	f000 f8a4 	bl	800cee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd9c:	f000 fbea 	bl	800d574 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cda0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda2:	f000 f8f1 	bl	800cf88 <prvIsQueueEmpty>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f43f af4c 	beq.w	800cc46 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00d      	beq.n	800cdd0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cdb4:	f001 faf0 	bl	800e398 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cdb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdba:	f000 f811 	bl	800cde0 <prvGetDisinheritPriorityAfterTimeout>
 800cdbe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f001 f8ca 	bl	800df60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cdcc:	f001 fb16 	bl	800e3fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cdd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3738      	adds	r7, #56	; 0x38
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	e000ed04 	.word	0xe000ed04

0800cde0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d006      	beq.n	800cdfe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f1c3 0307 	rsb	r3, r3, #7
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	e001      	b.n	800ce02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce02:	68fb      	ldr	r3, [r7, #12]
	}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10d      	bne.n	800ce4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d14d      	bne.n	800ced2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f001 f808 	bl	800de50 <xTaskPriorityDisinherit>
 800ce40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	609a      	str	r2, [r3, #8]
 800ce48:	e043      	b.n	800ced2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d119      	bne.n	800ce84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6858      	ldr	r0, [r3, #4]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce58:	461a      	mov	r2, r3
 800ce5a:	68b9      	ldr	r1, [r7, #8]
 800ce5c:	f001 fd8a 	bl	800e974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce68:	441a      	add	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d32b      	bcc.n	800ced2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	605a      	str	r2, [r3, #4]
 800ce82:	e026      	b.n	800ced2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	68d8      	ldr	r0, [r3, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	f001 fd70 	bl	800e974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	68da      	ldr	r2, [r3, #12]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce9c:	425b      	negs	r3, r3
 800ce9e:	441a      	add	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	68da      	ldr	r2, [r3, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d207      	bcs.n	800cec0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	689a      	ldr	r2, [r3, #8]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb8:	425b      	negs	r3, r3
 800ceba:	441a      	add	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d105      	bne.n	800ced2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	3b01      	subs	r3, #1
 800ced0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	1c5a      	adds	r2, r3, #1
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ceda:	697b      	ldr	r3, [r7, #20]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ceec:	f001 fa54 	bl	800e398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cef8:	e011      	b.n	800cf1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d012      	beq.n	800cf28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3324      	adds	r3, #36	; 0x24
 800cf06:	4618      	mov	r0, r3
 800cf08:	f000 fd44 	bl	800d994 <xTaskRemoveFromEventList>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf12:	f000 fe1d 	bl	800db50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	dce9      	bgt.n	800cefa <prvUnlockQueue+0x16>
 800cf26:	e000      	b.n	800cf2a <prvUnlockQueue+0x46>
					break;
 800cf28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	22ff      	movs	r2, #255	; 0xff
 800cf2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cf32:	f001 fa63 	bl	800e3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cf36:	f001 fa2f 	bl	800e398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf42:	e011      	b.n	800cf68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d012      	beq.n	800cf72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	3310      	adds	r3, #16
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fd1f 	bl	800d994 <xTaskRemoveFromEventList>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf5c:	f000 fdf8 	bl	800db50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dce9      	bgt.n	800cf44 <prvUnlockQueue+0x60>
 800cf70:	e000      	b.n	800cf74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	22ff      	movs	r2, #255	; 0xff
 800cf78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cf7c:	f001 fa3e 	bl	800e3fc <vPortExitCritical>
}
 800cf80:	bf00      	nop
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf90:	f001 fa02 	bl	800e398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	e001      	b.n	800cfa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfa6:	f001 fa29 	bl	800e3fc <vPortExitCritical>

	return xReturn;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfbc:	f001 f9ec 	bl	800e398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d102      	bne.n	800cfd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e001      	b.n	800cfd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfd6:	f001 fa11 	bl	800e3fc <vPortExitCritical>

	return xReturn;
 800cfda:	68fb      	ldr	r3, [r7, #12]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08e      	sub	sp, #56	; 0x38
 800cfe8:	af04      	add	r7, sp, #16
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <xTaskCreateStatic+0x2c>
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	b672      	cpsid	i
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	b662      	cpsie	i
 800d00c:	623b      	str	r3, [r7, #32]
 800d00e:	e7fe      	b.n	800d00e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <xTaskCreateStatic+0x4a>
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	b672      	cpsid	i
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	b662      	cpsie	i
 800d02a:	61fb      	str	r3, [r7, #28]
 800d02c:	e7fe      	b.n	800d02c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d02e:	2358      	movs	r3, #88	; 0x58
 800d030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2b58      	cmp	r3, #88	; 0x58
 800d036:	d00b      	beq.n	800d050 <xTaskCreateStatic+0x6c>
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	b672      	cpsid	i
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	b662      	cpsie	i
 800d04c:	61bb      	str	r3, [r7, #24]
 800d04e:	e7fe      	b.n	800d04e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d050:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01e      	beq.n	800d096 <xTaskCreateStatic+0xb2>
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d01b      	beq.n	800d096 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d066:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	2202      	movs	r2, #2
 800d06c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d070:	2300      	movs	r3, #0
 800d072:	9303      	str	r3, [sp, #12]
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	9302      	str	r3, [sp, #8]
 800d078:	f107 0314 	add.w	r3, r7, #20
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 f850 	bl	800d12e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d08e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d090:	f000 f8e0 	bl	800d254 <prvAddNewTaskToReadyList>
 800d094:	e001      	b.n	800d09a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d09a:	697b      	ldr	r3, [r7, #20]
	}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3728      	adds	r7, #40	; 0x28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08c      	sub	sp, #48	; 0x30
 800d0a8:	af04      	add	r7, sp, #16
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0b4:	88fb      	ldrh	r3, [r7, #6]
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f001 fa4d 	bl	800e558 <pvPortMalloc>
 800d0be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00e      	beq.n	800d0e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0c6:	2058      	movs	r0, #88	; 0x58
 800d0c8:	f001 fa46 	bl	800e558 <pvPortMalloc>
 800d0cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	631a      	str	r2, [r3, #48]	; 0x30
 800d0da:	e005      	b.n	800d0e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0dc:	6978      	ldr	r0, [r7, #20]
 800d0de:	f001 fb07 	bl	800e6f0 <vPortFree>
 800d0e2:	e001      	b.n	800d0e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d017      	beq.n	800d11e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0f6:	88fa      	ldrh	r2, [r7, #6]
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9303      	str	r3, [sp, #12]
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	9302      	str	r3, [sp, #8]
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 f80e 	bl	800d12e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d112:	69f8      	ldr	r0, [r7, #28]
 800d114:	f000 f89e 	bl	800d254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d118:	2301      	movs	r3, #1
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	e002      	b.n	800d124 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295
 800d122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d124:	69bb      	ldr	r3, [r7, #24]
	}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b088      	sub	sp, #32
 800d132:	af00      	add	r7, sp, #0
 800d134:	60f8      	str	r0, [r7, #12]
 800d136:	60b9      	str	r1, [r7, #8]
 800d138:	607a      	str	r2, [r7, #4]
 800d13a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	461a      	mov	r2, r3
 800d146:	21a5      	movs	r1, #165	; 0xa5
 800d148:	f001 fc1f 	bl	800e98a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d156:	440b      	add	r3, r1
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	f023 0307 	bic.w	r3, r3, #7
 800d164:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	f003 0307 	and.w	r3, r3, #7
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00b      	beq.n	800d188 <prvInitialiseNewTask+0x5a>
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	b672      	cpsid	i
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	b662      	cpsie	i
 800d184:	617b      	str	r3, [r7, #20]
 800d186:	e7fe      	b.n	800d186 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01f      	beq.n	800d1ce <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d18e:	2300      	movs	r3, #0
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	e012      	b.n	800d1ba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	4413      	add	r3, r2
 800d19a:	7819      	ldrb	r1, [r3, #0]
 800d19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3334      	adds	r3, #52	; 0x34
 800d1a4:	460a      	mov	r2, r1
 800d1a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	61fb      	str	r3, [r7, #28]
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	2b0f      	cmp	r3, #15
 800d1be:	d9e9      	bls.n	800d194 <prvInitialiseNewTask+0x66>
 800d1c0:	e000      	b.n	800d1c4 <prvInitialiseNewTask+0x96>
			{
				break;
 800d1c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1cc:	e003      	b.n	800d1d6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	2b06      	cmp	r3, #6
 800d1da:	d901      	bls.n	800d1e0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1dc:	2306      	movs	r3, #6
 800d1de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7ff f9b7 	bl	800c56a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	3318      	adds	r3, #24
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff f9b2 	bl	800c56a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d20a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	f1c3 0207 	rsb	r2, r3, #7
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d21a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	2200      	movs	r2, #0
 800d220:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	2200      	movs	r2, #0
 800d226:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	68f9      	ldr	r1, [r7, #12]
 800d234:	69b8      	ldr	r0, [r7, #24]
 800d236:	f000 ffa9 	bl	800e18c <pxPortInitialiseStack>
 800d23a:	4602      	mov	r2, r0
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d24a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d24c:	bf00      	nop
 800d24e:	3720      	adds	r7, #32
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d25c:	f001 f89c 	bl	800e398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d260:	4b2a      	ldr	r3, [pc, #168]	; (800d30c <prvAddNewTaskToReadyList+0xb8>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	4a29      	ldr	r2, [pc, #164]	; (800d30c <prvAddNewTaskToReadyList+0xb8>)
 800d268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d26a:	4b29      	ldr	r3, [pc, #164]	; (800d310 <prvAddNewTaskToReadyList+0xbc>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d109      	bne.n	800d286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d272:	4a27      	ldr	r2, [pc, #156]	; (800d310 <prvAddNewTaskToReadyList+0xbc>)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d278:	4b24      	ldr	r3, [pc, #144]	; (800d30c <prvAddNewTaskToReadyList+0xb8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d110      	bne.n	800d2a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d280:	f000 fc8c 	bl	800db9c <prvInitialiseTaskLists>
 800d284:	e00d      	b.n	800d2a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d286:	4b23      	ldr	r3, [pc, #140]	; (800d314 <prvAddNewTaskToReadyList+0xc0>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d109      	bne.n	800d2a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d28e:	4b20      	ldr	r3, [pc, #128]	; (800d310 <prvAddNewTaskToReadyList+0xbc>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d298:	429a      	cmp	r2, r3
 800d29a:	d802      	bhi.n	800d2a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d29c:	4a1c      	ldr	r2, [pc, #112]	; (800d310 <prvAddNewTaskToReadyList+0xbc>)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d2a2:	4b1d      	ldr	r3, [pc, #116]	; (800d318 <prvAddNewTaskToReadyList+0xc4>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	4a1b      	ldr	r2, [pc, #108]	; (800d318 <prvAddNewTaskToReadyList+0xc4>)
 800d2aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	409a      	lsls	r2, r3
 800d2b4:	4b19      	ldr	r3, [pc, #100]	; (800d31c <prvAddNewTaskToReadyList+0xc8>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	4a18      	ldr	r2, [pc, #96]	; (800d31c <prvAddNewTaskToReadyList+0xc8>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4a15      	ldr	r2, [pc, #84]	; (800d320 <prvAddNewTaskToReadyList+0xcc>)
 800d2cc:	441a      	add	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7ff f955 	bl	800c584 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d2da:	f001 f88f 	bl	800e3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d2de:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <prvAddNewTaskToReadyList+0xc0>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00e      	beq.n	800d304 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d2e6:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <prvAddNewTaskToReadyList+0xbc>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d207      	bcs.n	800d304 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d2f4:	4b0b      	ldr	r3, [pc, #44]	; (800d324 <prvAddNewTaskToReadyList+0xd0>)
 800d2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	20001698 	.word	0x20001698
 800d310:	20001598 	.word	0x20001598
 800d314:	200016a4 	.word	0x200016a4
 800d318:	200016b4 	.word	0x200016b4
 800d31c:	200016a0 	.word	0x200016a0
 800d320:	2000159c 	.word	0x2000159c
 800d324:	e000ed04 	.word	0xe000ed04

0800d328 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08a      	sub	sp, #40	; 0x28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10b      	bne.n	800d354 <vTaskDelayUntil+0x2c>
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	b672      	cpsid	i
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	b662      	cpsie	i
 800d350:	617b      	str	r3, [r7, #20]
 800d352:	e7fe      	b.n	800d352 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10b      	bne.n	800d372 <vTaskDelayUntil+0x4a>
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	b672      	cpsid	i
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	b662      	cpsie	i
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	e7fe      	b.n	800d370 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800d372:	4b2a      	ldr	r3, [pc, #168]	; (800d41c <vTaskDelayUntil+0xf4>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <vTaskDelayUntil+0x6a>
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	b672      	cpsid	i
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	b662      	cpsie	i
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	e7fe      	b.n	800d390 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800d392:	f000 f8e1 	bl	800d558 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d396:	4b22      	ldr	r3, [pc, #136]	; (800d420 <vTaskDelayUntil+0xf8>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6a3a      	ldr	r2, [r7, #32]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d20b      	bcs.n	800d3c8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	69fa      	ldr	r2, [r7, #28]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d211      	bcs.n	800d3de <vTaskDelayUntil+0xb6>
 800d3ba:	69fa      	ldr	r2, [r7, #28]
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d90d      	bls.n	800d3de <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d3c6:	e00a      	b.n	800d3de <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	69fa      	ldr	r2, [r7, #28]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d303      	bcc.n	800d3da <vTaskDelayUntil+0xb2>
 800d3d2:	69fa      	ldr	r2, [r7, #28]
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d901      	bls.n	800d3de <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	69fa      	ldr	r2, [r7, #28]
 800d3e2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d3ea:	69fa      	ldr	r2, [r7, #28]
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 fe64 	bl	800e0c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d3f8:	f000 f8bc 	bl	800d574 <xTaskResumeAll>
 800d3fc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d107      	bne.n	800d414 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d404:	4b07      	ldr	r3, [pc, #28]	; (800d424 <vTaskDelayUntil+0xfc>)
 800d406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d40a:	601a      	str	r2, [r3, #0]
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d414:	bf00      	nop
 800d416:	3728      	adds	r7, #40	; 0x28
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	200016c0 	.word	0x200016c0
 800d420:	2000169c 	.word	0x2000169c
 800d424:	e000ed04 	.word	0xe000ed04

0800d428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d430:	2300      	movs	r3, #0
 800d432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d018      	beq.n	800d46c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d43a:	4b14      	ldr	r3, [pc, #80]	; (800d48c <vTaskDelay+0x64>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00b      	beq.n	800d45a <vTaskDelay+0x32>
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	b672      	cpsid	i
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	b662      	cpsie	i
 800d456:	60bb      	str	r3, [r7, #8]
 800d458:	e7fe      	b.n	800d458 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d45a:	f000 f87d 	bl	800d558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d45e:	2100      	movs	r1, #0
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fe2d 	bl	800e0c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d466:	f000 f885 	bl	800d574 <xTaskResumeAll>
 800d46a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d107      	bne.n	800d482 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d472:	4b07      	ldr	r3, [pc, #28]	; (800d490 <vTaskDelay+0x68>)
 800d474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d482:	bf00      	nop
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	200016c0 	.word	0x200016c0
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	; 0x28
 800d498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4a2:	463a      	mov	r2, r7
 800d4a4:	1d39      	adds	r1, r7, #4
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f3 f89a 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	9202      	str	r2, [sp, #8]
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	460a      	mov	r2, r1
 800d4c2:	491f      	ldr	r1, [pc, #124]	; (800d540 <vTaskStartScheduler+0xac>)
 800d4c4:	481f      	ldr	r0, [pc, #124]	; (800d544 <vTaskStartScheduler+0xb0>)
 800d4c6:	f7ff fd8d 	bl	800cfe4 <xTaskCreateStatic>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	4b1e      	ldr	r3, [pc, #120]	; (800d548 <vTaskStartScheduler+0xb4>)
 800d4ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d4d0:	4b1d      	ldr	r3, [pc, #116]	; (800d548 <vTaskStartScheduler+0xb4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e001      	b.n	800d4e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d117      	bne.n	800d518 <vTaskStartScheduler+0x84>
 800d4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ec:	b672      	cpsid	i
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	b662      	cpsie	i
 800d4fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4fe:	4b13      	ldr	r3, [pc, #76]	; (800d54c <vTaskStartScheduler+0xb8>)
 800d500:	f04f 32ff 	mov.w	r2, #4294967295
 800d504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d506:	4b12      	ldr	r3, [pc, #72]	; (800d550 <vTaskStartScheduler+0xbc>)
 800d508:	2201      	movs	r2, #1
 800d50a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d50c:	4b11      	ldr	r3, [pc, #68]	; (800d554 <vTaskStartScheduler+0xc0>)
 800d50e:	2200      	movs	r2, #0
 800d510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d512:	f000 fec5 	bl	800e2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d516:	e00f      	b.n	800d538 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d10b      	bne.n	800d538 <vTaskStartScheduler+0xa4>
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	b672      	cpsid	i
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	b662      	cpsie	i
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	e7fe      	b.n	800d536 <vTaskStartScheduler+0xa2>
}
 800d538:	bf00      	nop
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	0800f37c 	.word	0x0800f37c
 800d544:	0800db69 	.word	0x0800db69
 800d548:	200016bc 	.word	0x200016bc
 800d54c:	200016b8 	.word	0x200016b8
 800d550:	200016a4 	.word	0x200016a4
 800d554:	2000169c 	.word	0x2000169c

0800d558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d558:	b480      	push	{r7}
 800d55a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d55c:	4b04      	ldr	r3, [pc, #16]	; (800d570 <vTaskSuspendAll+0x18>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	3301      	adds	r3, #1
 800d562:	4a03      	ldr	r2, [pc, #12]	; (800d570 <vTaskSuspendAll+0x18>)
 800d564:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d566:	bf00      	nop
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	200016c0 	.word	0x200016c0

0800d574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d57e:	2300      	movs	r3, #0
 800d580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d582:	4b42      	ldr	r3, [pc, #264]	; (800d68c <xTaskResumeAll+0x118>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10b      	bne.n	800d5a2 <xTaskResumeAll+0x2e>
 800d58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58e:	b672      	cpsid	i
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	b662      	cpsie	i
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	e7fe      	b.n	800d5a0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d5a2:	f000 fef9 	bl	800e398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d5a6:	4b39      	ldr	r3, [pc, #228]	; (800d68c <xTaskResumeAll+0x118>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	4a37      	ldr	r2, [pc, #220]	; (800d68c <xTaskResumeAll+0x118>)
 800d5ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5b0:	4b36      	ldr	r3, [pc, #216]	; (800d68c <xTaskResumeAll+0x118>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d161      	bne.n	800d67c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5b8:	4b35      	ldr	r3, [pc, #212]	; (800d690 <xTaskResumeAll+0x11c>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d05d      	beq.n	800d67c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5c0:	e02e      	b.n	800d620 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5c2:	4b34      	ldr	r3, [pc, #208]	; (800d694 <xTaskResumeAll+0x120>)
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	3318      	adds	r3, #24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff f835 	bl	800c63e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff f830 	bl	800c63e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	409a      	lsls	r2, r3
 800d5e6:	4b2c      	ldr	r3, [pc, #176]	; (800d698 <xTaskResumeAll+0x124>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	4a2a      	ldr	r2, [pc, #168]	; (800d698 <xTaskResumeAll+0x124>)
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4a27      	ldr	r2, [pc, #156]	; (800d69c <xTaskResumeAll+0x128>)
 800d5fe:	441a      	add	r2, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	3304      	adds	r3, #4
 800d604:	4619      	mov	r1, r3
 800d606:	4610      	mov	r0, r2
 800d608:	f7fe ffbc 	bl	800c584 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d610:	4b23      	ldr	r3, [pc, #140]	; (800d6a0 <xTaskResumeAll+0x12c>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d616:	429a      	cmp	r2, r3
 800d618:	d302      	bcc.n	800d620 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d61a:	4b22      	ldr	r3, [pc, #136]	; (800d6a4 <xTaskResumeAll+0x130>)
 800d61c:	2201      	movs	r2, #1
 800d61e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d620:	4b1c      	ldr	r3, [pc, #112]	; (800d694 <xTaskResumeAll+0x120>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1cc      	bne.n	800d5c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d62e:	f000 fb51 	bl	800dcd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d632:	4b1d      	ldr	r3, [pc, #116]	; (800d6a8 <xTaskResumeAll+0x134>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d010      	beq.n	800d660 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d63e:	f000 f847 	bl	800d6d0 <xTaskIncrementTick>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d648:	4b16      	ldr	r3, [pc, #88]	; (800d6a4 <xTaskResumeAll+0x130>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	3b01      	subs	r3, #1
 800d652:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1f1      	bne.n	800d63e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d65a:	4b13      	ldr	r3, [pc, #76]	; (800d6a8 <xTaskResumeAll+0x134>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d660:	4b10      	ldr	r3, [pc, #64]	; (800d6a4 <xTaskResumeAll+0x130>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d009      	beq.n	800d67c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d668:	2301      	movs	r3, #1
 800d66a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d66c:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <xTaskResumeAll+0x138>)
 800d66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d67c:	f000 febe 	bl	800e3fc <vPortExitCritical>

	return xAlreadyYielded;
 800d680:	68bb      	ldr	r3, [r7, #8]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	200016c0 	.word	0x200016c0
 800d690:	20001698 	.word	0x20001698
 800d694:	20001658 	.word	0x20001658
 800d698:	200016a0 	.word	0x200016a0
 800d69c:	2000159c 	.word	0x2000159c
 800d6a0:	20001598 	.word	0x20001598
 800d6a4:	200016ac 	.word	0x200016ac
 800d6a8:	200016a8 	.word	0x200016a8
 800d6ac:	e000ed04 	.word	0xe000ed04

0800d6b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6b6:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <xTaskGetTickCount+0x1c>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d6bc:	687b      	ldr	r3, [r7, #4]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	2000169c 	.word	0x2000169c

0800d6d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6da:	4b4f      	ldr	r3, [pc, #316]	; (800d818 <xTaskIncrementTick+0x148>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f040 8089 	bne.w	800d7f6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d6e4:	4b4d      	ldr	r3, [pc, #308]	; (800d81c <xTaskIncrementTick+0x14c>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d6ec:	4a4b      	ldr	r2, [pc, #300]	; (800d81c <xTaskIncrementTick+0x14c>)
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d121      	bne.n	800d73c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d6f8:	4b49      	ldr	r3, [pc, #292]	; (800d820 <xTaskIncrementTick+0x150>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00b      	beq.n	800d71a <xTaskIncrementTick+0x4a>
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	b672      	cpsid	i
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	b662      	cpsie	i
 800d716:	603b      	str	r3, [r7, #0]
 800d718:	e7fe      	b.n	800d718 <xTaskIncrementTick+0x48>
 800d71a:	4b41      	ldr	r3, [pc, #260]	; (800d820 <xTaskIncrementTick+0x150>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	60fb      	str	r3, [r7, #12]
 800d720:	4b40      	ldr	r3, [pc, #256]	; (800d824 <xTaskIncrementTick+0x154>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a3e      	ldr	r2, [pc, #248]	; (800d820 <xTaskIncrementTick+0x150>)
 800d726:	6013      	str	r3, [r2, #0]
 800d728:	4a3e      	ldr	r2, [pc, #248]	; (800d824 <xTaskIncrementTick+0x154>)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	4b3e      	ldr	r3, [pc, #248]	; (800d828 <xTaskIncrementTick+0x158>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3301      	adds	r3, #1
 800d734:	4a3c      	ldr	r2, [pc, #240]	; (800d828 <xTaskIncrementTick+0x158>)
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	f000 facc 	bl	800dcd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d73c:	4b3b      	ldr	r3, [pc, #236]	; (800d82c <xTaskIncrementTick+0x15c>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	693a      	ldr	r2, [r7, #16]
 800d742:	429a      	cmp	r2, r3
 800d744:	d348      	bcc.n	800d7d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d746:	4b36      	ldr	r3, [pc, #216]	; (800d820 <xTaskIncrementTick+0x150>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d104      	bne.n	800d75a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d750:	4b36      	ldr	r3, [pc, #216]	; (800d82c <xTaskIncrementTick+0x15c>)
 800d752:	f04f 32ff 	mov.w	r2, #4294967295
 800d756:	601a      	str	r2, [r3, #0]
					break;
 800d758:	e03e      	b.n	800d7d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d75a:	4b31      	ldr	r3, [pc, #196]	; (800d820 <xTaskIncrementTick+0x150>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d203      	bcs.n	800d77a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d772:	4a2e      	ldr	r2, [pc, #184]	; (800d82c <xTaskIncrementTick+0x15c>)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d778:	e02e      	b.n	800d7d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	3304      	adds	r3, #4
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe ff5d 	bl	800c63e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d004      	beq.n	800d796 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	3318      	adds	r3, #24
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe ff54 	bl	800c63e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d79a:	2201      	movs	r2, #1
 800d79c:	409a      	lsls	r2, r3
 800d79e:	4b24      	ldr	r3, [pc, #144]	; (800d830 <xTaskIncrementTick+0x160>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	4a22      	ldr	r2, [pc, #136]	; (800d830 <xTaskIncrementTick+0x160>)
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4a1f      	ldr	r2, [pc, #124]	; (800d834 <xTaskIncrementTick+0x164>)
 800d7b6:	441a      	add	r2, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	4619      	mov	r1, r3
 800d7be:	4610      	mov	r0, r2
 800d7c0:	f7fe fee0 	bl	800c584 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c8:	4b1b      	ldr	r3, [pc, #108]	; (800d838 <xTaskIncrementTick+0x168>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d3b9      	bcc.n	800d746 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7d6:	e7b6      	b.n	800d746 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7d8:	4b17      	ldr	r3, [pc, #92]	; (800d838 <xTaskIncrementTick+0x168>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7de:	4915      	ldr	r1, [pc, #84]	; (800d834 <xTaskIncrementTick+0x164>)
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	440b      	add	r3, r1
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d907      	bls.n	800d800 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	e004      	b.n	800d800 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d7f6:	4b11      	ldr	r3, [pc, #68]	; (800d83c <xTaskIncrementTick+0x16c>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	4a0f      	ldr	r2, [pc, #60]	; (800d83c <xTaskIncrementTick+0x16c>)
 800d7fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d800:	4b0f      	ldr	r3, [pc, #60]	; (800d840 <xTaskIncrementTick+0x170>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d808:	2301      	movs	r3, #1
 800d80a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d80c:	697b      	ldr	r3, [r7, #20]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	200016c0 	.word	0x200016c0
 800d81c:	2000169c 	.word	0x2000169c
 800d820:	20001650 	.word	0x20001650
 800d824:	20001654 	.word	0x20001654
 800d828:	200016b0 	.word	0x200016b0
 800d82c:	200016b8 	.word	0x200016b8
 800d830:	200016a0 	.word	0x200016a0
 800d834:	2000159c 	.word	0x2000159c
 800d838:	20001598 	.word	0x20001598
 800d83c:	200016a8 	.word	0x200016a8
 800d840:	200016ac 	.word	0x200016ac

0800d844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d84a:	4b3a      	ldr	r3, [pc, #232]	; (800d934 <vTaskSwitchContext+0xf0>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d852:	4b39      	ldr	r3, [pc, #228]	; (800d938 <vTaskSwitchContext+0xf4>)
 800d854:	2201      	movs	r2, #1
 800d856:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d858:	e067      	b.n	800d92a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d85a:	4b37      	ldr	r3, [pc, #220]	; (800d938 <vTaskSwitchContext+0xf4>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d860:	4b36      	ldr	r3, [pc, #216]	; (800d93c <vTaskSwitchContext+0xf8>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d86c:	61bb      	str	r3, [r7, #24]
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	69ba      	ldr	r2, [r7, #24]
 800d874:	429a      	cmp	r2, r3
 800d876:	d111      	bne.n	800d89c <vTaskSwitchContext+0x58>
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	3304      	adds	r3, #4
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	429a      	cmp	r2, r3
 800d882:	d10b      	bne.n	800d89c <vTaskSwitchContext+0x58>
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	3308      	adds	r3, #8
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	69ba      	ldr	r2, [r7, #24]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d105      	bne.n	800d89c <vTaskSwitchContext+0x58>
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	330c      	adds	r3, #12
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	69ba      	ldr	r2, [r7, #24]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d008      	beq.n	800d8ae <vTaskSwitchContext+0x6a>
 800d89c:	4b27      	ldr	r3, [pc, #156]	; (800d93c <vTaskSwitchContext+0xf8>)
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	4b26      	ldr	r3, [pc, #152]	; (800d93c <vTaskSwitchContext+0xf8>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3334      	adds	r3, #52	; 0x34
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	f7f2 fe88 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ae:	4b24      	ldr	r3, [pc, #144]	; (800d940 <vTaskSwitchContext+0xfc>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	fab3 f383 	clz	r3, r3
 800d8ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	f1c3 031f 	rsb	r3, r3, #31
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	491f      	ldr	r1, [pc, #124]	; (800d944 <vTaskSwitchContext+0x100>)
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	440b      	add	r3, r1
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10b      	bne.n	800d8f0 <vTaskSwitchContext+0xac>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	b672      	cpsid	i
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	b662      	cpsie	i
 800d8ec:	607b      	str	r3, [r7, #4]
 800d8ee:	e7fe      	b.n	800d8ee <vTaskSwitchContext+0xaa>
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4a12      	ldr	r2, [pc, #72]	; (800d944 <vTaskSwitchContext+0x100>)
 800d8fc:	4413      	add	r3, r2
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	685a      	ldr	r2, [r3, #4]
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	605a      	str	r2, [r3, #4]
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	3308      	adds	r3, #8
 800d912:	429a      	cmp	r2, r3
 800d914:	d104      	bne.n	800d920 <vTaskSwitchContext+0xdc>
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	605a      	str	r2, [r3, #4]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	4a05      	ldr	r2, [pc, #20]	; (800d93c <vTaskSwitchContext+0xf8>)
 800d928:	6013      	str	r3, [r2, #0]
}
 800d92a:	bf00      	nop
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	200016c0 	.word	0x200016c0
 800d938:	200016ac 	.word	0x200016ac
 800d93c:	20001598 	.word	0x20001598
 800d940:	200016a0 	.word	0x200016a0
 800d944:	2000159c 	.word	0x2000159c

0800d948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10b      	bne.n	800d970 <vTaskPlaceOnEventList+0x28>
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	b672      	cpsid	i
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	b662      	cpsie	i
 800d96c:	60fb      	str	r3, [r7, #12]
 800d96e:	e7fe      	b.n	800d96e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d970:	4b07      	ldr	r3, [pc, #28]	; (800d990 <vTaskPlaceOnEventList+0x48>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3318      	adds	r3, #24
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7fe fe27 	bl	800c5cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d97e:	2101      	movs	r1, #1
 800d980:	6838      	ldr	r0, [r7, #0]
 800d982:	f000 fb9d 	bl	800e0c0 <prvAddCurrentTaskToDelayedList>
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	20001598 	.word	0x20001598

0800d994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10b      	bne.n	800d9c2 <xTaskRemoveFromEventList+0x2e>
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	b672      	cpsid	i
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	b662      	cpsie	i
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	e7fe      	b.n	800d9c0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3318      	adds	r3, #24
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe fe39 	bl	800c63e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9cc:	4b1d      	ldr	r3, [pc, #116]	; (800da44 <xTaskRemoveFromEventList+0xb0>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d11c      	bne.n	800da0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fe30 	bl	800c63e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	409a      	lsls	r2, r3
 800d9e6:	4b18      	ldr	r3, [pc, #96]	; (800da48 <xTaskRemoveFromEventList+0xb4>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	4a16      	ldr	r2, [pc, #88]	; (800da48 <xTaskRemoveFromEventList+0xb4>)
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4a13      	ldr	r2, [pc, #76]	; (800da4c <xTaskRemoveFromEventList+0xb8>)
 800d9fe:	441a      	add	r2, r3
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	3304      	adds	r3, #4
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f7fe fdbc 	bl	800c584 <vListInsertEnd>
 800da0c:	e005      	b.n	800da1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	3318      	adds	r3, #24
 800da12:	4619      	mov	r1, r3
 800da14:	480e      	ldr	r0, [pc, #56]	; (800da50 <xTaskRemoveFromEventList+0xbc>)
 800da16:	f7fe fdb5 	bl	800c584 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1e:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <xTaskRemoveFromEventList+0xc0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da24:	429a      	cmp	r2, r3
 800da26:	d905      	bls.n	800da34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da28:	2301      	movs	r3, #1
 800da2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da2c:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <xTaskRemoveFromEventList+0xc4>)
 800da2e:	2201      	movs	r2, #1
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	e001      	b.n	800da38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800da34:	2300      	movs	r3, #0
 800da36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da38:	697b      	ldr	r3, [r7, #20]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	200016c0 	.word	0x200016c0
 800da48:	200016a0 	.word	0x200016a0
 800da4c:	2000159c 	.word	0x2000159c
 800da50:	20001658 	.word	0x20001658
 800da54:	20001598 	.word	0x20001598
 800da58:	200016ac 	.word	0x200016ac

0800da5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <vTaskInternalSetTimeOutState+0x24>)
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da6c:	4b05      	ldr	r3, [pc, #20]	; (800da84 <vTaskInternalSetTimeOutState+0x28>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	605a      	str	r2, [r3, #4]
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	200016b0 	.word	0x200016b0
 800da84:	2000169c 	.word	0x2000169c

0800da88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <xTaskCheckForTimeOut+0x28>
 800da98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9c:	b672      	cpsid	i
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	b662      	cpsie	i
 800daac:	613b      	str	r3, [r7, #16]
 800daae:	e7fe      	b.n	800daae <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10b      	bne.n	800dace <xTaskCheckForTimeOut+0x46>
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	b672      	cpsid	i
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	b662      	cpsie	i
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	e7fe      	b.n	800dacc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800dace:	f000 fc63 	bl	800e398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dad2:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <xTaskCheckForTimeOut+0xc0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	69ba      	ldr	r2, [r7, #24]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daea:	d102      	bne.n	800daf2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800daec:	2300      	movs	r3, #0
 800daee:	61fb      	str	r3, [r7, #28]
 800daf0:	e023      	b.n	800db3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	4b15      	ldr	r3, [pc, #84]	; (800db4c <xTaskCheckForTimeOut+0xc4>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d007      	beq.n	800db0e <xTaskCheckForTimeOut+0x86>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	429a      	cmp	r2, r3
 800db06:	d302      	bcc.n	800db0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db08:	2301      	movs	r3, #1
 800db0a:	61fb      	str	r3, [r7, #28]
 800db0c:	e015      	b.n	800db3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	429a      	cmp	r2, r3
 800db16:	d20b      	bcs.n	800db30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff ff99 	bl	800da5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db2a:	2300      	movs	r3, #0
 800db2c:	61fb      	str	r3, [r7, #28]
 800db2e:	e004      	b.n	800db3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	2200      	movs	r2, #0
 800db34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800db36:	2301      	movs	r3, #1
 800db38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800db3a:	f000 fc5f 	bl	800e3fc <vPortExitCritical>

	return xReturn;
 800db3e:	69fb      	ldr	r3, [r7, #28]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	2000169c 	.word	0x2000169c
 800db4c:	200016b0 	.word	0x200016b0

0800db50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db50:	b480      	push	{r7}
 800db52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800db54:	4b03      	ldr	r3, [pc, #12]	; (800db64 <vTaskMissedYield+0x14>)
 800db56:	2201      	movs	r2, #1
 800db58:	601a      	str	r2, [r3, #0]
}
 800db5a:	bf00      	nop
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	200016ac 	.word	0x200016ac

0800db68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800db70:	f000 f854 	bl	800dc1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db74:	4b07      	ldr	r3, [pc, #28]	; (800db94 <prvIdleTask+0x2c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d907      	bls.n	800db8c <prvIdleTask+0x24>
			{
				taskYIELD();
 800db7c:	4b06      	ldr	r3, [pc, #24]	; (800db98 <prvIdleTask+0x30>)
 800db7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800db8c:	f7f2 fd10 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800db90:	e7ee      	b.n	800db70 <prvIdleTask+0x8>
 800db92:	bf00      	nop
 800db94:	2000159c 	.word	0x2000159c
 800db98:	e000ed04 	.word	0xe000ed04

0800db9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dba2:	2300      	movs	r3, #0
 800dba4:	607b      	str	r3, [r7, #4]
 800dba6:	e00c      	b.n	800dbc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	4613      	mov	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	4a12      	ldr	r2, [pc, #72]	; (800dbfc <prvInitialiseTaskLists+0x60>)
 800dbb4:	4413      	add	r3, r2
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe fcb7 	bl	800c52a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	607b      	str	r3, [r7, #4]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2b06      	cmp	r3, #6
 800dbc6:	d9ef      	bls.n	800dba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dbc8:	480d      	ldr	r0, [pc, #52]	; (800dc00 <prvInitialiseTaskLists+0x64>)
 800dbca:	f7fe fcae 	bl	800c52a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dbce:	480d      	ldr	r0, [pc, #52]	; (800dc04 <prvInitialiseTaskLists+0x68>)
 800dbd0:	f7fe fcab 	bl	800c52a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dbd4:	480c      	ldr	r0, [pc, #48]	; (800dc08 <prvInitialiseTaskLists+0x6c>)
 800dbd6:	f7fe fca8 	bl	800c52a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dbda:	480c      	ldr	r0, [pc, #48]	; (800dc0c <prvInitialiseTaskLists+0x70>)
 800dbdc:	f7fe fca5 	bl	800c52a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dbe0:	480b      	ldr	r0, [pc, #44]	; (800dc10 <prvInitialiseTaskLists+0x74>)
 800dbe2:	f7fe fca2 	bl	800c52a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dbe6:	4b0b      	ldr	r3, [pc, #44]	; (800dc14 <prvInitialiseTaskLists+0x78>)
 800dbe8:	4a05      	ldr	r2, [pc, #20]	; (800dc00 <prvInitialiseTaskLists+0x64>)
 800dbea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dbec:	4b0a      	ldr	r3, [pc, #40]	; (800dc18 <prvInitialiseTaskLists+0x7c>)
 800dbee:	4a05      	ldr	r2, [pc, #20]	; (800dc04 <prvInitialiseTaskLists+0x68>)
 800dbf0:	601a      	str	r2, [r3, #0]
}
 800dbf2:	bf00      	nop
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	2000159c 	.word	0x2000159c
 800dc00:	20001628 	.word	0x20001628
 800dc04:	2000163c 	.word	0x2000163c
 800dc08:	20001658 	.word	0x20001658
 800dc0c:	2000166c 	.word	0x2000166c
 800dc10:	20001684 	.word	0x20001684
 800dc14:	20001650 	.word	0x20001650
 800dc18:	20001654 	.word	0x20001654

0800dc1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc22:	e019      	b.n	800dc58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dc24:	f000 fbb8 	bl	800e398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc28:	4b0f      	ldr	r3, [pc, #60]	; (800dc68 <prvCheckTasksWaitingTermination+0x4c>)
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3304      	adds	r3, #4
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fe fd02 	bl	800c63e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dc3a:	4b0c      	ldr	r3, [pc, #48]	; (800dc6c <prvCheckTasksWaitingTermination+0x50>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <prvCheckTasksWaitingTermination+0x50>)
 800dc42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dc44:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <prvCheckTasksWaitingTermination+0x54>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4a09      	ldr	r2, [pc, #36]	; (800dc70 <prvCheckTasksWaitingTermination+0x54>)
 800dc4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dc4e:	f000 fbd5 	bl	800e3fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f80e 	bl	800dc74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc58:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <prvCheckTasksWaitingTermination+0x54>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1e1      	bne.n	800dc24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	2000166c 	.word	0x2000166c
 800dc6c:	20001698 	.word	0x20001698
 800dc70:	20001680 	.word	0x20001680

0800dc74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d108      	bne.n	800dc98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fd30 	bl	800e6f0 <vPortFree>
				vPortFree( pxTCB );
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fd2d 	bl	800e6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc96:	e019      	b.n	800dccc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d103      	bne.n	800dcaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fd24 	bl	800e6f0 <vPortFree>
	}
 800dca8:	e010      	b.n	800dccc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d00b      	beq.n	800dccc <prvDeleteTCB+0x58>
 800dcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb8:	b672      	cpsid	i
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	b662      	cpsie	i
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	e7fe      	b.n	800dcca <prvDeleteTCB+0x56>
	}
 800dccc:	bf00      	nop
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcda:	4b0c      	ldr	r3, [pc, #48]	; (800dd0c <prvResetNextTaskUnblockTime+0x38>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d104      	bne.n	800dcee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dce4:	4b0a      	ldr	r3, [pc, #40]	; (800dd10 <prvResetNextTaskUnblockTime+0x3c>)
 800dce6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dcec:	e008      	b.n	800dd00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcee:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <prvResetNextTaskUnblockTime+0x38>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	4a04      	ldr	r2, [pc, #16]	; (800dd10 <prvResetNextTaskUnblockTime+0x3c>)
 800dcfe:	6013      	str	r3, [r2, #0]
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	20001650 	.word	0x20001650
 800dd10:	200016b8 	.word	0x200016b8

0800dd14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <xTaskGetSchedulerState+0x34>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d102      	bne.n	800dd28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd22:	2301      	movs	r3, #1
 800dd24:	607b      	str	r3, [r7, #4]
 800dd26:	e008      	b.n	800dd3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd28:	4b08      	ldr	r3, [pc, #32]	; (800dd4c <xTaskGetSchedulerState+0x38>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dd30:	2302      	movs	r3, #2
 800dd32:	607b      	str	r3, [r7, #4]
 800dd34:	e001      	b.n	800dd3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd36:	2300      	movs	r3, #0
 800dd38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dd3a:	687b      	ldr	r3, [r7, #4]
	}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	200016a4 	.word	0x200016a4
 800dd4c:	200016c0 	.word	0x200016c0

0800dd50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d069      	beq.n	800de3a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6a:	4b36      	ldr	r3, [pc, #216]	; (800de44 <xTaskPriorityInherit+0xf4>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d259      	bcs.n	800de28 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	db06      	blt.n	800dd8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd7c:	4b31      	ldr	r3, [pc, #196]	; (800de44 <xTaskPriorityInherit+0xf4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd82:	f1c3 0207 	rsb	r2, r3, #7
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	6959      	ldr	r1, [r3, #20]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd92:	4613      	mov	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4a2b      	ldr	r2, [pc, #172]	; (800de48 <xTaskPriorityInherit+0xf8>)
 800dd9c:	4413      	add	r3, r2
 800dd9e:	4299      	cmp	r1, r3
 800dda0:	d13a      	bne.n	800de18 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	3304      	adds	r3, #4
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe fc49 	bl	800c63e <uxListRemove>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d115      	bne.n	800ddde <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb6:	4924      	ldr	r1, [pc, #144]	; (800de48 <xTaskPriorityInherit+0xf8>)
 800ddb8:	4613      	mov	r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	440b      	add	r3, r1
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10a      	bne.n	800ddde <xTaskPriorityInherit+0x8e>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddcc:	2201      	movs	r2, #1
 800ddce:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd2:	43da      	mvns	r2, r3
 800ddd4:	4b1d      	ldr	r3, [pc, #116]	; (800de4c <xTaskPriorityInherit+0xfc>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4013      	ands	r3, r2
 800ddda:	4a1c      	ldr	r2, [pc, #112]	; (800de4c <xTaskPriorityInherit+0xfc>)
 800dddc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ddde:	4b19      	ldr	r3, [pc, #100]	; (800de44 <xTaskPriorityInherit+0xf4>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	2201      	movs	r2, #1
 800ddee:	409a      	lsls	r2, r3
 800ddf0:	4b16      	ldr	r3, [pc, #88]	; (800de4c <xTaskPriorityInherit+0xfc>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	4a15      	ldr	r2, [pc, #84]	; (800de4c <xTaskPriorityInherit+0xfc>)
 800ddf8:	6013      	str	r3, [r2, #0]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4a10      	ldr	r2, [pc, #64]	; (800de48 <xTaskPriorityInherit+0xf8>)
 800de08:	441a      	add	r2, r3
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4619      	mov	r1, r3
 800de10:	4610      	mov	r0, r2
 800de12:	f7fe fbb7 	bl	800c584 <vListInsertEnd>
 800de16:	e004      	b.n	800de22 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de18:	4b0a      	ldr	r3, [pc, #40]	; (800de44 <xTaskPriorityInherit+0xf4>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800de22:	2301      	movs	r3, #1
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e008      	b.n	800de3a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de2c:	4b05      	ldr	r3, [pc, #20]	; (800de44 <xTaskPriorityInherit+0xf4>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de32:	429a      	cmp	r2, r3
 800de34:	d201      	bcs.n	800de3a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800de36:	2301      	movs	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de3a:	68fb      	ldr	r3, [r7, #12]
	}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	20001598 	.word	0x20001598
 800de48:	2000159c 	.word	0x2000159c
 800de4c:	200016a0 	.word	0x200016a0

0800de50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800de50:	b580      	push	{r7, lr}
 800de52:	b086      	sub	sp, #24
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800de5c:	2300      	movs	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d070      	beq.n	800df48 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800de66:	4b3b      	ldr	r3, [pc, #236]	; (800df54 <xTaskPriorityDisinherit+0x104>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d00b      	beq.n	800de88 <xTaskPriorityDisinherit+0x38>
 800de70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de74:	b672      	cpsid	i
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	b662      	cpsie	i
 800de84:	60fb      	str	r3, [r7, #12]
 800de86:	e7fe      	b.n	800de86 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10b      	bne.n	800dea8 <xTaskPriorityDisinherit+0x58>
 800de90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de94:	b672      	cpsid	i
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	b662      	cpsie	i
 800dea4:	60bb      	str	r3, [r7, #8]
 800dea6:	e7fe      	b.n	800dea6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deac:	1e5a      	subs	r2, r3, #1
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deba:	429a      	cmp	r2, r3
 800debc:	d044      	beq.n	800df48 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d140      	bne.n	800df48 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	3304      	adds	r3, #4
 800deca:	4618      	mov	r0, r3
 800decc:	f7fe fbb7 	bl	800c63e <uxListRemove>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d115      	bne.n	800df02 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deda:	491f      	ldr	r1, [pc, #124]	; (800df58 <xTaskPriorityDisinherit+0x108>)
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	440b      	add	r3, r1
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <xTaskPriorityDisinherit+0xb2>
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def0:	2201      	movs	r2, #1
 800def2:	fa02 f303 	lsl.w	r3, r2, r3
 800def6:	43da      	mvns	r2, r3
 800def8:	4b18      	ldr	r3, [pc, #96]	; (800df5c <xTaskPriorityDisinherit+0x10c>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4013      	ands	r3, r2
 800defe:	4a17      	ldr	r2, [pc, #92]	; (800df5c <xTaskPriorityDisinherit+0x10c>)
 800df00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0e:	f1c3 0207 	rsb	r2, r3, #7
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1a:	2201      	movs	r2, #1
 800df1c:	409a      	lsls	r2, r3
 800df1e:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <xTaskPriorityDisinherit+0x10c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4313      	orrs	r3, r2
 800df24:	4a0d      	ldr	r2, [pc, #52]	; (800df5c <xTaskPriorityDisinherit+0x10c>)
 800df26:	6013      	str	r3, [r2, #0]
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4a08      	ldr	r2, [pc, #32]	; (800df58 <xTaskPriorityDisinherit+0x108>)
 800df36:	441a      	add	r2, r3
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	3304      	adds	r3, #4
 800df3c:	4619      	mov	r1, r3
 800df3e:	4610      	mov	r0, r2
 800df40:	f7fe fb20 	bl	800c584 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df44:	2301      	movs	r3, #1
 800df46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df48:	697b      	ldr	r3, [r7, #20]
	}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	20001598 	.word	0x20001598
 800df58:	2000159c 	.word	0x2000159c
 800df5c:	200016a0 	.word	0x200016a0

0800df60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	f000 8085 	beq.w	800e084 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10b      	bne.n	800df9a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df86:	b672      	cpsid	i
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	b662      	cpsie	i
 800df96:	60fb      	str	r3, [r7, #12]
 800df98:	e7fe      	b.n	800df98 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d902      	bls.n	800dfaa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	61fb      	str	r3, [r7, #28]
 800dfa8:	e002      	b.n	800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb4:	69fa      	ldr	r2, [r7, #28]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d064      	beq.n	800e084 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d15f      	bne.n	800e084 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dfc4:	4b31      	ldr	r3, [pc, #196]	; (800e08c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	69ba      	ldr	r2, [r7, #24]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d10b      	bne.n	800dfe6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	b672      	cpsid	i
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	b662      	cpsie	i
 800dfe2:	60bb      	str	r3, [r7, #8]
 800dfe4:	e7fe      	b.n	800dfe4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	69fa      	ldr	r2, [r7, #28]
 800dff0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	db04      	blt.n	800e004 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	f1c3 0207 	rsb	r2, r3, #7
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	6959      	ldr	r1, [r3, #20]
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	4613      	mov	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4a1f      	ldr	r2, [pc, #124]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e014:	4413      	add	r3, r2
 800e016:	4299      	cmp	r1, r3
 800e018:	d134      	bne.n	800e084 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fb0d 	bl	800c63e <uxListRemove>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d115      	bne.n	800e056 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02e:	4918      	ldr	r1, [pc, #96]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	440b      	add	r3, r1
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e044:	2201      	movs	r2, #1
 800e046:	fa02 f303 	lsl.w	r3, r2, r3
 800e04a:	43da      	mvns	r2, r3
 800e04c:	4b11      	ldr	r3, [pc, #68]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4013      	ands	r3, r2
 800e052:	4a10      	ldr	r2, [pc, #64]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e054:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05a:	2201      	movs	r2, #1
 800e05c:	409a      	lsls	r2, r3
 800e05e:	4b0d      	ldr	r3, [pc, #52]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4313      	orrs	r3, r2
 800e064:	4a0b      	ldr	r2, [pc, #44]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06c:	4613      	mov	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	4413      	add	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4a06      	ldr	r2, [pc, #24]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e076:	441a      	add	r2, r3
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	3304      	adds	r3, #4
 800e07c:	4619      	mov	r1, r3
 800e07e:	4610      	mov	r0, r2
 800e080:	f7fe fa80 	bl	800c584 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e084:	bf00      	nop
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20001598 	.word	0x20001598
 800e090:	2000159c 	.word	0x2000159c
 800e094:	200016a0 	.word	0x200016a0

0800e098 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e098:	b480      	push	{r7}
 800e09a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e09c:	4b07      	ldr	r3, [pc, #28]	; (800e0bc <pvTaskIncrementMutexHeldCount+0x24>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d004      	beq.n	800e0ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0a4:	4b05      	ldr	r3, [pc, #20]	; (800e0bc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0aa:	3201      	adds	r2, #1
 800e0ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e0ae:	4b03      	ldr	r3, [pc, #12]	; (800e0bc <pvTaskIncrementMutexHeldCount+0x24>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
	}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	20001598 	.word	0x20001598

0800e0c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e0ca:	4b29      	ldr	r3, [pc, #164]	; (800e170 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0d0:	4b28      	ldr	r3, [pc, #160]	; (800e174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fe fab1 	bl	800c63e <uxListRemove>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10b      	bne.n	800e0fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e0e2:	4b24      	ldr	r3, [pc, #144]	; (800e174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ee:	43da      	mvns	r2, r3
 800e0f0:	4b21      	ldr	r3, [pc, #132]	; (800e178 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	4a20      	ldr	r2, [pc, #128]	; (800e178 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e0f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e100:	d10a      	bne.n	800e118 <prvAddCurrentTaskToDelayedList+0x58>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d007      	beq.n	800e118 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e108:	4b1a      	ldr	r3, [pc, #104]	; (800e174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3304      	adds	r3, #4
 800e10e:	4619      	mov	r1, r3
 800e110:	481a      	ldr	r0, [pc, #104]	; (800e17c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e112:	f7fe fa37 	bl	800c584 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e116:	e026      	b.n	800e166 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e120:	4b14      	ldr	r3, [pc, #80]	; (800e174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d209      	bcs.n	800e144 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e130:	4b13      	ldr	r3, [pc, #76]	; (800e180 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3304      	adds	r3, #4
 800e13a:	4619      	mov	r1, r3
 800e13c:	4610      	mov	r0, r2
 800e13e:	f7fe fa45 	bl	800c5cc <vListInsert>
}
 800e142:	e010      	b.n	800e166 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e144:	4b0f      	ldr	r3, [pc, #60]	; (800e184 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3304      	adds	r3, #4
 800e14e:	4619      	mov	r1, r3
 800e150:	4610      	mov	r0, r2
 800e152:	f7fe fa3b 	bl	800c5cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e156:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d202      	bcs.n	800e166 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e160:	4a09      	ldr	r2, [pc, #36]	; (800e188 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	6013      	str	r3, [r2, #0]
}
 800e166:	bf00      	nop
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	2000169c 	.word	0x2000169c
 800e174:	20001598 	.word	0x20001598
 800e178:	200016a0 	.word	0x200016a0
 800e17c:	20001684 	.word	0x20001684
 800e180:	20001654 	.word	0x20001654
 800e184:	20001650 	.word	0x20001650
 800e188:	200016b8 	.word	0x200016b8

0800e18c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3b04      	subs	r3, #4
 800e19c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3b04      	subs	r3, #4
 800e1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	f023 0201 	bic.w	r2, r3, #1
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	3b04      	subs	r3, #4
 800e1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e1bc:	4a0c      	ldr	r2, [pc, #48]	; (800e1f0 <pxPortInitialiseStack+0x64>)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3b14      	subs	r3, #20
 800e1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	3b04      	subs	r3, #4
 800e1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f06f 0202 	mvn.w	r2, #2
 800e1da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	3b20      	subs	r3, #32
 800e1e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3714      	adds	r7, #20
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	0800e1f5 	.word	0x0800e1f5

0800e1f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b085      	sub	sp, #20
 800e1f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1fe:	4b13      	ldr	r3, [pc, #76]	; (800e24c <prvTaskExitError+0x58>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e206:	d00b      	beq.n	800e220 <prvTaskExitError+0x2c>
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	b672      	cpsid	i
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	b662      	cpsie	i
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	e7fe      	b.n	800e21e <prvTaskExitError+0x2a>
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	b672      	cpsid	i
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	b662      	cpsie	i
 800e234:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e236:	bf00      	nop
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d0fc      	beq.n	800e238 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e23e:	bf00      	nop
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	2000103c 	.word	0x2000103c

0800e250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e250:	4b07      	ldr	r3, [pc, #28]	; (800e270 <pxCurrentTCBConst2>)
 800e252:	6819      	ldr	r1, [r3, #0]
 800e254:	6808      	ldr	r0, [r1, #0]
 800e256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25a:	f380 8809 	msr	PSP, r0
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	f04f 0000 	mov.w	r0, #0
 800e266:	f380 8811 	msr	BASEPRI, r0
 800e26a:	4770      	bx	lr
 800e26c:	f3af 8000 	nop.w

0800e270 <pxCurrentTCBConst2>:
 800e270:	20001598 	.word	0x20001598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e274:	bf00      	nop
 800e276:	bf00      	nop

0800e278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e278:	4808      	ldr	r0, [pc, #32]	; (800e29c <prvPortStartFirstTask+0x24>)
 800e27a:	6800      	ldr	r0, [r0, #0]
 800e27c:	6800      	ldr	r0, [r0, #0]
 800e27e:	f380 8808 	msr	MSP, r0
 800e282:	f04f 0000 	mov.w	r0, #0
 800e286:	f380 8814 	msr	CONTROL, r0
 800e28a:	b662      	cpsie	i
 800e28c:	b661      	cpsie	f
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	df00      	svc	0
 800e298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e29a:	bf00      	nop
 800e29c:	e000ed08 	.word	0xe000ed08

0800e2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2a6:	4b36      	ldr	r3, [pc, #216]	; (800e380 <xPortStartScheduler+0xe0>)
 800e2a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	22ff      	movs	r2, #255	; 0xff
 800e2b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2c0:	78fb      	ldrb	r3, [r7, #3]
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	4b2e      	ldr	r3, [pc, #184]	; (800e384 <xPortStartScheduler+0xe4>)
 800e2cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2ce:	4b2e      	ldr	r3, [pc, #184]	; (800e388 <xPortStartScheduler+0xe8>)
 800e2d0:	2207      	movs	r2, #7
 800e2d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2d4:	e009      	b.n	800e2ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e2d6:	4b2c      	ldr	r3, [pc, #176]	; (800e388 <xPortStartScheduler+0xe8>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	4a2a      	ldr	r2, [pc, #168]	; (800e388 <xPortStartScheduler+0xe8>)
 800e2de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2f2:	2b80      	cmp	r3, #128	; 0x80
 800e2f4:	d0ef      	beq.n	800e2d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2f6:	4b24      	ldr	r3, [pc, #144]	; (800e388 <xPortStartScheduler+0xe8>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f1c3 0307 	rsb	r3, r3, #7
 800e2fe:	2b04      	cmp	r3, #4
 800e300:	d00b      	beq.n	800e31a <xPortStartScheduler+0x7a>
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	60bb      	str	r3, [r7, #8]
 800e318:	e7fe      	b.n	800e318 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e31a:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <xPortStartScheduler+0xe8>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	021b      	lsls	r3, r3, #8
 800e320:	4a19      	ldr	r2, [pc, #100]	; (800e388 <xPortStartScheduler+0xe8>)
 800e322:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e324:	4b18      	ldr	r3, [pc, #96]	; (800e388 <xPortStartScheduler+0xe8>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e32c:	4a16      	ldr	r2, [pc, #88]	; (800e388 <xPortStartScheduler+0xe8>)
 800e32e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	b2da      	uxtb	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e338:	4b14      	ldr	r3, [pc, #80]	; (800e38c <xPortStartScheduler+0xec>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a13      	ldr	r2, [pc, #76]	; (800e38c <xPortStartScheduler+0xec>)
 800e33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e342:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e344:	4b11      	ldr	r3, [pc, #68]	; (800e38c <xPortStartScheduler+0xec>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a10      	ldr	r2, [pc, #64]	; (800e38c <xPortStartScheduler+0xec>)
 800e34a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e34e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e350:	f000 f8d4 	bl	800e4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e354:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <xPortStartScheduler+0xf0>)
 800e356:	2200      	movs	r2, #0
 800e358:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e35a:	f000 f8f3 	bl	800e544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e35e:	4b0d      	ldr	r3, [pc, #52]	; (800e394 <xPortStartScheduler+0xf4>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a0c      	ldr	r2, [pc, #48]	; (800e394 <xPortStartScheduler+0xf4>)
 800e364:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e368:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e36a:	f7ff ff85 	bl	800e278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e36e:	f7ff fa69 	bl	800d844 <vTaskSwitchContext>
	prvTaskExitError();
 800e372:	f7ff ff3f 	bl	800e1f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	e000e400 	.word	0xe000e400
 800e384:	200016c4 	.word	0x200016c4
 800e388:	200016c8 	.word	0x200016c8
 800e38c:	e000ed20 	.word	0xe000ed20
 800e390:	2000103c 	.word	0x2000103c
 800e394:	e000ef34 	.word	0xe000ef34

0800e398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a2:	b672      	cpsid	i
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	b662      	cpsie	i
 800e3b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3b4:	4b0f      	ldr	r3, [pc, #60]	; (800e3f4 <vPortEnterCritical+0x5c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	4a0e      	ldr	r2, [pc, #56]	; (800e3f4 <vPortEnterCritical+0x5c>)
 800e3bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3be:	4b0d      	ldr	r3, [pc, #52]	; (800e3f4 <vPortEnterCritical+0x5c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d110      	bne.n	800e3e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <vPortEnterCritical+0x60>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00b      	beq.n	800e3e8 <vPortEnterCritical+0x50>
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	b672      	cpsid	i
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	b662      	cpsie	i
 800e3e4:	603b      	str	r3, [r7, #0]
 800e3e6:	e7fe      	b.n	800e3e6 <vPortEnterCritical+0x4e>
	}
}
 800e3e8:	bf00      	nop
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	2000103c 	.word	0x2000103c
 800e3f8:	e000ed04 	.word	0xe000ed04

0800e3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e402:	4b12      	ldr	r3, [pc, #72]	; (800e44c <vPortExitCritical+0x50>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10b      	bne.n	800e422 <vPortExitCritical+0x26>
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	b672      	cpsid	i
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	b662      	cpsie	i
 800e41e:	607b      	str	r3, [r7, #4]
 800e420:	e7fe      	b.n	800e420 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e422:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <vPortExitCritical+0x50>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	3b01      	subs	r3, #1
 800e428:	4a08      	ldr	r2, [pc, #32]	; (800e44c <vPortExitCritical+0x50>)
 800e42a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e42c:	4b07      	ldr	r3, [pc, #28]	; (800e44c <vPortExitCritical+0x50>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <vPortExitCritical+0x42>
 800e434:	2300      	movs	r3, #0
 800e436:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e43e:	bf00      	nop
 800e440:	370c      	adds	r7, #12
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	2000103c 	.word	0x2000103c

0800e450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e450:	f3ef 8009 	mrs	r0, PSP
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <pxCurrentTCBConst>)
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	f01e 0f10 	tst.w	lr, #16
 800e460:	bf08      	it	eq
 800e462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46a:	6010      	str	r0, [r2, #0]
 800e46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e474:	b672      	cpsid	i
 800e476:	f380 8811 	msr	BASEPRI, r0
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	b662      	cpsie	i
 800e484:	f7ff f9de 	bl	800d844 <vTaskSwitchContext>
 800e488:	f04f 0000 	mov.w	r0, #0
 800e48c:	f380 8811 	msr	BASEPRI, r0
 800e490:	bc09      	pop	{r0, r3}
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6808      	ldr	r0, [r1, #0]
 800e496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f01e 0f10 	tst.w	lr, #16
 800e49e:	bf08      	it	eq
 800e4a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4a4:	f380 8809 	msr	PSP, r0
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <pxCurrentTCBConst>:
 800e4b0:	20001598 	.word	0x20001598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c2:	b672      	cpsid	i
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	b662      	cpsie	i
 800e4d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e4d4:	f7ff f8fc 	bl	800d6d0 <xTaskIncrementTick>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4de:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <SysTick_Handler+0x40>)
 800e4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4e4:	601a      	str	r2, [r3, #0]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <vPortSetupTimerInterrupt+0x34>)
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e506:	4b0b      	ldr	r3, [pc, #44]	; (800e534 <vPortSetupTimerInterrupt+0x38>)
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e50c:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <vPortSetupTimerInterrupt+0x3c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a0a      	ldr	r2, [pc, #40]	; (800e53c <vPortSetupTimerInterrupt+0x40>)
 800e512:	fba2 2303 	umull	r2, r3, r2, r3
 800e516:	099b      	lsrs	r3, r3, #6
 800e518:	4a09      	ldr	r2, [pc, #36]	; (800e540 <vPortSetupTimerInterrupt+0x44>)
 800e51a:	3b01      	subs	r3, #1
 800e51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e51e:	4b04      	ldr	r3, [pc, #16]	; (800e530 <vPortSetupTimerInterrupt+0x34>)
 800e520:	2207      	movs	r2, #7
 800e522:	601a      	str	r2, [r3, #0]
}
 800e524:	bf00      	nop
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	e000e010 	.word	0xe000e010
 800e534:	e000e018 	.word	0xe000e018
 800e538:	20001030 	.word	0x20001030
 800e53c:	10624dd3 	.word	0x10624dd3
 800e540:	e000e014 	.word	0xe000e014

0800e544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e554 <vPortEnableVFP+0x10>
 800e548:	6801      	ldr	r1, [r0, #0]
 800e54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e54e:	6001      	str	r1, [r0, #0]
 800e550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e552:	bf00      	nop
 800e554:	e000ed88 	.word	0xe000ed88

0800e558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08a      	sub	sp, #40	; 0x28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e560:	2300      	movs	r3, #0
 800e562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e564:	f7fe fff8 	bl	800d558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e568:	4b5c      	ldr	r3, [pc, #368]	; (800e6dc <pvPortMalloc+0x184>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e570:	f000 f91a 	bl	800e7a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e574:	4b5a      	ldr	r3, [pc, #360]	; (800e6e0 <pvPortMalloc+0x188>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4013      	ands	r3, r2
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f040 8090 	bne.w	800e6a2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d01e      	beq.n	800e5c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e588:	2208      	movs	r2, #8
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4413      	add	r3, r2
 800e58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	2b00      	cmp	r3, #0
 800e598:	d015      	beq.n	800e5c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f023 0307 	bic.w	r3, r3, #7
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f003 0307 	and.w	r3, r3, #7
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00b      	beq.n	800e5c6 <pvPortMalloc+0x6e>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	b672      	cpsid	i
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	b662      	cpsie	i
 800e5c2:	617b      	str	r3, [r7, #20]
 800e5c4:	e7fe      	b.n	800e5c4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d06a      	beq.n	800e6a2 <pvPortMalloc+0x14a>
 800e5cc:	4b45      	ldr	r3, [pc, #276]	; (800e6e4 <pvPortMalloc+0x18c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d865      	bhi.n	800e6a2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5d6:	4b44      	ldr	r3, [pc, #272]	; (800e6e8 <pvPortMalloc+0x190>)
 800e5d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5da:	4b43      	ldr	r3, [pc, #268]	; (800e6e8 <pvPortMalloc+0x190>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5e0:	e004      	b.n	800e5ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d903      	bls.n	800e5fe <pvPortMalloc+0xa6>
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d1f1      	bne.n	800e5e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5fe:	4b37      	ldr	r3, [pc, #220]	; (800e6dc <pvPortMalloc+0x184>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e604:	429a      	cmp	r2, r3
 800e606:	d04c      	beq.n	800e6a2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e608:	6a3b      	ldr	r3, [r7, #32]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2208      	movs	r2, #8
 800e60e:	4413      	add	r3, r2
 800e610:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	685a      	ldr	r2, [r3, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	1ad2      	subs	r2, r2, r3
 800e622:	2308      	movs	r3, #8
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	429a      	cmp	r2, r3
 800e628:	d920      	bls.n	800e66c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4413      	add	r3, r2
 800e630:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	f003 0307 	and.w	r3, r3, #7
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00b      	beq.n	800e654 <pvPortMalloc+0xfc>
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	b672      	cpsid	i
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	b662      	cpsie	i
 800e650:	613b      	str	r3, [r7, #16]
 800e652:	e7fe      	b.n	800e652 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	685a      	ldr	r2, [r3, #4]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	1ad2      	subs	r2, r2, r3
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e666:	69b8      	ldr	r0, [r7, #24]
 800e668:	f000 f900 	bl	800e86c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e66c:	4b1d      	ldr	r3, [pc, #116]	; (800e6e4 <pvPortMalloc+0x18c>)
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	4a1b      	ldr	r2, [pc, #108]	; (800e6e4 <pvPortMalloc+0x18c>)
 800e678:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e67a:	4b1a      	ldr	r3, [pc, #104]	; (800e6e4 <pvPortMalloc+0x18c>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	4b1b      	ldr	r3, [pc, #108]	; (800e6ec <pvPortMalloc+0x194>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d203      	bcs.n	800e68e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e686:	4b17      	ldr	r3, [pc, #92]	; (800e6e4 <pvPortMalloc+0x18c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a18      	ldr	r2, [pc, #96]	; (800e6ec <pvPortMalloc+0x194>)
 800e68c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	4b13      	ldr	r3, [pc, #76]	; (800e6e0 <pvPortMalloc+0x188>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	431a      	orrs	r2, r3
 800e698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	2200      	movs	r2, #0
 800e6a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6a2:	f7fe ff67 	bl	800d574 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d101      	bne.n	800e6b0 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e6ac:	f7f1 ff92 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	f003 0307 	and.w	r3, r3, #7
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00b      	beq.n	800e6d2 <pvPortMalloc+0x17a>
 800e6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6be:	b672      	cpsid	i
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	b662      	cpsie	i
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	e7fe      	b.n	800e6d0 <pvPortMalloc+0x178>
	return pvReturn;
 800e6d2:	69fb      	ldr	r3, [r7, #28]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3728      	adds	r7, #40	; 0x28
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	200096d4 	.word	0x200096d4
 800e6e0:	200096e0 	.word	0x200096e0
 800e6e4:	200096d8 	.word	0x200096d8
 800e6e8:	200096cc 	.word	0x200096cc
 800e6ec:	200096dc 	.word	0x200096dc

0800e6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d04a      	beq.n	800e798 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e702:	2308      	movs	r3, #8
 800e704:	425b      	negs	r3, r3
 800e706:	697a      	ldr	r2, [r7, #20]
 800e708:	4413      	add	r3, r2
 800e70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	685a      	ldr	r2, [r3, #4]
 800e714:	4b22      	ldr	r3, [pc, #136]	; (800e7a0 <vPortFree+0xb0>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4013      	ands	r3, r2
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d10b      	bne.n	800e736 <vPortFree+0x46>
 800e71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e722:	b672      	cpsid	i
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	b662      	cpsie	i
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e7fe      	b.n	800e734 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00b      	beq.n	800e756 <vPortFree+0x66>
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	b672      	cpsid	i
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	b662      	cpsie	i
 800e752:	60bb      	str	r3, [r7, #8]
 800e754:	e7fe      	b.n	800e754 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	685a      	ldr	r2, [r3, #4]
 800e75a:	4b11      	ldr	r3, [pc, #68]	; (800e7a0 <vPortFree+0xb0>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4013      	ands	r3, r2
 800e760:	2b00      	cmp	r3, #0
 800e762:	d019      	beq.n	800e798 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d115      	bne.n	800e798 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	4b0b      	ldr	r3, [pc, #44]	; (800e7a0 <vPortFree+0xb0>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	43db      	mvns	r3, r3
 800e776:	401a      	ands	r2, r3
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e77c:	f7fe feec 	bl	800d558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	4b07      	ldr	r3, [pc, #28]	; (800e7a4 <vPortFree+0xb4>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4413      	add	r3, r2
 800e78a:	4a06      	ldr	r2, [pc, #24]	; (800e7a4 <vPortFree+0xb4>)
 800e78c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e78e:	6938      	ldr	r0, [r7, #16]
 800e790:	f000 f86c 	bl	800e86c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e794:	f7fe feee 	bl	800d574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e798:	bf00      	nop
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	200096e0 	.word	0x200096e0
 800e7a4:	200096d8 	.word	0x200096d8

0800e7a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7b4:	4b27      	ldr	r3, [pc, #156]	; (800e854 <prvHeapInit+0xac>)
 800e7b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f003 0307 	and.w	r3, r3, #7
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00c      	beq.n	800e7dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3307      	adds	r3, #7
 800e7c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f023 0307 	bic.w	r3, r3, #7
 800e7ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	4a1f      	ldr	r2, [pc, #124]	; (800e854 <prvHeapInit+0xac>)
 800e7d8:	4413      	add	r3, r2
 800e7da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7e0:	4a1d      	ldr	r2, [pc, #116]	; (800e858 <prvHeapInit+0xb0>)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e7e6:	4b1c      	ldr	r3, [pc, #112]	; (800e858 <prvHeapInit+0xb0>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7f4:	2208      	movs	r2, #8
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	1a9b      	subs	r3, r3, r2
 800e7fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f023 0307 	bic.w	r3, r3, #7
 800e802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4a15      	ldr	r2, [pc, #84]	; (800e85c <prvHeapInit+0xb4>)
 800e808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e80a:	4b14      	ldr	r3, [pc, #80]	; (800e85c <prvHeapInit+0xb4>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2200      	movs	r2, #0
 800e810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e812:	4b12      	ldr	r3, [pc, #72]	; (800e85c <prvHeapInit+0xb4>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2200      	movs	r2, #0
 800e818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	1ad2      	subs	r2, r2, r3
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e828:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <prvHeapInit+0xb4>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	4a0a      	ldr	r2, [pc, #40]	; (800e860 <prvHeapInit+0xb8>)
 800e836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	4a09      	ldr	r2, [pc, #36]	; (800e864 <prvHeapInit+0xbc>)
 800e83e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e840:	4b09      	ldr	r3, [pc, #36]	; (800e868 <prvHeapInit+0xc0>)
 800e842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e846:	601a      	str	r2, [r3, #0]
}
 800e848:	bf00      	nop
 800e84a:	3714      	adds	r7, #20
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	200016cc 	.word	0x200016cc
 800e858:	200096cc 	.word	0x200096cc
 800e85c:	200096d4 	.word	0x200096d4
 800e860:	200096dc 	.word	0x200096dc
 800e864:	200096d8 	.word	0x200096d8
 800e868:	200096e0 	.word	0x200096e0

0800e86c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e874:	4b28      	ldr	r3, [pc, #160]	; (800e918 <prvInsertBlockIntoFreeList+0xac>)
 800e876:	60fb      	str	r3, [r7, #12]
 800e878:	e002      	b.n	800e880 <prvInsertBlockIntoFreeList+0x14>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	429a      	cmp	r2, r3
 800e888:	d8f7      	bhi.n	800e87a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	4413      	add	r3, r2
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d108      	bne.n	800e8ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	441a      	add	r2, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	441a      	add	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d118      	bne.n	800e8f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	4b15      	ldr	r3, [pc, #84]	; (800e91c <prvInsertBlockIntoFreeList+0xb0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d00d      	beq.n	800e8ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	441a      	add	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	e008      	b.n	800e8fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e8ea:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <prvInsertBlockIntoFreeList+0xb0>)
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	e003      	b.n	800e8fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d002      	beq.n	800e90a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e90a:	bf00      	nop
 800e90c:	3714      	adds	r7, #20
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	200096cc 	.word	0x200096cc
 800e91c:	200096d4 	.word	0x200096d4

0800e920 <__errno>:
 800e920:	4b01      	ldr	r3, [pc, #4]	; (800e928 <__errno+0x8>)
 800e922:	6818      	ldr	r0, [r3, #0]
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	20001040 	.word	0x20001040

0800e92c <__libc_init_array>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4e0d      	ldr	r6, [pc, #52]	; (800e964 <__libc_init_array+0x38>)
 800e930:	4c0d      	ldr	r4, [pc, #52]	; (800e968 <__libc_init_array+0x3c>)
 800e932:	1ba4      	subs	r4, r4, r6
 800e934:	10a4      	asrs	r4, r4, #2
 800e936:	2500      	movs	r5, #0
 800e938:	42a5      	cmp	r5, r4
 800e93a:	d109      	bne.n	800e950 <__libc_init_array+0x24>
 800e93c:	4e0b      	ldr	r6, [pc, #44]	; (800e96c <__libc_init_array+0x40>)
 800e93e:	4c0c      	ldr	r4, [pc, #48]	; (800e970 <__libc_init_array+0x44>)
 800e940:	f000 fc28 	bl	800f194 <_init>
 800e944:	1ba4      	subs	r4, r4, r6
 800e946:	10a4      	asrs	r4, r4, #2
 800e948:	2500      	movs	r5, #0
 800e94a:	42a5      	cmp	r5, r4
 800e94c:	d105      	bne.n	800e95a <__libc_init_array+0x2e>
 800e94e:	bd70      	pop	{r4, r5, r6, pc}
 800e950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e954:	4798      	blx	r3
 800e956:	3501      	adds	r5, #1
 800e958:	e7ee      	b.n	800e938 <__libc_init_array+0xc>
 800e95a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e95e:	4798      	blx	r3
 800e960:	3501      	adds	r5, #1
 800e962:	e7f2      	b.n	800e94a <__libc_init_array+0x1e>
 800e964:	0801130c 	.word	0x0801130c
 800e968:	0801130c 	.word	0x0801130c
 800e96c:	0801130c 	.word	0x0801130c
 800e970:	08011310 	.word	0x08011310

0800e974 <memcpy>:
 800e974:	b510      	push	{r4, lr}
 800e976:	1e43      	subs	r3, r0, #1
 800e978:	440a      	add	r2, r1
 800e97a:	4291      	cmp	r1, r2
 800e97c:	d100      	bne.n	800e980 <memcpy+0xc>
 800e97e:	bd10      	pop	{r4, pc}
 800e980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e984:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e988:	e7f7      	b.n	800e97a <memcpy+0x6>

0800e98a <memset>:
 800e98a:	4402      	add	r2, r0
 800e98c:	4603      	mov	r3, r0
 800e98e:	4293      	cmp	r3, r2
 800e990:	d100      	bne.n	800e994 <memset+0xa>
 800e992:	4770      	bx	lr
 800e994:	f803 1b01 	strb.w	r1, [r3], #1
 800e998:	e7f9      	b.n	800e98e <memset+0x4>
	...

0800e99c <siprintf>:
 800e99c:	b40e      	push	{r1, r2, r3}
 800e99e:	b500      	push	{lr}
 800e9a0:	b09c      	sub	sp, #112	; 0x70
 800e9a2:	ab1d      	add	r3, sp, #116	; 0x74
 800e9a4:	9002      	str	r0, [sp, #8]
 800e9a6:	9006      	str	r0, [sp, #24]
 800e9a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9ac:	4809      	ldr	r0, [pc, #36]	; (800e9d4 <siprintf+0x38>)
 800e9ae:	9107      	str	r1, [sp, #28]
 800e9b0:	9104      	str	r1, [sp, #16]
 800e9b2:	4909      	ldr	r1, [pc, #36]	; (800e9d8 <siprintf+0x3c>)
 800e9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b8:	9105      	str	r1, [sp, #20]
 800e9ba:	6800      	ldr	r0, [r0, #0]
 800e9bc:	9301      	str	r3, [sp, #4]
 800e9be:	a902      	add	r1, sp, #8
 800e9c0:	f000 f866 	bl	800ea90 <_svfiprintf_r>
 800e9c4:	9b02      	ldr	r3, [sp, #8]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	701a      	strb	r2, [r3, #0]
 800e9ca:	b01c      	add	sp, #112	; 0x70
 800e9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9d0:	b003      	add	sp, #12
 800e9d2:	4770      	bx	lr
 800e9d4:	20001040 	.word	0x20001040
 800e9d8:	ffff0208 	.word	0xffff0208

0800e9dc <__ssputs_r>:
 800e9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e0:	688e      	ldr	r6, [r1, #8]
 800e9e2:	429e      	cmp	r6, r3
 800e9e4:	4682      	mov	sl, r0
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	4690      	mov	r8, r2
 800e9ea:	4699      	mov	r9, r3
 800e9ec:	d837      	bhi.n	800ea5e <__ssputs_r+0x82>
 800e9ee:	898a      	ldrh	r2, [r1, #12]
 800e9f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9f4:	d031      	beq.n	800ea5a <__ssputs_r+0x7e>
 800e9f6:	6825      	ldr	r5, [r4, #0]
 800e9f8:	6909      	ldr	r1, [r1, #16]
 800e9fa:	1a6f      	subs	r7, r5, r1
 800e9fc:	6965      	ldr	r5, [r4, #20]
 800e9fe:	2302      	movs	r3, #2
 800ea00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea04:	fb95 f5f3 	sdiv	r5, r5, r3
 800ea08:	f109 0301 	add.w	r3, r9, #1
 800ea0c:	443b      	add	r3, r7
 800ea0e:	429d      	cmp	r5, r3
 800ea10:	bf38      	it	cc
 800ea12:	461d      	movcc	r5, r3
 800ea14:	0553      	lsls	r3, r2, #21
 800ea16:	d530      	bpl.n	800ea7a <__ssputs_r+0x9e>
 800ea18:	4629      	mov	r1, r5
 800ea1a:	f000 fb21 	bl	800f060 <_malloc_r>
 800ea1e:	4606      	mov	r6, r0
 800ea20:	b950      	cbnz	r0, 800ea38 <__ssputs_r+0x5c>
 800ea22:	230c      	movs	r3, #12
 800ea24:	f8ca 3000 	str.w	r3, [sl]
 800ea28:	89a3      	ldrh	r3, [r4, #12]
 800ea2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2e:	81a3      	strh	r3, [r4, #12]
 800ea30:	f04f 30ff 	mov.w	r0, #4294967295
 800ea34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea38:	463a      	mov	r2, r7
 800ea3a:	6921      	ldr	r1, [r4, #16]
 800ea3c:	f7ff ff9a 	bl	800e974 <memcpy>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	6126      	str	r6, [r4, #16]
 800ea4e:	6165      	str	r5, [r4, #20]
 800ea50:	443e      	add	r6, r7
 800ea52:	1bed      	subs	r5, r5, r7
 800ea54:	6026      	str	r6, [r4, #0]
 800ea56:	60a5      	str	r5, [r4, #8]
 800ea58:	464e      	mov	r6, r9
 800ea5a:	454e      	cmp	r6, r9
 800ea5c:	d900      	bls.n	800ea60 <__ssputs_r+0x84>
 800ea5e:	464e      	mov	r6, r9
 800ea60:	4632      	mov	r2, r6
 800ea62:	4641      	mov	r1, r8
 800ea64:	6820      	ldr	r0, [r4, #0]
 800ea66:	f000 fa93 	bl	800ef90 <memmove>
 800ea6a:	68a3      	ldr	r3, [r4, #8]
 800ea6c:	1b9b      	subs	r3, r3, r6
 800ea6e:	60a3      	str	r3, [r4, #8]
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	441e      	add	r6, r3
 800ea74:	6026      	str	r6, [r4, #0]
 800ea76:	2000      	movs	r0, #0
 800ea78:	e7dc      	b.n	800ea34 <__ssputs_r+0x58>
 800ea7a:	462a      	mov	r2, r5
 800ea7c:	f000 fb4a 	bl	800f114 <_realloc_r>
 800ea80:	4606      	mov	r6, r0
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1e2      	bne.n	800ea4c <__ssputs_r+0x70>
 800ea86:	6921      	ldr	r1, [r4, #16]
 800ea88:	4650      	mov	r0, sl
 800ea8a:	f000 fa9b 	bl	800efc4 <_free_r>
 800ea8e:	e7c8      	b.n	800ea22 <__ssputs_r+0x46>

0800ea90 <_svfiprintf_r>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	461d      	mov	r5, r3
 800ea96:	898b      	ldrh	r3, [r1, #12]
 800ea98:	061f      	lsls	r7, r3, #24
 800ea9a:	b09d      	sub	sp, #116	; 0x74
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	4616      	mov	r6, r2
 800eaa2:	d50f      	bpl.n	800eac4 <_svfiprintf_r+0x34>
 800eaa4:	690b      	ldr	r3, [r1, #16]
 800eaa6:	b96b      	cbnz	r3, 800eac4 <_svfiprintf_r+0x34>
 800eaa8:	2140      	movs	r1, #64	; 0x40
 800eaaa:	f000 fad9 	bl	800f060 <_malloc_r>
 800eaae:	6020      	str	r0, [r4, #0]
 800eab0:	6120      	str	r0, [r4, #16]
 800eab2:	b928      	cbnz	r0, 800eac0 <_svfiprintf_r+0x30>
 800eab4:	230c      	movs	r3, #12
 800eab6:	f8c8 3000 	str.w	r3, [r8]
 800eaba:	f04f 30ff 	mov.w	r0, #4294967295
 800eabe:	e0c8      	b.n	800ec52 <_svfiprintf_r+0x1c2>
 800eac0:	2340      	movs	r3, #64	; 0x40
 800eac2:	6163      	str	r3, [r4, #20]
 800eac4:	2300      	movs	r3, #0
 800eac6:	9309      	str	r3, [sp, #36]	; 0x24
 800eac8:	2320      	movs	r3, #32
 800eaca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eace:	2330      	movs	r3, #48	; 0x30
 800ead0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ead4:	9503      	str	r5, [sp, #12]
 800ead6:	f04f 0b01 	mov.w	fp, #1
 800eada:	4637      	mov	r7, r6
 800eadc:	463d      	mov	r5, r7
 800eade:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eae2:	b10b      	cbz	r3, 800eae8 <_svfiprintf_r+0x58>
 800eae4:	2b25      	cmp	r3, #37	; 0x25
 800eae6:	d13e      	bne.n	800eb66 <_svfiprintf_r+0xd6>
 800eae8:	ebb7 0a06 	subs.w	sl, r7, r6
 800eaec:	d00b      	beq.n	800eb06 <_svfiprintf_r+0x76>
 800eaee:	4653      	mov	r3, sl
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	4640      	mov	r0, r8
 800eaf6:	f7ff ff71 	bl	800e9dc <__ssputs_r>
 800eafa:	3001      	adds	r0, #1
 800eafc:	f000 80a4 	beq.w	800ec48 <_svfiprintf_r+0x1b8>
 800eb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb02:	4453      	add	r3, sl
 800eb04:	9309      	str	r3, [sp, #36]	; 0x24
 800eb06:	783b      	ldrb	r3, [r7, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 809d 	beq.w	800ec48 <_svfiprintf_r+0x1b8>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	f04f 32ff 	mov.w	r2, #4294967295
 800eb14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	9307      	str	r3, [sp, #28]
 800eb1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb20:	931a      	str	r3, [sp, #104]	; 0x68
 800eb22:	462f      	mov	r7, r5
 800eb24:	2205      	movs	r2, #5
 800eb26:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eb2a:	4850      	ldr	r0, [pc, #320]	; (800ec6c <_svfiprintf_r+0x1dc>)
 800eb2c:	f7f1 fb70 	bl	8000210 <memchr>
 800eb30:	9b04      	ldr	r3, [sp, #16]
 800eb32:	b9d0      	cbnz	r0, 800eb6a <_svfiprintf_r+0xda>
 800eb34:	06d9      	lsls	r1, r3, #27
 800eb36:	bf44      	itt	mi
 800eb38:	2220      	movmi	r2, #32
 800eb3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb3e:	071a      	lsls	r2, r3, #28
 800eb40:	bf44      	itt	mi
 800eb42:	222b      	movmi	r2, #43	; 0x2b
 800eb44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb48:	782a      	ldrb	r2, [r5, #0]
 800eb4a:	2a2a      	cmp	r2, #42	; 0x2a
 800eb4c:	d015      	beq.n	800eb7a <_svfiprintf_r+0xea>
 800eb4e:	9a07      	ldr	r2, [sp, #28]
 800eb50:	462f      	mov	r7, r5
 800eb52:	2000      	movs	r0, #0
 800eb54:	250a      	movs	r5, #10
 800eb56:	4639      	mov	r1, r7
 800eb58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb5c:	3b30      	subs	r3, #48	; 0x30
 800eb5e:	2b09      	cmp	r3, #9
 800eb60:	d94d      	bls.n	800ebfe <_svfiprintf_r+0x16e>
 800eb62:	b1b8      	cbz	r0, 800eb94 <_svfiprintf_r+0x104>
 800eb64:	e00f      	b.n	800eb86 <_svfiprintf_r+0xf6>
 800eb66:	462f      	mov	r7, r5
 800eb68:	e7b8      	b.n	800eadc <_svfiprintf_r+0x4c>
 800eb6a:	4a40      	ldr	r2, [pc, #256]	; (800ec6c <_svfiprintf_r+0x1dc>)
 800eb6c:	1a80      	subs	r0, r0, r2
 800eb6e:	fa0b f000 	lsl.w	r0, fp, r0
 800eb72:	4318      	orrs	r0, r3
 800eb74:	9004      	str	r0, [sp, #16]
 800eb76:	463d      	mov	r5, r7
 800eb78:	e7d3      	b.n	800eb22 <_svfiprintf_r+0x92>
 800eb7a:	9a03      	ldr	r2, [sp, #12]
 800eb7c:	1d11      	adds	r1, r2, #4
 800eb7e:	6812      	ldr	r2, [r2, #0]
 800eb80:	9103      	str	r1, [sp, #12]
 800eb82:	2a00      	cmp	r2, #0
 800eb84:	db01      	blt.n	800eb8a <_svfiprintf_r+0xfa>
 800eb86:	9207      	str	r2, [sp, #28]
 800eb88:	e004      	b.n	800eb94 <_svfiprintf_r+0x104>
 800eb8a:	4252      	negs	r2, r2
 800eb8c:	f043 0302 	orr.w	r3, r3, #2
 800eb90:	9207      	str	r2, [sp, #28]
 800eb92:	9304      	str	r3, [sp, #16]
 800eb94:	783b      	ldrb	r3, [r7, #0]
 800eb96:	2b2e      	cmp	r3, #46	; 0x2e
 800eb98:	d10c      	bne.n	800ebb4 <_svfiprintf_r+0x124>
 800eb9a:	787b      	ldrb	r3, [r7, #1]
 800eb9c:	2b2a      	cmp	r3, #42	; 0x2a
 800eb9e:	d133      	bne.n	800ec08 <_svfiprintf_r+0x178>
 800eba0:	9b03      	ldr	r3, [sp, #12]
 800eba2:	1d1a      	adds	r2, r3, #4
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	9203      	str	r2, [sp, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	bfb8      	it	lt
 800ebac:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebb0:	3702      	adds	r7, #2
 800ebb2:	9305      	str	r3, [sp, #20]
 800ebb4:	4d2e      	ldr	r5, [pc, #184]	; (800ec70 <_svfiprintf_r+0x1e0>)
 800ebb6:	7839      	ldrb	r1, [r7, #0]
 800ebb8:	2203      	movs	r2, #3
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f7f1 fb28 	bl	8000210 <memchr>
 800ebc0:	b138      	cbz	r0, 800ebd2 <_svfiprintf_r+0x142>
 800ebc2:	2340      	movs	r3, #64	; 0x40
 800ebc4:	1b40      	subs	r0, r0, r5
 800ebc6:	fa03 f000 	lsl.w	r0, r3, r0
 800ebca:	9b04      	ldr	r3, [sp, #16]
 800ebcc:	4303      	orrs	r3, r0
 800ebce:	3701      	adds	r7, #1
 800ebd0:	9304      	str	r3, [sp, #16]
 800ebd2:	7839      	ldrb	r1, [r7, #0]
 800ebd4:	4827      	ldr	r0, [pc, #156]	; (800ec74 <_svfiprintf_r+0x1e4>)
 800ebd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebda:	2206      	movs	r2, #6
 800ebdc:	1c7e      	adds	r6, r7, #1
 800ebde:	f7f1 fb17 	bl	8000210 <memchr>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d038      	beq.n	800ec58 <_svfiprintf_r+0x1c8>
 800ebe6:	4b24      	ldr	r3, [pc, #144]	; (800ec78 <_svfiprintf_r+0x1e8>)
 800ebe8:	bb13      	cbnz	r3, 800ec30 <_svfiprintf_r+0x1a0>
 800ebea:	9b03      	ldr	r3, [sp, #12]
 800ebec:	3307      	adds	r3, #7
 800ebee:	f023 0307 	bic.w	r3, r3, #7
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	9303      	str	r3, [sp, #12]
 800ebf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf8:	444b      	add	r3, r9
 800ebfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ebfc:	e76d      	b.n	800eada <_svfiprintf_r+0x4a>
 800ebfe:	fb05 3202 	mla	r2, r5, r2, r3
 800ec02:	2001      	movs	r0, #1
 800ec04:	460f      	mov	r7, r1
 800ec06:	e7a6      	b.n	800eb56 <_svfiprintf_r+0xc6>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	3701      	adds	r7, #1
 800ec0c:	9305      	str	r3, [sp, #20]
 800ec0e:	4619      	mov	r1, r3
 800ec10:	250a      	movs	r5, #10
 800ec12:	4638      	mov	r0, r7
 800ec14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec18:	3a30      	subs	r2, #48	; 0x30
 800ec1a:	2a09      	cmp	r2, #9
 800ec1c:	d903      	bls.n	800ec26 <_svfiprintf_r+0x196>
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0c8      	beq.n	800ebb4 <_svfiprintf_r+0x124>
 800ec22:	9105      	str	r1, [sp, #20]
 800ec24:	e7c6      	b.n	800ebb4 <_svfiprintf_r+0x124>
 800ec26:	fb05 2101 	mla	r1, r5, r1, r2
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	e7f0      	b.n	800ec12 <_svfiprintf_r+0x182>
 800ec30:	ab03      	add	r3, sp, #12
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	4622      	mov	r2, r4
 800ec36:	4b11      	ldr	r3, [pc, #68]	; (800ec7c <_svfiprintf_r+0x1ec>)
 800ec38:	a904      	add	r1, sp, #16
 800ec3a:	4640      	mov	r0, r8
 800ec3c:	f3af 8000 	nop.w
 800ec40:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec44:	4681      	mov	r9, r0
 800ec46:	d1d6      	bne.n	800ebf6 <_svfiprintf_r+0x166>
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	065b      	lsls	r3, r3, #25
 800ec4c:	f53f af35 	bmi.w	800eaba <_svfiprintf_r+0x2a>
 800ec50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec52:	b01d      	add	sp, #116	; 0x74
 800ec54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec58:	ab03      	add	r3, sp, #12
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	4622      	mov	r2, r4
 800ec5e:	4b07      	ldr	r3, [pc, #28]	; (800ec7c <_svfiprintf_r+0x1ec>)
 800ec60:	a904      	add	r1, sp, #16
 800ec62:	4640      	mov	r0, r8
 800ec64:	f000 f882 	bl	800ed6c <_printf_i>
 800ec68:	e7ea      	b.n	800ec40 <_svfiprintf_r+0x1b0>
 800ec6a:	bf00      	nop
 800ec6c:	080112d0 	.word	0x080112d0
 800ec70:	080112d6 	.word	0x080112d6
 800ec74:	080112da 	.word	0x080112da
 800ec78:	00000000 	.word	0x00000000
 800ec7c:	0800e9dd 	.word	0x0800e9dd

0800ec80 <_printf_common>:
 800ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec84:	4691      	mov	r9, r2
 800ec86:	461f      	mov	r7, r3
 800ec88:	688a      	ldr	r2, [r1, #8]
 800ec8a:	690b      	ldr	r3, [r1, #16]
 800ec8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec90:	4293      	cmp	r3, r2
 800ec92:	bfb8      	it	lt
 800ec94:	4613      	movlt	r3, r2
 800ec96:	f8c9 3000 	str.w	r3, [r9]
 800ec9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec9e:	4606      	mov	r6, r0
 800eca0:	460c      	mov	r4, r1
 800eca2:	b112      	cbz	r2, 800ecaa <_printf_common+0x2a>
 800eca4:	3301      	adds	r3, #1
 800eca6:	f8c9 3000 	str.w	r3, [r9]
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	0699      	lsls	r1, r3, #26
 800ecae:	bf42      	ittt	mi
 800ecb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ecb4:	3302      	addmi	r3, #2
 800ecb6:	f8c9 3000 	strmi.w	r3, [r9]
 800ecba:	6825      	ldr	r5, [r4, #0]
 800ecbc:	f015 0506 	ands.w	r5, r5, #6
 800ecc0:	d107      	bne.n	800ecd2 <_printf_common+0x52>
 800ecc2:	f104 0a19 	add.w	sl, r4, #25
 800ecc6:	68e3      	ldr	r3, [r4, #12]
 800ecc8:	f8d9 2000 	ldr.w	r2, [r9]
 800eccc:	1a9b      	subs	r3, r3, r2
 800ecce:	42ab      	cmp	r3, r5
 800ecd0:	dc28      	bgt.n	800ed24 <_printf_common+0xa4>
 800ecd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ecd6:	6822      	ldr	r2, [r4, #0]
 800ecd8:	3300      	adds	r3, #0
 800ecda:	bf18      	it	ne
 800ecdc:	2301      	movne	r3, #1
 800ecde:	0692      	lsls	r2, r2, #26
 800ece0:	d42d      	bmi.n	800ed3e <_printf_common+0xbe>
 800ece2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ece6:	4639      	mov	r1, r7
 800ece8:	4630      	mov	r0, r6
 800ecea:	47c0      	blx	r8
 800ecec:	3001      	adds	r0, #1
 800ecee:	d020      	beq.n	800ed32 <_printf_common+0xb2>
 800ecf0:	6823      	ldr	r3, [r4, #0]
 800ecf2:	68e5      	ldr	r5, [r4, #12]
 800ecf4:	f8d9 2000 	ldr.w	r2, [r9]
 800ecf8:	f003 0306 	and.w	r3, r3, #6
 800ecfc:	2b04      	cmp	r3, #4
 800ecfe:	bf08      	it	eq
 800ed00:	1aad      	subeq	r5, r5, r2
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	6922      	ldr	r2, [r4, #16]
 800ed06:	bf0c      	ite	eq
 800ed08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed0c:	2500      	movne	r5, #0
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	bfc4      	itt	gt
 800ed12:	1a9b      	subgt	r3, r3, r2
 800ed14:	18ed      	addgt	r5, r5, r3
 800ed16:	f04f 0900 	mov.w	r9, #0
 800ed1a:	341a      	adds	r4, #26
 800ed1c:	454d      	cmp	r5, r9
 800ed1e:	d11a      	bne.n	800ed56 <_printf_common+0xd6>
 800ed20:	2000      	movs	r0, #0
 800ed22:	e008      	b.n	800ed36 <_printf_common+0xb6>
 800ed24:	2301      	movs	r3, #1
 800ed26:	4652      	mov	r2, sl
 800ed28:	4639      	mov	r1, r7
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	47c0      	blx	r8
 800ed2e:	3001      	adds	r0, #1
 800ed30:	d103      	bne.n	800ed3a <_printf_common+0xba>
 800ed32:	f04f 30ff 	mov.w	r0, #4294967295
 800ed36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3a:	3501      	adds	r5, #1
 800ed3c:	e7c3      	b.n	800ecc6 <_printf_common+0x46>
 800ed3e:	18e1      	adds	r1, r4, r3
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	2030      	movs	r0, #48	; 0x30
 800ed44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed48:	4422      	add	r2, r4
 800ed4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed52:	3302      	adds	r3, #2
 800ed54:	e7c5      	b.n	800ece2 <_printf_common+0x62>
 800ed56:	2301      	movs	r3, #1
 800ed58:	4622      	mov	r2, r4
 800ed5a:	4639      	mov	r1, r7
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	47c0      	blx	r8
 800ed60:	3001      	adds	r0, #1
 800ed62:	d0e6      	beq.n	800ed32 <_printf_common+0xb2>
 800ed64:	f109 0901 	add.w	r9, r9, #1
 800ed68:	e7d8      	b.n	800ed1c <_printf_common+0x9c>
	...

0800ed6c <_printf_i>:
 800ed6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ed74:	460c      	mov	r4, r1
 800ed76:	7e09      	ldrb	r1, [r1, #24]
 800ed78:	b085      	sub	sp, #20
 800ed7a:	296e      	cmp	r1, #110	; 0x6e
 800ed7c:	4617      	mov	r7, r2
 800ed7e:	4606      	mov	r6, r0
 800ed80:	4698      	mov	r8, r3
 800ed82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed84:	f000 80b3 	beq.w	800eeee <_printf_i+0x182>
 800ed88:	d822      	bhi.n	800edd0 <_printf_i+0x64>
 800ed8a:	2963      	cmp	r1, #99	; 0x63
 800ed8c:	d036      	beq.n	800edfc <_printf_i+0x90>
 800ed8e:	d80a      	bhi.n	800eda6 <_printf_i+0x3a>
 800ed90:	2900      	cmp	r1, #0
 800ed92:	f000 80b9 	beq.w	800ef08 <_printf_i+0x19c>
 800ed96:	2958      	cmp	r1, #88	; 0x58
 800ed98:	f000 8083 	beq.w	800eea2 <_printf_i+0x136>
 800ed9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eda0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800eda4:	e032      	b.n	800ee0c <_printf_i+0xa0>
 800eda6:	2964      	cmp	r1, #100	; 0x64
 800eda8:	d001      	beq.n	800edae <_printf_i+0x42>
 800edaa:	2969      	cmp	r1, #105	; 0x69
 800edac:	d1f6      	bne.n	800ed9c <_printf_i+0x30>
 800edae:	6820      	ldr	r0, [r4, #0]
 800edb0:	6813      	ldr	r3, [r2, #0]
 800edb2:	0605      	lsls	r5, r0, #24
 800edb4:	f103 0104 	add.w	r1, r3, #4
 800edb8:	d52a      	bpl.n	800ee10 <_printf_i+0xa4>
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	6011      	str	r1, [r2, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	da03      	bge.n	800edca <_printf_i+0x5e>
 800edc2:	222d      	movs	r2, #45	; 0x2d
 800edc4:	425b      	negs	r3, r3
 800edc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800edca:	486f      	ldr	r0, [pc, #444]	; (800ef88 <_printf_i+0x21c>)
 800edcc:	220a      	movs	r2, #10
 800edce:	e039      	b.n	800ee44 <_printf_i+0xd8>
 800edd0:	2973      	cmp	r1, #115	; 0x73
 800edd2:	f000 809d 	beq.w	800ef10 <_printf_i+0x1a4>
 800edd6:	d808      	bhi.n	800edea <_printf_i+0x7e>
 800edd8:	296f      	cmp	r1, #111	; 0x6f
 800edda:	d020      	beq.n	800ee1e <_printf_i+0xb2>
 800eddc:	2970      	cmp	r1, #112	; 0x70
 800edde:	d1dd      	bne.n	800ed9c <_printf_i+0x30>
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	f043 0320 	orr.w	r3, r3, #32
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	e003      	b.n	800edf2 <_printf_i+0x86>
 800edea:	2975      	cmp	r1, #117	; 0x75
 800edec:	d017      	beq.n	800ee1e <_printf_i+0xb2>
 800edee:	2978      	cmp	r1, #120	; 0x78
 800edf0:	d1d4      	bne.n	800ed9c <_printf_i+0x30>
 800edf2:	2378      	movs	r3, #120	; 0x78
 800edf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edf8:	4864      	ldr	r0, [pc, #400]	; (800ef8c <_printf_i+0x220>)
 800edfa:	e055      	b.n	800eea8 <_printf_i+0x13c>
 800edfc:	6813      	ldr	r3, [r2, #0]
 800edfe:	1d19      	adds	r1, r3, #4
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6011      	str	r1, [r2, #0]
 800ee04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e08c      	b.n	800ef2a <_printf_i+0x1be>
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6011      	str	r1, [r2, #0]
 800ee14:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee18:	bf18      	it	ne
 800ee1a:	b21b      	sxthne	r3, r3
 800ee1c:	e7cf      	b.n	800edbe <_printf_i+0x52>
 800ee1e:	6813      	ldr	r3, [r2, #0]
 800ee20:	6825      	ldr	r5, [r4, #0]
 800ee22:	1d18      	adds	r0, r3, #4
 800ee24:	6010      	str	r0, [r2, #0]
 800ee26:	0628      	lsls	r0, r5, #24
 800ee28:	d501      	bpl.n	800ee2e <_printf_i+0xc2>
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	e002      	b.n	800ee34 <_printf_i+0xc8>
 800ee2e:	0668      	lsls	r0, r5, #25
 800ee30:	d5fb      	bpl.n	800ee2a <_printf_i+0xbe>
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	4854      	ldr	r0, [pc, #336]	; (800ef88 <_printf_i+0x21c>)
 800ee36:	296f      	cmp	r1, #111	; 0x6f
 800ee38:	bf14      	ite	ne
 800ee3a:	220a      	movne	r2, #10
 800ee3c:	2208      	moveq	r2, #8
 800ee3e:	2100      	movs	r1, #0
 800ee40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee44:	6865      	ldr	r5, [r4, #4]
 800ee46:	60a5      	str	r5, [r4, #8]
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	f2c0 8095 	blt.w	800ef78 <_printf_i+0x20c>
 800ee4e:	6821      	ldr	r1, [r4, #0]
 800ee50:	f021 0104 	bic.w	r1, r1, #4
 800ee54:	6021      	str	r1, [r4, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d13d      	bne.n	800eed6 <_printf_i+0x16a>
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	f040 808e 	bne.w	800ef7c <_printf_i+0x210>
 800ee60:	4665      	mov	r5, ip
 800ee62:	2a08      	cmp	r2, #8
 800ee64:	d10b      	bne.n	800ee7e <_printf_i+0x112>
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	07db      	lsls	r3, r3, #31
 800ee6a:	d508      	bpl.n	800ee7e <_printf_i+0x112>
 800ee6c:	6923      	ldr	r3, [r4, #16]
 800ee6e:	6862      	ldr	r2, [r4, #4]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	bfde      	ittt	le
 800ee74:	2330      	movle	r3, #48	; 0x30
 800ee76:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee7e:	ebac 0305 	sub.w	r3, ip, r5
 800ee82:	6123      	str	r3, [r4, #16]
 800ee84:	f8cd 8000 	str.w	r8, [sp]
 800ee88:	463b      	mov	r3, r7
 800ee8a:	aa03      	add	r2, sp, #12
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7ff fef6 	bl	800ec80 <_printf_common>
 800ee94:	3001      	adds	r0, #1
 800ee96:	d14d      	bne.n	800ef34 <_printf_i+0x1c8>
 800ee98:	f04f 30ff 	mov.w	r0, #4294967295
 800ee9c:	b005      	add	sp, #20
 800ee9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eea2:	4839      	ldr	r0, [pc, #228]	; (800ef88 <_printf_i+0x21c>)
 800eea4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eea8:	6813      	ldr	r3, [r2, #0]
 800eeaa:	6821      	ldr	r1, [r4, #0]
 800eeac:	1d1d      	adds	r5, r3, #4
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	6015      	str	r5, [r2, #0]
 800eeb2:	060a      	lsls	r2, r1, #24
 800eeb4:	d50b      	bpl.n	800eece <_printf_i+0x162>
 800eeb6:	07ca      	lsls	r2, r1, #31
 800eeb8:	bf44      	itt	mi
 800eeba:	f041 0120 	orrmi.w	r1, r1, #32
 800eebe:	6021      	strmi	r1, [r4, #0]
 800eec0:	b91b      	cbnz	r3, 800eeca <_printf_i+0x15e>
 800eec2:	6822      	ldr	r2, [r4, #0]
 800eec4:	f022 0220 	bic.w	r2, r2, #32
 800eec8:	6022      	str	r2, [r4, #0]
 800eeca:	2210      	movs	r2, #16
 800eecc:	e7b7      	b.n	800ee3e <_printf_i+0xd2>
 800eece:	064d      	lsls	r5, r1, #25
 800eed0:	bf48      	it	mi
 800eed2:	b29b      	uxthmi	r3, r3
 800eed4:	e7ef      	b.n	800eeb6 <_printf_i+0x14a>
 800eed6:	4665      	mov	r5, ip
 800eed8:	fbb3 f1f2 	udiv	r1, r3, r2
 800eedc:	fb02 3311 	mls	r3, r2, r1, r3
 800eee0:	5cc3      	ldrb	r3, [r0, r3]
 800eee2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eee6:	460b      	mov	r3, r1
 800eee8:	2900      	cmp	r1, #0
 800eeea:	d1f5      	bne.n	800eed8 <_printf_i+0x16c>
 800eeec:	e7b9      	b.n	800ee62 <_printf_i+0xf6>
 800eeee:	6813      	ldr	r3, [r2, #0]
 800eef0:	6825      	ldr	r5, [r4, #0]
 800eef2:	6961      	ldr	r1, [r4, #20]
 800eef4:	1d18      	adds	r0, r3, #4
 800eef6:	6010      	str	r0, [r2, #0]
 800eef8:	0628      	lsls	r0, r5, #24
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	d501      	bpl.n	800ef02 <_printf_i+0x196>
 800eefe:	6019      	str	r1, [r3, #0]
 800ef00:	e002      	b.n	800ef08 <_printf_i+0x19c>
 800ef02:	066a      	lsls	r2, r5, #25
 800ef04:	d5fb      	bpl.n	800eefe <_printf_i+0x192>
 800ef06:	8019      	strh	r1, [r3, #0]
 800ef08:	2300      	movs	r3, #0
 800ef0a:	6123      	str	r3, [r4, #16]
 800ef0c:	4665      	mov	r5, ip
 800ef0e:	e7b9      	b.n	800ee84 <_printf_i+0x118>
 800ef10:	6813      	ldr	r3, [r2, #0]
 800ef12:	1d19      	adds	r1, r3, #4
 800ef14:	6011      	str	r1, [r2, #0]
 800ef16:	681d      	ldr	r5, [r3, #0]
 800ef18:	6862      	ldr	r2, [r4, #4]
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f7f1 f977 	bl	8000210 <memchr>
 800ef22:	b108      	cbz	r0, 800ef28 <_printf_i+0x1bc>
 800ef24:	1b40      	subs	r0, r0, r5
 800ef26:	6060      	str	r0, [r4, #4]
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	6123      	str	r3, [r4, #16]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef32:	e7a7      	b.n	800ee84 <_printf_i+0x118>
 800ef34:	6923      	ldr	r3, [r4, #16]
 800ef36:	462a      	mov	r2, r5
 800ef38:	4639      	mov	r1, r7
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	47c0      	blx	r8
 800ef3e:	3001      	adds	r0, #1
 800ef40:	d0aa      	beq.n	800ee98 <_printf_i+0x12c>
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	079b      	lsls	r3, r3, #30
 800ef46:	d413      	bmi.n	800ef70 <_printf_i+0x204>
 800ef48:	68e0      	ldr	r0, [r4, #12]
 800ef4a:	9b03      	ldr	r3, [sp, #12]
 800ef4c:	4298      	cmp	r0, r3
 800ef4e:	bfb8      	it	lt
 800ef50:	4618      	movlt	r0, r3
 800ef52:	e7a3      	b.n	800ee9c <_printf_i+0x130>
 800ef54:	2301      	movs	r3, #1
 800ef56:	464a      	mov	r2, r9
 800ef58:	4639      	mov	r1, r7
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	47c0      	blx	r8
 800ef5e:	3001      	adds	r0, #1
 800ef60:	d09a      	beq.n	800ee98 <_printf_i+0x12c>
 800ef62:	3501      	adds	r5, #1
 800ef64:	68e3      	ldr	r3, [r4, #12]
 800ef66:	9a03      	ldr	r2, [sp, #12]
 800ef68:	1a9b      	subs	r3, r3, r2
 800ef6a:	42ab      	cmp	r3, r5
 800ef6c:	dcf2      	bgt.n	800ef54 <_printf_i+0x1e8>
 800ef6e:	e7eb      	b.n	800ef48 <_printf_i+0x1dc>
 800ef70:	2500      	movs	r5, #0
 800ef72:	f104 0919 	add.w	r9, r4, #25
 800ef76:	e7f5      	b.n	800ef64 <_printf_i+0x1f8>
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d1ac      	bne.n	800eed6 <_printf_i+0x16a>
 800ef7c:	7803      	ldrb	r3, [r0, #0]
 800ef7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef86:	e76c      	b.n	800ee62 <_printf_i+0xf6>
 800ef88:	080112e1 	.word	0x080112e1
 800ef8c:	080112f2 	.word	0x080112f2

0800ef90 <memmove>:
 800ef90:	4288      	cmp	r0, r1
 800ef92:	b510      	push	{r4, lr}
 800ef94:	eb01 0302 	add.w	r3, r1, r2
 800ef98:	d807      	bhi.n	800efaa <memmove+0x1a>
 800ef9a:	1e42      	subs	r2, r0, #1
 800ef9c:	4299      	cmp	r1, r3
 800ef9e:	d00a      	beq.n	800efb6 <memmove+0x26>
 800efa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efa4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800efa8:	e7f8      	b.n	800ef9c <memmove+0xc>
 800efaa:	4283      	cmp	r3, r0
 800efac:	d9f5      	bls.n	800ef9a <memmove+0xa>
 800efae:	1881      	adds	r1, r0, r2
 800efb0:	1ad2      	subs	r2, r2, r3
 800efb2:	42d3      	cmn	r3, r2
 800efb4:	d100      	bne.n	800efb8 <memmove+0x28>
 800efb6:	bd10      	pop	{r4, pc}
 800efb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800efc0:	e7f7      	b.n	800efb2 <memmove+0x22>
	...

0800efc4 <_free_r>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	4605      	mov	r5, r0
 800efc8:	2900      	cmp	r1, #0
 800efca:	d045      	beq.n	800f058 <_free_r+0x94>
 800efcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efd0:	1f0c      	subs	r4, r1, #4
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bfb8      	it	lt
 800efd6:	18e4      	addlt	r4, r4, r3
 800efd8:	f000 f8d2 	bl	800f180 <__malloc_lock>
 800efdc:	4a1f      	ldr	r2, [pc, #124]	; (800f05c <_free_r+0x98>)
 800efde:	6813      	ldr	r3, [r2, #0]
 800efe0:	4610      	mov	r0, r2
 800efe2:	b933      	cbnz	r3, 800eff2 <_free_r+0x2e>
 800efe4:	6063      	str	r3, [r4, #4]
 800efe6:	6014      	str	r4, [r2, #0]
 800efe8:	4628      	mov	r0, r5
 800efea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efee:	f000 b8c8 	b.w	800f182 <__malloc_unlock>
 800eff2:	42a3      	cmp	r3, r4
 800eff4:	d90c      	bls.n	800f010 <_free_r+0x4c>
 800eff6:	6821      	ldr	r1, [r4, #0]
 800eff8:	1862      	adds	r2, r4, r1
 800effa:	4293      	cmp	r3, r2
 800effc:	bf04      	itt	eq
 800effe:	681a      	ldreq	r2, [r3, #0]
 800f000:	685b      	ldreq	r3, [r3, #4]
 800f002:	6063      	str	r3, [r4, #4]
 800f004:	bf04      	itt	eq
 800f006:	1852      	addeq	r2, r2, r1
 800f008:	6022      	streq	r2, [r4, #0]
 800f00a:	6004      	str	r4, [r0, #0]
 800f00c:	e7ec      	b.n	800efe8 <_free_r+0x24>
 800f00e:	4613      	mov	r3, r2
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	b10a      	cbz	r2, 800f018 <_free_r+0x54>
 800f014:	42a2      	cmp	r2, r4
 800f016:	d9fa      	bls.n	800f00e <_free_r+0x4a>
 800f018:	6819      	ldr	r1, [r3, #0]
 800f01a:	1858      	adds	r0, r3, r1
 800f01c:	42a0      	cmp	r0, r4
 800f01e:	d10b      	bne.n	800f038 <_free_r+0x74>
 800f020:	6820      	ldr	r0, [r4, #0]
 800f022:	4401      	add	r1, r0
 800f024:	1858      	adds	r0, r3, r1
 800f026:	4282      	cmp	r2, r0
 800f028:	6019      	str	r1, [r3, #0]
 800f02a:	d1dd      	bne.n	800efe8 <_free_r+0x24>
 800f02c:	6810      	ldr	r0, [r2, #0]
 800f02e:	6852      	ldr	r2, [r2, #4]
 800f030:	605a      	str	r2, [r3, #4]
 800f032:	4401      	add	r1, r0
 800f034:	6019      	str	r1, [r3, #0]
 800f036:	e7d7      	b.n	800efe8 <_free_r+0x24>
 800f038:	d902      	bls.n	800f040 <_free_r+0x7c>
 800f03a:	230c      	movs	r3, #12
 800f03c:	602b      	str	r3, [r5, #0]
 800f03e:	e7d3      	b.n	800efe8 <_free_r+0x24>
 800f040:	6820      	ldr	r0, [r4, #0]
 800f042:	1821      	adds	r1, r4, r0
 800f044:	428a      	cmp	r2, r1
 800f046:	bf04      	itt	eq
 800f048:	6811      	ldreq	r1, [r2, #0]
 800f04a:	6852      	ldreq	r2, [r2, #4]
 800f04c:	6062      	str	r2, [r4, #4]
 800f04e:	bf04      	itt	eq
 800f050:	1809      	addeq	r1, r1, r0
 800f052:	6021      	streq	r1, [r4, #0]
 800f054:	605c      	str	r4, [r3, #4]
 800f056:	e7c7      	b.n	800efe8 <_free_r+0x24>
 800f058:	bd38      	pop	{r3, r4, r5, pc}
 800f05a:	bf00      	nop
 800f05c:	200096e4 	.word	0x200096e4

0800f060 <_malloc_r>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	1ccd      	adds	r5, r1, #3
 800f064:	f025 0503 	bic.w	r5, r5, #3
 800f068:	3508      	adds	r5, #8
 800f06a:	2d0c      	cmp	r5, #12
 800f06c:	bf38      	it	cc
 800f06e:	250c      	movcc	r5, #12
 800f070:	2d00      	cmp	r5, #0
 800f072:	4606      	mov	r6, r0
 800f074:	db01      	blt.n	800f07a <_malloc_r+0x1a>
 800f076:	42a9      	cmp	r1, r5
 800f078:	d903      	bls.n	800f082 <_malloc_r+0x22>
 800f07a:	230c      	movs	r3, #12
 800f07c:	6033      	str	r3, [r6, #0]
 800f07e:	2000      	movs	r0, #0
 800f080:	bd70      	pop	{r4, r5, r6, pc}
 800f082:	f000 f87d 	bl	800f180 <__malloc_lock>
 800f086:	4a21      	ldr	r2, [pc, #132]	; (800f10c <_malloc_r+0xac>)
 800f088:	6814      	ldr	r4, [r2, #0]
 800f08a:	4621      	mov	r1, r4
 800f08c:	b991      	cbnz	r1, 800f0b4 <_malloc_r+0x54>
 800f08e:	4c20      	ldr	r4, [pc, #128]	; (800f110 <_malloc_r+0xb0>)
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	b91b      	cbnz	r3, 800f09c <_malloc_r+0x3c>
 800f094:	4630      	mov	r0, r6
 800f096:	f000 f863 	bl	800f160 <_sbrk_r>
 800f09a:	6020      	str	r0, [r4, #0]
 800f09c:	4629      	mov	r1, r5
 800f09e:	4630      	mov	r0, r6
 800f0a0:	f000 f85e 	bl	800f160 <_sbrk_r>
 800f0a4:	1c43      	adds	r3, r0, #1
 800f0a6:	d124      	bne.n	800f0f2 <_malloc_r+0x92>
 800f0a8:	230c      	movs	r3, #12
 800f0aa:	6033      	str	r3, [r6, #0]
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f000 f868 	bl	800f182 <__malloc_unlock>
 800f0b2:	e7e4      	b.n	800f07e <_malloc_r+0x1e>
 800f0b4:	680b      	ldr	r3, [r1, #0]
 800f0b6:	1b5b      	subs	r3, r3, r5
 800f0b8:	d418      	bmi.n	800f0ec <_malloc_r+0x8c>
 800f0ba:	2b0b      	cmp	r3, #11
 800f0bc:	d90f      	bls.n	800f0de <_malloc_r+0x7e>
 800f0be:	600b      	str	r3, [r1, #0]
 800f0c0:	50cd      	str	r5, [r1, r3]
 800f0c2:	18cc      	adds	r4, r1, r3
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	f000 f85c 	bl	800f182 <__malloc_unlock>
 800f0ca:	f104 000b 	add.w	r0, r4, #11
 800f0ce:	1d23      	adds	r3, r4, #4
 800f0d0:	f020 0007 	bic.w	r0, r0, #7
 800f0d4:	1ac3      	subs	r3, r0, r3
 800f0d6:	d0d3      	beq.n	800f080 <_malloc_r+0x20>
 800f0d8:	425a      	negs	r2, r3
 800f0da:	50e2      	str	r2, [r4, r3]
 800f0dc:	e7d0      	b.n	800f080 <_malloc_r+0x20>
 800f0de:	428c      	cmp	r4, r1
 800f0e0:	684b      	ldr	r3, [r1, #4]
 800f0e2:	bf16      	itet	ne
 800f0e4:	6063      	strne	r3, [r4, #4]
 800f0e6:	6013      	streq	r3, [r2, #0]
 800f0e8:	460c      	movne	r4, r1
 800f0ea:	e7eb      	b.n	800f0c4 <_malloc_r+0x64>
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	6849      	ldr	r1, [r1, #4]
 800f0f0:	e7cc      	b.n	800f08c <_malloc_r+0x2c>
 800f0f2:	1cc4      	adds	r4, r0, #3
 800f0f4:	f024 0403 	bic.w	r4, r4, #3
 800f0f8:	42a0      	cmp	r0, r4
 800f0fa:	d005      	beq.n	800f108 <_malloc_r+0xa8>
 800f0fc:	1a21      	subs	r1, r4, r0
 800f0fe:	4630      	mov	r0, r6
 800f100:	f000 f82e 	bl	800f160 <_sbrk_r>
 800f104:	3001      	adds	r0, #1
 800f106:	d0cf      	beq.n	800f0a8 <_malloc_r+0x48>
 800f108:	6025      	str	r5, [r4, #0]
 800f10a:	e7db      	b.n	800f0c4 <_malloc_r+0x64>
 800f10c:	200096e4 	.word	0x200096e4
 800f110:	200096e8 	.word	0x200096e8

0800f114 <_realloc_r>:
 800f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f116:	4607      	mov	r7, r0
 800f118:	4614      	mov	r4, r2
 800f11a:	460e      	mov	r6, r1
 800f11c:	b921      	cbnz	r1, 800f128 <_realloc_r+0x14>
 800f11e:	4611      	mov	r1, r2
 800f120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f124:	f7ff bf9c 	b.w	800f060 <_malloc_r>
 800f128:	b922      	cbnz	r2, 800f134 <_realloc_r+0x20>
 800f12a:	f7ff ff4b 	bl	800efc4 <_free_r>
 800f12e:	4625      	mov	r5, r4
 800f130:	4628      	mov	r0, r5
 800f132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f134:	f000 f826 	bl	800f184 <_malloc_usable_size_r>
 800f138:	42a0      	cmp	r0, r4
 800f13a:	d20f      	bcs.n	800f15c <_realloc_r+0x48>
 800f13c:	4621      	mov	r1, r4
 800f13e:	4638      	mov	r0, r7
 800f140:	f7ff ff8e 	bl	800f060 <_malloc_r>
 800f144:	4605      	mov	r5, r0
 800f146:	2800      	cmp	r0, #0
 800f148:	d0f2      	beq.n	800f130 <_realloc_r+0x1c>
 800f14a:	4631      	mov	r1, r6
 800f14c:	4622      	mov	r2, r4
 800f14e:	f7ff fc11 	bl	800e974 <memcpy>
 800f152:	4631      	mov	r1, r6
 800f154:	4638      	mov	r0, r7
 800f156:	f7ff ff35 	bl	800efc4 <_free_r>
 800f15a:	e7e9      	b.n	800f130 <_realloc_r+0x1c>
 800f15c:	4635      	mov	r5, r6
 800f15e:	e7e7      	b.n	800f130 <_realloc_r+0x1c>

0800f160 <_sbrk_r>:
 800f160:	b538      	push	{r3, r4, r5, lr}
 800f162:	4c06      	ldr	r4, [pc, #24]	; (800f17c <_sbrk_r+0x1c>)
 800f164:	2300      	movs	r3, #0
 800f166:	4605      	mov	r5, r0
 800f168:	4608      	mov	r0, r1
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	f7f6 fe28 	bl	8005dc0 <_sbrk>
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	d102      	bne.n	800f17a <_sbrk_r+0x1a>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	b103      	cbz	r3, 800f17a <_sbrk_r+0x1a>
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	bd38      	pop	{r3, r4, r5, pc}
 800f17c:	20009dcc 	.word	0x20009dcc

0800f180 <__malloc_lock>:
 800f180:	4770      	bx	lr

0800f182 <__malloc_unlock>:
 800f182:	4770      	bx	lr

0800f184 <_malloc_usable_size_r>:
 800f184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f188:	1f18      	subs	r0, r3, #4
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	bfbc      	itt	lt
 800f18e:	580b      	ldrlt	r3, [r1, r0]
 800f190:	18c0      	addlt	r0, r0, r3
 800f192:	4770      	bx	lr

0800f194 <_init>:
 800f194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f196:	bf00      	nop
 800f198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f19a:	bc08      	pop	{r3}
 800f19c:	469e      	mov	lr, r3
 800f19e:	4770      	bx	lr

0800f1a0 <_fini>:
 800f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a2:	bf00      	nop
 800f1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1a6:	bc08      	pop	{r3}
 800f1a8:	469e      	mov	lr, r3
 800f1aa:	4770      	bx	lr
